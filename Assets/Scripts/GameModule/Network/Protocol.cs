// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: protocol.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from protocol.proto</summary>
public static partial class ProtocolReflection {

  #region Descriptor
  /// <summary>File descriptor for protocol.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static ProtocolReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cg5wcm90b2NvbC5wcm90byJdCg5Db21tb25SZXNwb25zZRIPCgdwYXlsb2Fk",
          "GAEgASgMEhEKCXNpZ25hdHVyZRgCIAEoCRIbCgZzdGF0dXMYAyACKA4yCy5T",
          "dGF0dXNDb2RlEgoKAnRzGAQgASgDIpgBCgpQMF9SZXF1ZXN0EhAKCGRldmlj",
          "ZUlkGAEgAigJEhYKDmRldmljZVBsYXRmb3JtGAIgAigJEhIKCmRldmljZU5h",
          "bWUYAyACKAkSEwoLYWNjZXNzdG9rZW4YBCABKAkSKQoLc2VydmljZVR5cGUY",
          "BSABKA4yFC5EYXRhTGlua1NlcnZpY2VUeXBlEgwKBG1hc2sYBiACKAkiTAoL",
          "UDBfUmVzcG9uc2USGQoGcmVzdWx0GAEgAigLMgkuUEJSZXN1bHQSEQoJYXV0",
          "aFRva2VuGAIgASgJEg8KB2F1dGhLZXkYAyABKAkiWgoKUDFfUmVxdWVzdBIT",
          "CgthY2Nlc3N0b2tlbhgBIAIoCRIpCgtzZXJ2aWNlVHlwZRgCIAIoDjIULkRh",
          "dGFMaW5rU2VydmljZVR5cGUSDAoEbWFzaxgDIAIoCSJMCgtQMV9SZXNwb25z",
          "ZRIZCgZyZXN1bHQYASABKAsyCS5QQlJlc3VsdBIRCglhdXRoVG9rZW4YAiAB",
          "KAkSDwoHYXV0aEtleRgDIAEoCSItCgpQMl9SZXF1ZXN0EhEKCWF1dGhUb2tl",
          "bhgBIAIoCRIMCgRtYXNrGAIgASgJIoQBCgtQMl9SZXNwb25zZRIZCgZyZXN1",
          "bHQYASABKAsyCS5QQlJlc3VsdBIQCghwbGF5ZXJJZBgCIAEoAxITCgtzZXNz",
          "aW9uX2tleRgDIAEoCRISCgpzZXJ2ZXJUaW1lGAQgASgDEh8KF2lzUGxhdGZv",
          "cm1TZXJ2aWNlTGlua2VkGAUgASgIIkMKC1AzX1Jlc3BvbnNlEhkKBnJlc3Vs",
          "dBgBIAEoCzIJLlBCUmVzdWx0EhkKBnBsYXllchgCIAEoCzIJLlBCUGxheWVy",
          "IpIBCgtQNF9SZXNwb25zZRIZCgZyZXN1bHQYASABKAsyCS5QQlJlc3VsdBIQ",
          "CghiYXR0bGVJZBgCIAEoCRIqChBhcnlFbmVteURhdGFJbmZvGAMgAygLMhAu",
          "UEJFbmVteURhdGFJbmZvEioKEGFyeVJvYm90RGF0YUluZm8YBCADKAsyEC5Q",
          "QlJvYm90RGF0YUluZm8iVAoKUDVfUmVxdWVzdBIQCghiYXR0bGVJZBgBIAIo",
          "CRIVCg1iYXR0bGVSYW5raW5nGAIgAigFEh0KCmFjdGlvbkxpc3QYAyADKAsy",
          "CS5QQkFjdGlvbiLsAQoLUDVfUmVzcG9uc2USGQoGcmVzdWx0GAEgASgLMgku",
          "UEJSZXN1bHQSFQoNZ2FpblJhbmtMZXZlbBgCIAEoBRIQCghnYWluR29sZBgD",
          "IAEoBRIgChhnYWluUmFua0xldmVsdXBCb251c0dvbGQYBCABKAUSKQoJZmln",
          "aHRGaXNoGAUgASgLMhYuUEJQbGF5ZXJGaXNoTGV2ZWxJbmZvEhgKEGNvbnRX",
          "aW5SYW5rQWRkZWQYBiABKAUSGAoQY29udFdpbkdvbGRBZGRlZBgHIAEoBRIY",
          "ChBnb2xkUG9vbEN1cnJHb2xkGAggASgFIhwKClA2X1JlcXVlc3QSDgoGZmlz",
          "aElkGAEgAigFIigKC1A2X1Jlc3BvbnNlEhkKBnJlc3VsdBgBIAEoCzIJLlBC",
          "UmVzdWx0IhwKClA3X1JlcXVlc3QSDgoGZmlzaElkGAEgAigFIlIKC1A3X1Jl",
          "c3BvbnNlEhkKBnJlc3VsdBgBIAEoCzIJLlBCUmVzdWx0EigKCGZpc2hJbmZv",
          "GAIgASgLMhYuUEJQbGF5ZXJGaXNoTGV2ZWxJbmZvIjAKClA4X1JlcXVlc3QS",
          "EAoIYmF0dGxlSWQYASACKAkSEAoIaXNEb3VibGUYAiACKAgiPQoLUDhfUmVz",
          "cG9uc2USGQoGcmVzdWx0GAEgASgLMgkuUEJSZXN1bHQSEwoLcmV3YXJkTW9u",
          "ZXkYAiABKAUiGgoKUDlfUmVxdWVzdBIMCgRuaWNrGAEgAigJIigKC1A5X1Jl",
          "c3BvbnNlEhkKBnJlc3VsdBgBIAEoCzIJLlBCUmVzdWx0Ii0KC1AxMF9SZXF1",
          "ZXN0Eh4KC3Byb2R1Y3RUeXBlGAEgAigOMgkuU2hvcFR5cGUigAEKDFAxMF9S",
          "ZXNwb25zZRIZCgZyZXN1bHQYASABKAsyCS5QQlJlc3VsdBIoCgtwcm9kdWN0",
          "TGlzdBgCIAMoCzITLlNob3BCaWxsaW5nUHJvZHVjdBIrChBiaWxsaW5nU3Rh",
          "dGVJbmZvGAMgASgLMhEuQmlsbGluZ1N0YXRlSW5mbyI2CgtQMTFfUmVxdWVz",
          "dBISCgpzaG9wSXRlbUlkGAEgAigFEhMKC3Nob3BJdGVtTnVtGAIgAigFIoUB",
          "CgxQMTFfUmVzcG9uc2USGQoGcmVzdWx0GAEgAigLMgkuUEJSZXN1bHQSIAoH",
          "Y29udGVudBgCIAMoCzIPLlByb2R1Y3RDb250ZW50EhIKCmlzVHJlYXN1cmUY",
          "AyABKAgSJAoLdHJlYUNvbnRlbnQYBCADKAsyDy5Qcm9kdWN0Q29udGVudCIh",
          "CgtQMTJfUmVxdWVzdBISCgpwbGF0Zm9ybUlkGAEgAigJImYKDFAxMl9SZXNw",
          "b25zZRIZCgZyZXN1bHQYASACKAsyCS5QQlJlc3VsdBIqCgpyZXN1bHRDb2Rl",
          "GAIgAigOMhYuUHVyY2hhc2VkUmVzcG9uc2VLaW5kEg8KB21lc3NhZ2UYAyAB",
          "KAkidwoLUDEzX1JlcXVlc3QSDwoHcmVjZWlwdBgBIAIoCRIVCg10cmFuc2Fj",
          "dGlvbklkGAIgAigJEg0KBXByaWNlGAMgAigJEhYKDmZvcm1hdHRlZFByaWNl",
          "GAQgAigJEhkKCHBsYXRmb3JtGAUgAigOMgcuRGV2aWNlIogBCgxQMTNfUmVz",
          "cG9uc2USGQoGcmVzdWx0GAEgAigLMgkuUEJSZXN1bHQSIAoHY29udGVudBgC",
          "IAMoCzIPLlByb2R1Y3RDb250ZW50EioKCnJlc3VsdENvZGUYAyACKA4yFi5Q",
          "dXJjaGFzZWRSZXNwb25zZUtpbmQSDwoHbWVzc2FnZRgEIAEoCSJ8CgxQMTRf",
          "UmVzcG9uc2USGQoGcmVzdWx0GAEgASgLMgkuUEJSZXN1bHQSDQoFbGV2ZWwY",
          "AiABKAUSEAoIY3VyckdvbGQYAyABKAUSEAoIY3VyclRpbWUYBCABKAMSDgoG",
          "bmV4dEF0GAUgASgDEg4KBmZ1bGxBdBgGIAEoAyIhCgtQMTVfUmVxdWVzdBIS",
          "CgpwbGF0Zm9ybUlkGAEgAigJIogBCgxQMTVfUmVzcG9uc2USGQoGcmVzdWx0",
          "GAEgAigLMgkuUEJSZXN1bHQSIAoHY29udGVudBgCIAMoCzIPLlByb2R1Y3RD",
          "b250ZW50EioKCnJlc3VsdENvZGUYAyACKA4yFi5QdXJjaGFzZWRSZXNwb25z",
          "ZUtpbmQSDwoHbWVzc2FnZRgEIAEoCSIjCgtQMTZfUmVxdWVzdBIUCgxyYW5r",
          "Qm91bmRzSWQYASACKAUinQEKDFAxNl9SZXNwb25zZRIZCgZyZXN1bHQYASAC",
          "KAsyCS5QQlJlc3VsdBIWCg5nZXR0ZWRCb3VuZHNJZBgCIAMoBRIgCgdjb250",
          "ZW50GAMgAygLMg8uUHJvZHVjdENvbnRlbnQSEgoKaXNUcmVhc3VyZRgEIAEo",
          "CBIkCgt0cmVhQ29udGVudBgFIAMoCzIPLlByb2R1Y3RDb250ZW50Ii0KC1Ax",
          "N19SZXF1ZXN0EhAKCHBsYXllcklkGAEgAigJEgwKBG1hc2sYAiACKAkiTQoM",
          "UDE3X1Jlc3BvbnNlEhkKBnJlc3VsdBgBIAEoCzIJLlBCUmVzdWx0EhEKCWF1",
          "dGhUb2tlbhgCIAEoCRIPCgdhdXRoS2V5GAMgASgJIikKDFAxOF9SZXNwb25z",
          "ZRIZCgZyZXN1bHQYASABKAsyCS5QQlJlc3VsdCIsCgtQMTlfUmVxdWVzdBId",
          "CghyYW5rVHlwZRgBIAIoDjILLlBCUmFua1R5cGUi5wEKDFAxOV9SZXNwb25z",
          "ZRIZCgZyZXN1bHQYASABKAsyCS5QQlJlc3VsdBIjCg5yYW5rUGxheWVyTGlz",
          "dBgCIAMoCzILLlJhbmtQbGF5ZXISIQoKcmFua1Jld2FyZBgDIAEoCzINLlBC",
          "UmFua1Jld2FyZBIZCgR0eXBlGAQgASgOMgsuUEJSYW5rVHlwZRIRCglyYW5r",
          "QmF0Y2gYBSABKAUSDAoEcmFuaxgGIAEoAxIQCghyYW5rUmF0ZRgHIAEoAhIQ",
          "CghiZXN0UmFuaxgIIAEoAxIUCgxiZXN0UmFua1JhdGUYCSABKAIiSgoMUDIw",
          "X1Jlc3BvbnNlEhkKBnJlc3VsdBgBIAEoCzIJLlBCUmVzdWx0Eh8KC21pc3Np",
          "b25MaXN0GAIgAygLMgouUEJNaXNzaW9uIiAKC1AyMV9SZXF1ZXN0EhEKCW1p",
          "c3Npb25JZBgBIAIoBSKlAQoMUDIxX1Jlc3BvbnNlEhkKBnJlc3VsdBgBIAEo",
          "CzIJLlBCUmVzdWx0EiAKB2NvbnRlbnQYAyADKAsyDy5Qcm9kdWN0Q29udGVu",
          "dBISCgppc1RyZWFzdXJlGAQgASgIEiQKC3RyZWFDb250ZW50GAUgAygLMg8u",
          "UHJvZHVjdENvbnRlbnQSHgoKbmV3TWlzc2lvbhgGIAEoCzIKLlBCTWlzc2lv",
          "biJLCgxQMjJfUmVzcG9uc2USGQoGcmVzdWx0GAEgASgLMgkuUEJSZXN1bHQS",
          "IAoYYWR2ZXJ0UmV3YXJkUmVtYWluaW5nQ250GAIgASgFIjMKCFBCQWN0aW9u",
          "EhAKCGFjdGlvbklkGAEgAigFEhUKDXRyaWdnZXJOdW1iZXIYAiACKAUilgEK",
          "CVBCTWlzc2lvbhIRCgltaXNzaW9uSWQYASACKAUSGgoEdHlwZRgCIAIoDjIM",
          "Lk1pc3Npb25UeXBlEhAKCGFjdGlvbklkGAMgAigFEg8KB3RyaWdnZXIYBCAC",
          "KAUSEwoLY3VyclRyaWdnZXIYBSACKAUSDgoGcmV3YXJkGAYgASgJEhIKCmlz",
          "Q29tcGxldGUYByACKAgiYwoMUEJSYW5rUmV3YXJkEhEKCXJhbmtCYXRjaBgB",
          "IAIoBRIMCgRyYW5rGAIgAigDEhAKCHJhbmtSYXRlGAMgAigCEiAKB2NvbnRl",
          "bnQYBCADKAsyDy5Qcm9kdWN0Q29udGVudCImCghQQlJlc3VsdBIMCgRjb2Rl",
          "GAEgASgFEgwKBGRlc2MYAiABKAkigwEKFVBCUGxheWVyRmlzaExldmVsSW5m",
          "bxIOCgZmaXNoSWQYASABKAUSEQoJZmlzaExldmVsGAIgASgFEhAKCGZpc2hD",
          "aGlwGAMgASgFEhEKCXJhbmtMZXZlbBgEIAEoBRISCgpjdXJyZW50V2luGAUg",
          "ASgFEg4KBm1heFdpbhgGIAEoBSKlAgoIUEJQbGF5ZXISEAoIcGxheWVySWQY",
          "ASABKAMSEAoIbmlja25hbWUYAiABKAkSEgoKZmFjZUljb25JZBgDIAEoBRIP",
          "CgdyZWdUaW1lGAQgASgDEhEKCWxvZ2luTGFzdBgFIAEoAxIPCgdkaWFtb25k",
          "GAYgASgFEgwKBGdvbGQYByABKAUSDQoFcG93ZXIYCCABKAUSDwoHcG93ZXJB",
          "dBgJIAEoAxIRCglmaWdodEZpc2gYCiABKAUSMQoRYXJ5UGxheWVyRmlzaElu",
          "Zm8YCyADKAsyFi5QQlBsYXllckZpc2hMZXZlbEluZm8SFgoOZ2V0dGVkQm91",
          "bmRzSWQYDCADKAUSIAoYYWR2ZXJ0UmV3YXJkUmVtYWluaW5nQ250GA0gASgF",
          "ImAKD1BCRW5lbXlEYXRhSW5mbxIOCgZmaXNoSWQYASABKAUSEQoJZmlzaExl",
          "dmVsGAIgASgFEhQKDGZpc2hDb3VudE1heBgDIAEoBRIUCgxmaXNoQ291bnRN",
          "aW4YBCABKAUiTgoPUEJSb2JvdERhdGFJbmZvEg4KBmZpc2hJZBgBIAEoBRIM",
          "CgRhaUlkGAIgASgFEg0KBWxldmVsGAMgASgFEg4KBmdyb3d0aBgEIAEoBSLX",
          "AQoSU2hvcEJpbGxpbmdQcm9kdWN0EgoKAmlkGAEgAigFEhkKB3BheVR5cGUY",
          "AiACKA4yCC5QYXlUeXBlEhEKCXByaWNlUmF0ZRgDIAIoAhINCgVwcmljZRgE",
          "IAIoBRIPCgdyZXNJY29uGAUgAigJEicKDnByb2R1Y3RDb250ZW50GAYgAygL",
          "Mg8uUHJvZHVjdENvbnRlbnQSGQoRcGxhdGZvcm1Qcm9kdWN0SWQYByABKAkS",
          "IwoLbGltaXREZXRhaWwYCCABKAsyDi5MaW1pdGVkRGV0YWlsIjMKDlByb2R1",
          "Y3RDb250ZW50Eg4KBmFtb3VudBgBIAIoBRIRCgljb250ZW50SWQYAiACKAUi",
          "aAoNTGltaXRlZERldGFpbBIPCgdiZWdpbkF0GAEgASgEEhEKCXNhbGVFbmRB",
          "dBgCIAEoBBITCgtsaW1pdEFtb3VudBgDIAEoBRIeChZsaW1pdGVkUmVtYWlu",
          "aW5nQW1vdW50GAQgASgFIkIKEEJpbGxpbmdTdGF0ZUluZm8SCwoDYWdlGAEg",
          "ASgFEiEKGWN1cnJlbnRNb250aFB1cmNoYXNlUHJpY2UYAiACKAUiPwoKUmFu",
          "a1BsYXllchIQCghwbGF5ZXJJZBgBIAIoAxIQCghuaWNrbmFtZRgCIAIoCRIN",
          "CgVzY29yZRgDIAIoAypQChNEYXRhTGlua1NlcnZpY2VUeXBlEggKBG5vbmUQ",
          "ABIPCgtnYW1lX2NlbnRlchABEg8KC2dvb2dsZV9wbGF5EAISDQoJYXBwX2xv",
          "dmluEAMqTQoLTWlzc2lvblR5cGUSEQoNTUlTU0lPTl9EQUlMWRAAEhIKDk1J",
          "U1NJT05fV0VFS0xZEAESFwoTTUlTU0lPTl9BQ0hJRVZFTUVOVBACKt4DCglN",
          "ZXNzYWdlSWQSDwoLTUlEX1NUQVJUVVAQABIbChdNSURfTE9HSU5fV0lUSF9Q",
          "TEFURk9STRABEg0KCU1JRF9MT0dJThACEhcKE01JRF9HRVRfUExBWUVSX0lO",
          "Rk8QAxITCg9NSURfU1RBUlRfRklHSFQQBBIRCg1NSURfRU5EX0ZJR0hUEAUS",
          "FgoSTUlEX1NFVF9GSUdIVF9GSVNIEAYSFQoRTUlEX0ZJU0hfTEVWRUxfVVAQ",
          "BxISCg5NSURfQk9VTkRTX0dFVBAIEhMKD01JRF9NT0RJRllfTklDSxAJEhQK",
          "EE1JRF9HRVRfU0hPUElURU0QChISCg5NSURfQlVZX05PUk1BTBALEg8KC01J",
          "RF9QUkVfUEFZEAwSDwoLTUlEX0JVWV9QQVkQDRIZChVNSURfR09MRF9QT09M",
          "X1JFRlJFU0gQDhIVChFNSURfREVCVUdfQklMTElORxAPEhcKE01JRF9SQU5L",
          "X1JFV0FSRF9HRVQQEBIZChVNSURfVVBEQVRFX0dPT0xEX1BPT0wQEhIVChFN",
          "SURfUkFOS19MSVNUX0dFVBATEhgKFE1JRF9NSVNTSU9OX0xJU1RfR0VUEBQS",
          "GAoUTUlEX0NPTVBMRVRFX01JU1NJT04QFSptCgpTdGF0dXNDb2RlEgYKAk9L",
          "EAASCgoGRkFJTEVEEAESEwoPU0lHTkFUVVJFX0VSUk9SEAISFwoTS0lDS19P",
          "VVRfTE9HSU5fVVNFUhADEgsKB0NBVVRJT04QBBIQCgxDTElFTlRfRVJST1IQ",
          "BSokCgpQQlJhbmtUeXBlEgoKBldFRUtMWRAAEgoKBlNFQVNPThABKh4KCFNo",
          "b3BUeXBlEgkKBW90aGVyEAESBwoDcGF5EAIqKwoHUGF5VHlwZRIICgRnb2xk",
          "EAESCwoHZGlhbW9uZBACEgkKBW1vbmV5EAMqQQoLQ29udGVudFR5cGUSDAoI",
          "Y0RpYW1vbmQQARIJCgVjR29sZBACEgoKBmNQaWVjZRADEg0KCWNUcmVhc3Vy",
          "ZRAEKjsKBkRldmljZRIRCg1ub3Rfc3BlY2lmaWVkEAESCQoFYXBwbGUQAhIK",
          "CgZnb29nbGUQAxIHCgNhbGwQBCrgAwoVUHVyY2hhc2VkUmVzcG9uc2VLaW5k",
          "EhoKFnByb2Nlc3NlZF9zdWNjZXNzZnVsbHkQARIVChFhbHJlYWR5X3Byb2Nl",
          "c3NlZBACEgsKB3Vua25vd24QAxIRCg1pbnZhbGlkX3BhcmFtEAoSEwoPaW52",
          "YWxpZF9yZWNlaXB0EAsSIgoeZmFpbGVkX3RvX2Nvbm5lY3RfdG9fYXBwX3N0",
          "b3JlEAwSFgoSaW52YWxpZF9wcm9kdWN0X2lkEA0SFwoTcmVjZWlwdF9vdXRf",
          "b2ZfZGF0ZRAOEiAKHHVuZXhwZWN0ZWRfdmFsaWRhc3Rpb25fZXJyb3IQExIa",
          "ChZjb250ZW50X2RlbGl2ZXJfZmFpbGVkEB4SEwoPcHJvZHVjdF9leHBpcmVk",
          "ECgSGAoUZmFpbHVyZV9wcmVfcHVyY2hhc2UQZRISCg1kZWJ1Z19zdWNjZXNz",
          "EMgBEhIKDWRlYnVnX3Vua25vd24QyQESHAoXZGVidWdfYWxyZWFkeV9wcm9j",
          "ZXNzZWQQygESHAoXZGVidWdfZGVmZXJyZWRfcHVyY2hhc2UQywESIgodZGVi",
          "dWdfZmFpbGVkX2Nvbm5lY3RfcGxhdGZvcm0QzAESFQoQZGVidWdfb2xkX3Jl",
          "Y2lwZRDNAUIwCiBjb20uY2hhby5maXNoLnNlcnZlci5maXNoZ2FtZS5wYkIJ",
          "UEJNZXNzYWdliAEA"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(new[] {typeof(global::DataLinkServiceType), typeof(global::MissionType), typeof(global::MessageId), typeof(global::StatusCode), typeof(global::PBRankType), typeof(global::ShopType), typeof(global::PayType), typeof(global::ContentType), typeof(global::Device), typeof(global::PurchasedResponseKind), }, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::CommonResponse), global::CommonResponse.Parser, new[]{ "Payload", "Signature", "Status", "Ts" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::P0_Request), global::P0_Request.Parser, new[]{ "DeviceId", "DevicePlatform", "DeviceName", "Accesstoken", "ServiceType", "Mask" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::P0_Response), global::P0_Response.Parser, new[]{ "Result", "AuthToken", "AuthKey" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::P1_Request), global::P1_Request.Parser, new[]{ "Accesstoken", "ServiceType", "Mask" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::P1_Response), global::P1_Response.Parser, new[]{ "Result", "AuthToken", "AuthKey" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::P2_Request), global::P2_Request.Parser, new[]{ "AuthToken", "Mask" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::P2_Response), global::P2_Response.Parser, new[]{ "Result", "PlayerId", "SessionKey", "ServerTime", "IsPlatformServiceLinked" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::P3_Response), global::P3_Response.Parser, new[]{ "Result", "Player" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::P4_Response), global::P4_Response.Parser, new[]{ "Result", "BattleId", "AryEnemyDataInfo", "AryRobotDataInfo" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::P5_Request), global::P5_Request.Parser, new[]{ "BattleId", "BattleRanking", "ActionList" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::P5_Response), global::P5_Response.Parser, new[]{ "Result", "GainRankLevel", "GainGold", "GainRankLevelupBonusGold", "FightFish", "ContWinRankAdded", "ContWinGoldAdded", "GoldPoolCurrGold" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::P6_Request), global::P6_Request.Parser, new[]{ "FishId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::P6_Response), global::P6_Response.Parser, new[]{ "Result" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::P7_Request), global::P7_Request.Parser, new[]{ "FishId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::P7_Response), global::P7_Response.Parser, new[]{ "Result", "FishInfo" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::P8_Request), global::P8_Request.Parser, new[]{ "BattleId", "IsDouble" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::P8_Response), global::P8_Response.Parser, new[]{ "Result", "RewardMoney" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::P9_Request), global::P9_Request.Parser, new[]{ "Nick" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::P9_Response), global::P9_Response.Parser, new[]{ "Result" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::P10_Request), global::P10_Request.Parser, new[]{ "ProductType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::P10_Response), global::P10_Response.Parser, new[]{ "Result", "ProductList", "BillingStateInfo" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::P11_Request), global::P11_Request.Parser, new[]{ "ShopItemId", "ShopItemNum" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::P11_Response), global::P11_Response.Parser, new[]{ "Result", "Content", "IsTreasure", "TreaContent" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::P12_Request), global::P12_Request.Parser, new[]{ "PlatformId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::P12_Response), global::P12_Response.Parser, new[]{ "Result", "ResultCode", "Message" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::P13_Request), global::P13_Request.Parser, new[]{ "Receipt", "TransactionId", "Price", "FormattedPrice", "Platform" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::P13_Response), global::P13_Response.Parser, new[]{ "Result", "Content", "ResultCode", "Message" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::P14_Response), global::P14_Response.Parser, new[]{ "Result", "Level", "CurrGold", "CurrTime", "NextAt", "FullAt" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::P15_Request), global::P15_Request.Parser, new[]{ "PlatformId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::P15_Response), global::P15_Response.Parser, new[]{ "Result", "Content", "ResultCode", "Message" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::P16_Request), global::P16_Request.Parser, new[]{ "RankBoundsId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::P16_Response), global::P16_Response.Parser, new[]{ "Result", "GettedBoundsId", "Content", "IsTreasure", "TreaContent" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::P17_Request), global::P17_Request.Parser, new[]{ "PlayerId", "Mask" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::P17_Response), global::P17_Response.Parser, new[]{ "Result", "AuthToken", "AuthKey" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::P18_Response), global::P18_Response.Parser, new[]{ "Result" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::P19_Request), global::P19_Request.Parser, new[]{ "RankType" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::P19_Response), global::P19_Response.Parser, new[]{ "Result", "RankPlayerList", "RankReward", "Type", "RankBatch", "Rank", "RankRate", "BestRank", "BestRankRate" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::P20_Response), global::P20_Response.Parser, new[]{ "Result", "MissionList" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::P21_Request), global::P21_Request.Parser, new[]{ "MissionId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::P21_Response), global::P21_Response.Parser, new[]{ "Result", "Content", "IsTreasure", "TreaContent", "NewMission" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::P22_Response), global::P22_Response.Parser, new[]{ "Result", "AdvertRewardRemainingCnt" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PBAction), global::PBAction.Parser, new[]{ "ActionId", "TriggerNumber" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PBMission), global::PBMission.Parser, new[]{ "MissionId", "Type", "ActionId", "Trigger", "CurrTrigger", "Reward", "IsComplete" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PBRankReward), global::PBRankReward.Parser, new[]{ "RankBatch", "Rank", "RankRate", "Content" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PBResult), global::PBResult.Parser, new[]{ "Code", "Desc" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PBPlayerFishLevelInfo), global::PBPlayerFishLevelInfo.Parser, new[]{ "FishId", "FishLevel", "FishChip", "RankLevel", "CurrentWin", "MaxWin" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PBPlayer), global::PBPlayer.Parser, new[]{ "PlayerId", "Nickname", "FaceIconId", "RegTime", "LoginLast", "Diamond", "Gold", "Power", "PowerAt", "FightFish", "AryPlayerFishInfo", "GettedBoundsId", "AdvertRewardRemainingCnt" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PBEnemyDataInfo), global::PBEnemyDataInfo.Parser, new[]{ "FishId", "FishLevel", "FishCountMax", "FishCountMin" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PBRobotDataInfo), global::PBRobotDataInfo.Parser, new[]{ "FishId", "AiId", "Level", "Growth" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ShopBillingProduct), global::ShopBillingProduct.Parser, new[]{ "Id", "PayType", "PriceRate", "Price", "ResIcon", "ProductContent", "PlatformProductId", "LimitDetail" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProductContent), global::ProductContent.Parser, new[]{ "Amount", "ContentId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LimitedDetail), global::LimitedDetail.Parser, new[]{ "BeginAt", "SaleEndAt", "LimitAmount", "LimitedRemainingAmount" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BillingStateInfo), global::BillingStateInfo.Parser, new[]{ "Age", "CurrentMonthPurchasePrice" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RankPlayer), global::RankPlayer.Parser, new[]{ "PlayerId", "Nickname", "Score" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Enums
public enum DataLinkServiceType {
  [pbr::OriginalName("none")] None = 0,
  [pbr::OriginalName("game_center")] GameCenter = 1,
  [pbr::OriginalName("google_play")] GooglePlay = 2,
  [pbr::OriginalName("app_lovin")] AppLovin = 3,
}

public enum MissionType {
  [pbr::OriginalName("MISSION_DAILY")] MissionDaily = 0,
  [pbr::OriginalName("MISSION_WEEKLY")] MissionWeekly = 1,
  [pbr::OriginalName("MISSION_ACHIEVEMENT")] MissionAchievement = 2,
}

/// <summary>
///消息枚举编号
/// </summary>
public enum MessageId {
  [pbr::OriginalName("MID_STARTUP")] MidStartup = 0,
  [pbr::OriginalName("MID_LOGIN_WITH_PLATFORM")] MidLoginWithPlatform = 1,
  [pbr::OriginalName("MID_LOGIN")] MidLogin = 2,
  [pbr::OriginalName("MID_GET_PLAYER_INFO")] MidGetPlayerInfo = 3,
  [pbr::OriginalName("MID_START_FIGHT")] MidStartFight = 4,
  [pbr::OriginalName("MID_END_FIGHT")] MidEndFight = 5,
  [pbr::OriginalName("MID_SET_FIGHT_FISH")] MidSetFightFish = 6,
  [pbr::OriginalName("MID_FISH_LEVEL_UP")] MidFishLevelUp = 7,
  [pbr::OriginalName("MID_BOUNDS_GET")] MidBoundsGet = 8,
  [pbr::OriginalName("MID_MODIFY_NICK")] MidModifyNick = 9,
  [pbr::OriginalName("MID_GET_SHOPITEM")] MidGetShopitem = 10,
  [pbr::OriginalName("MID_BUY_NORMAL")] MidBuyNormal = 11,
  [pbr::OriginalName("MID_PRE_PAY")] MidPrePay = 12,
  [pbr::OriginalName("MID_BUY_PAY")] MidBuyPay = 13,
  [pbr::OriginalName("MID_GOLD_POOL_REFRESH")] MidGoldPoolRefresh = 14,
  [pbr::OriginalName("MID_DEBUG_BILLING")] MidDebugBilling = 15,
  [pbr::OriginalName("MID_RANK_REWARD_GET")] MidRankRewardGet = 16,
  [pbr::OriginalName("MID_UPDATE_GOOLD_POOL")] MidUpdateGooldPool = 18,
  [pbr::OriginalName("MID_RANK_LIST_GET")] MidRankListGet = 19,
  [pbr::OriginalName("MID_MISSION_LIST_GET")] MidMissionListGet = 20,
  [pbr::OriginalName("MID_COMPLETE_MISSION")] MidCompleteMission = 21,
}

public enum StatusCode {
  [pbr::OriginalName("OK")] Ok = 0,
  [pbr::OriginalName("FAILED")] Failed = 1,
  [pbr::OriginalName("SIGNATURE_ERROR")] SignatureError = 2,
  [pbr::OriginalName("KICK_OUT_LOGIN_USER")] KickOutLoginUser = 3,
  [pbr::OriginalName("CAUTION")] Caution = 4,
  [pbr::OriginalName("CLIENT_ERROR")] ClientError = 5,
}

public enum PBRankType {
  [pbr::OriginalName("WEEKLY")] Weekly = 0,
  [pbr::OriginalName("SEASON")] Season = 1,
}

/// <summary>
///所属商店类型
/// </summary>
public enum ShopType {
  [pbr::OriginalName("other")] Other = 1,
  [pbr::OriginalName("pay")] Pay = 2,
}

public enum PayType {
  [pbr::OriginalName("gold")] Gold = 1,
  [pbr::OriginalName("diamond")] Diamond = 2,
  [pbr::OriginalName("money")] Money = 3,
}

public enum ContentType {
  [pbr::OriginalName("cDiamond")] CDiamond = 1,
  [pbr::OriginalName("cGold")] CGold = 2,
  [pbr::OriginalName("cPiece")] CPiece = 3,
  /// <summary>
  ///宝箱 概率出货
  /// </summary>
  [pbr::OriginalName("cTreasure")] CTreasure = 4,
}

public enum Device {
  [pbr::OriginalName("not_specified")] NotSpecified = 1,
  [pbr::OriginalName("apple")] Apple = 2,
  [pbr::OriginalName("google")] Google = 3,
  [pbr::OriginalName("all")] All = 4,
}

public enum PurchasedResponseKind {
  [pbr::OriginalName("processed_successfully")] ProcessedSuccessfully = 1,
  [pbr::OriginalName("already_processed")] AlreadyProcessed = 2,
  [pbr::OriginalName("unknown")] Unknown = 3,
  [pbr::OriginalName("invalid_param")] InvalidParam = 10,
  [pbr::OriginalName("invalid_receipt")] InvalidReceipt = 11,
  [pbr::OriginalName("failed_to_connect_to_app_store")] FailedToConnectToAppStore = 12,
  [pbr::OriginalName("invalid_product_id")] InvalidProductId = 13,
  [pbr::OriginalName("receipt_out_of_date")] ReceiptOutOfDate = 14,
  [pbr::OriginalName("unexpected_validastion_error")] UnexpectedValidastionError = 19,
  [pbr::OriginalName("content_deliver_failed")] ContentDeliverFailed = 30,
  [pbr::OriginalName("product_expired")] ProductExpired = 40,
  [pbr::OriginalName("failure_pre_purchase")] FailurePrePurchase = 101,
  [pbr::OriginalName("debug_success")] DebugSuccess = 200,
  [pbr::OriginalName("debug_unknown")] DebugUnknown = 201,
  [pbr::OriginalName("debug_already_processed")] DebugAlreadyProcessed = 202,
  [pbr::OriginalName("debug_deferred_purchase")] DebugDeferredPurchase = 203,
  [pbr::OriginalName("debug_failed_connect_platform")] DebugFailedConnectPlatform = 204,
  [pbr::OriginalName("debug_old_recipe")] DebugOldRecipe = 205,
}

#endregion

#region Messages
/// <summary>
///-----------------------------------------------[协议]----------------------------------
///非加密协议(0) ,加密规则(包体加密, 采用3des , key使用握手encryptKey)
/// </summary>
public sealed partial class CommonResponse : pb::IMessage<CommonResponse> {
  private static readonly pb::MessageParser<CommonResponse> _parser = new pb::MessageParser<CommonResponse>(() => new CommonResponse());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CommonResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CommonResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CommonResponse(CommonResponse other) : this() {
    _hasBits0 = other._hasBits0;
    payload_ = other.payload_;
    signature_ = other.signature_;
    status_ = other.status_;
    ts_ = other.ts_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CommonResponse Clone() {
    return new CommonResponse(this);
  }

  /// <summary>Field number for the "payload" field.</summary>
  public const int PayloadFieldNumber = 1;
  private readonly static pb::ByteString PayloadDefaultValue = pb::ByteString.Empty;

  private pb::ByteString payload_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Payload {
    get { return payload_ ?? PayloadDefaultValue; }
    set {
      payload_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "payload" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayload {
    get { return payload_ != null; }
  }
  /// <summary>Clears the value of the "payload" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayload() {
    payload_ = null;
  }

  /// <summary>Field number for the "signature" field.</summary>
  public const int SignatureFieldNumber = 2;
  private readonly static string SignatureDefaultValue = "";

  private string signature_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Signature {
    get { return signature_ ?? SignatureDefaultValue; }
    set {
      signature_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "signature" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSignature {
    get { return signature_ != null; }
  }
  /// <summary>Clears the value of the "signature" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSignature() {
    signature_ = null;
  }

  /// <summary>Field number for the "status" field.</summary>
  public const int StatusFieldNumber = 3;
  private readonly static global::StatusCode StatusDefaultValue = global::StatusCode.Ok;

  private global::StatusCode status_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusCode Status {
    get { if ((_hasBits0 & 1) != 0) { return status_; } else { return StatusDefaultValue; } }
    set {
      _hasBits0 |= 1;
      status_ = value;
    }
  }
  /// <summary>Gets whether the "status" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasStatus {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "status" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearStatus() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "ts" field.</summary>
  public const int TsFieldNumber = 4;
  private readonly static long TsDefaultValue = 0L;

  private long ts_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Ts {
    get { if ((_hasBits0 & 2) != 0) { return ts_; } else { return TsDefaultValue; } }
    set {
      _hasBits0 |= 2;
      ts_ = value;
    }
  }
  /// <summary>Gets whether the "ts" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasTs {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "ts" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearTs() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CommonResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CommonResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Payload != other.Payload) return false;
    if (Signature != other.Signature) return false;
    if (Status != other.Status) return false;
    if (Ts != other.Ts) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPayload) hash ^= Payload.GetHashCode();
    if (HasSignature) hash ^= Signature.GetHashCode();
    if (HasStatus) hash ^= Status.GetHashCode();
    if (HasTs) hash ^= Ts.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPayload) {
      output.WriteRawTag(10);
      output.WriteBytes(Payload);
    }
    if (HasSignature) {
      output.WriteRawTag(18);
      output.WriteString(Signature);
    }
    if (HasStatus) {
      output.WriteRawTag(24);
      output.WriteEnum((int) Status);
    }
    if (HasTs) {
      output.WriteRawTag(32);
      output.WriteInt64(Ts);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPayload) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Payload);
    }
    if (HasSignature) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Signature);
    }
    if (HasStatus) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Status);
    }
    if (HasTs) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Ts);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CommonResponse other) {
    if (other == null) {
      return;
    }
    if (other.HasPayload) {
      Payload = other.Payload;
    }
    if (other.HasSignature) {
      Signature = other.Signature;
    }
    if (other.HasStatus) {
      Status = other.Status;
    }
    if (other.HasTs) {
      Ts = other.Ts;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Payload = input.ReadBytes();
          break;
        }
        case 18: {
          Signature = input.ReadString();
          break;
        }
        case 24: {
          Status = (global::StatusCode) input.ReadEnum();
          break;
        }
        case 32: {
          Ts = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
///startup 注册
/// </summary>
public sealed partial class P0_Request : pb::IMessage<P0_Request> {
  private static readonly pb::MessageParser<P0_Request> _parser = new pb::MessageParser<P0_Request>(() => new P0_Request());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<P0_Request> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P0_Request() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P0_Request(P0_Request other) : this() {
    _hasBits0 = other._hasBits0;
    deviceId_ = other.deviceId_;
    devicePlatform_ = other.devicePlatform_;
    deviceName_ = other.deviceName_;
    accesstoken_ = other.accesstoken_;
    serviceType_ = other.serviceType_;
    mask_ = other.mask_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P0_Request Clone() {
    return new P0_Request(this);
  }

  /// <summary>Field number for the "deviceId" field.</summary>
  public const int DeviceIdFieldNumber = 1;
  private readonly static string DeviceIdDefaultValue = "";

  private string deviceId_;
  /// <summary>
  ///设备唯一标识ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceId {
    get { return deviceId_ ?? DeviceIdDefaultValue; }
    set {
      deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "deviceId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDeviceId {
    get { return deviceId_ != null; }
  }
  /// <summary>Clears the value of the "deviceId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDeviceId() {
    deviceId_ = null;
  }

  /// <summary>Field number for the "devicePlatform" field.</summary>
  public const int DevicePlatformFieldNumber = 2;
  private readonly static string DevicePlatformDefaultValue = "";

  private string devicePlatform_;
  /// <summary>
  ///设备平台
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DevicePlatform {
    get { return devicePlatform_ ?? DevicePlatformDefaultValue; }
    set {
      devicePlatform_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "devicePlatform" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDevicePlatform {
    get { return devicePlatform_ != null; }
  }
  /// <summary>Clears the value of the "devicePlatform" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDevicePlatform() {
    devicePlatform_ = null;
  }

  /// <summary>Field number for the "deviceName" field.</summary>
  public const int DeviceNameFieldNumber = 3;
  private readonly static string DeviceNameDefaultValue = "";

  private string deviceName_;
  /// <summary>
  ///设备名
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceName {
    get { return deviceName_ ?? DeviceNameDefaultValue; }
    set {
      deviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "deviceName" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDeviceName {
    get { return deviceName_ != null; }
  }
  /// <summary>Clears the value of the "deviceName" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDeviceName() {
    deviceName_ = null;
  }

  /// <summary>Field number for the "accesstoken" field.</summary>
  public const int AccesstokenFieldNumber = 4;
  private readonly static string AccesstokenDefaultValue = "";

  private string accesstoken_;
  /// <summary>
  ///googleplay game center token
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Accesstoken {
    get { return accesstoken_ ?? AccesstokenDefaultValue; }
    set {
      accesstoken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "accesstoken" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAccesstoken {
    get { return accesstoken_ != null; }
  }
  /// <summary>Clears the value of the "accesstoken" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAccesstoken() {
    accesstoken_ = null;
  }

  /// <summary>Field number for the "serviceType" field.</summary>
  public const int ServiceTypeFieldNumber = 5;
  private readonly static global::DataLinkServiceType ServiceTypeDefaultValue = global::DataLinkServiceType.None;

  private global::DataLinkServiceType serviceType_;
  /// <summary>
  ///平台类型
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DataLinkServiceType ServiceType {
    get { if ((_hasBits0 & 1) != 0) { return serviceType_; } else { return ServiceTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      serviceType_ = value;
    }
  }
  /// <summary>Gets whether the "serviceType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasServiceType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "serviceType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearServiceType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "mask" field.</summary>
  public const int MaskFieldNumber = 6;
  private readonly static string MaskDefaultValue = "";

  private string mask_;
  /// <summary>
  ///客户端randomkey
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Mask {
    get { return mask_ ?? MaskDefaultValue; }
    set {
      mask_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "mask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMask {
    get { return mask_ != null; }
  }
  /// <summary>Clears the value of the "mask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMask() {
    mask_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as P0_Request);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(P0_Request other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DeviceId != other.DeviceId) return false;
    if (DevicePlatform != other.DevicePlatform) return false;
    if (DeviceName != other.DeviceName) return false;
    if (Accesstoken != other.Accesstoken) return false;
    if (ServiceType != other.ServiceType) return false;
    if (Mask != other.Mask) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasDeviceId) hash ^= DeviceId.GetHashCode();
    if (HasDevicePlatform) hash ^= DevicePlatform.GetHashCode();
    if (HasDeviceName) hash ^= DeviceName.GetHashCode();
    if (HasAccesstoken) hash ^= Accesstoken.GetHashCode();
    if (HasServiceType) hash ^= ServiceType.GetHashCode();
    if (HasMask) hash ^= Mask.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasDeviceId) {
      output.WriteRawTag(10);
      output.WriteString(DeviceId);
    }
    if (HasDevicePlatform) {
      output.WriteRawTag(18);
      output.WriteString(DevicePlatform);
    }
    if (HasDeviceName) {
      output.WriteRawTag(26);
      output.WriteString(DeviceName);
    }
    if (HasAccesstoken) {
      output.WriteRawTag(34);
      output.WriteString(Accesstoken);
    }
    if (HasServiceType) {
      output.WriteRawTag(40);
      output.WriteEnum((int) ServiceType);
    }
    if (HasMask) {
      output.WriteRawTag(50);
      output.WriteString(Mask);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasDeviceId) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
    }
    if (HasDevicePlatform) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DevicePlatform);
    }
    if (HasDeviceName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceName);
    }
    if (HasAccesstoken) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Accesstoken);
    }
    if (HasServiceType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ServiceType);
    }
    if (HasMask) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Mask);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(P0_Request other) {
    if (other == null) {
      return;
    }
    if (other.HasDeviceId) {
      DeviceId = other.DeviceId;
    }
    if (other.HasDevicePlatform) {
      DevicePlatform = other.DevicePlatform;
    }
    if (other.HasDeviceName) {
      DeviceName = other.DeviceName;
    }
    if (other.HasAccesstoken) {
      Accesstoken = other.Accesstoken;
    }
    if (other.HasServiceType) {
      ServiceType = other.ServiceType;
    }
    if (other.HasMask) {
      Mask = other.Mask;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          DeviceId = input.ReadString();
          break;
        }
        case 18: {
          DevicePlatform = input.ReadString();
          break;
        }
        case 26: {
          DeviceName = input.ReadString();
          break;
        }
        case 34: {
          Accesstoken = input.ReadString();
          break;
        }
        case 40: {
          ServiceType = (global::DataLinkServiceType) input.ReadEnum();
          break;
        }
        case 50: {
          Mask = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class P0_Response : pb::IMessage<P0_Response> {
  private static readonly pb::MessageParser<P0_Response> _parser = new pb::MessageParser<P0_Response>(() => new P0_Response());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<P0_Response> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P0_Response() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P0_Response(P0_Response other) : this() {
    result_ = other.result_ != null ? other.result_.Clone() : null;
    authToken_ = other.authToken_;
    authKey_ = other.authKey_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P0_Response Clone() {
    return new P0_Response(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private global::PBResult result_;
  /// <summary>
  ///0成功,其他失败
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PBResult Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "authToken" field.</summary>
  public const int AuthTokenFieldNumber = 2;
  private readonly static string AuthTokenDefaultValue = "";

  private string authToken_;
  /// <summary>
  ///玩家authtoken令牌
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string AuthToken {
    get { return authToken_ ?? AuthTokenDefaultValue; }
    set {
      authToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "authToken" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAuthToken {
    get { return authToken_ != null; }
  }
  /// <summary>Clears the value of the "authToken" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAuthToken() {
    authToken_ = null;
  }

  /// <summary>Field number for the "authKey" field.</summary>
  public const int AuthKeyFieldNumber = 3;
  private readonly static string AuthKeyDefaultValue = "";

  private string authKey_;
  /// <summary>
  ///交换密钥 给login使用
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string AuthKey {
    get { return authKey_ ?? AuthKeyDefaultValue; }
    set {
      authKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "authKey" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAuthKey {
    get { return authKey_ != null; }
  }
  /// <summary>Clears the value of the "authKey" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAuthKey() {
    authKey_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as P0_Response);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(P0_Response other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Result, other.Result)) return false;
    if (AuthToken != other.AuthToken) return false;
    if (AuthKey != other.AuthKey) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (result_ != null) hash ^= Result.GetHashCode();
    if (HasAuthToken) hash ^= AuthToken.GetHashCode();
    if (HasAuthKey) hash ^= AuthKey.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (result_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Result);
    }
    if (HasAuthToken) {
      output.WriteRawTag(18);
      output.WriteString(AuthToken);
    }
    if (HasAuthKey) {
      output.WriteRawTag(26);
      output.WriteString(AuthKey);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (result_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
    }
    if (HasAuthToken) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthToken);
    }
    if (HasAuthKey) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthKey);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(P0_Response other) {
    if (other == null) {
      return;
    }
    if (other.result_ != null) {
      if (result_ == null) {
        Result = new global::PBResult();
      }
      Result.MergeFrom(other.Result);
    }
    if (other.HasAuthToken) {
      AuthToken = other.AuthToken;
    }
    if (other.HasAuthKey) {
      AuthKey = other.AuthKey;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (result_ == null) {
            Result = new global::PBResult();
          }
          input.ReadMessage(Result);
          break;
        }
        case 18: {
          AuthToken = input.ReadString();
          break;
        }
        case 26: {
          AuthKey = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
///第三方登录 or 恢复
/// </summary>
public sealed partial class P1_Request : pb::IMessage<P1_Request> {
  private static readonly pb::MessageParser<P1_Request> _parser = new pb::MessageParser<P1_Request>(() => new P1_Request());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<P1_Request> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P1_Request() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P1_Request(P1_Request other) : this() {
    _hasBits0 = other._hasBits0;
    accesstoken_ = other.accesstoken_;
    serviceType_ = other.serviceType_;
    mask_ = other.mask_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P1_Request Clone() {
    return new P1_Request(this);
  }

  /// <summary>Field number for the "accesstoken" field.</summary>
  public const int AccesstokenFieldNumber = 1;
  private readonly static string AccesstokenDefaultValue = "";

  private string accesstoken_;
  /// <summary>
  ///googleplay game center token
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Accesstoken {
    get { return accesstoken_ ?? AccesstokenDefaultValue; }
    set {
      accesstoken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "accesstoken" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAccesstoken {
    get { return accesstoken_ != null; }
  }
  /// <summary>Clears the value of the "accesstoken" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAccesstoken() {
    accesstoken_ = null;
  }

  /// <summary>Field number for the "serviceType" field.</summary>
  public const int ServiceTypeFieldNumber = 2;
  private readonly static global::DataLinkServiceType ServiceTypeDefaultValue = global::DataLinkServiceType.None;

  private global::DataLinkServiceType serviceType_;
  /// <summary>
  ///平台类型
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DataLinkServiceType ServiceType {
    get { if ((_hasBits0 & 1) != 0) { return serviceType_; } else { return ServiceTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      serviceType_ = value;
    }
  }
  /// <summary>Gets whether the "serviceType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasServiceType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "serviceType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearServiceType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "mask" field.</summary>
  public const int MaskFieldNumber = 3;
  private readonly static string MaskDefaultValue = "";

  private string mask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Mask {
    get { return mask_ ?? MaskDefaultValue; }
    set {
      mask_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "mask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMask {
    get { return mask_ != null; }
  }
  /// <summary>Clears the value of the "mask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMask() {
    mask_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as P1_Request);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(P1_Request other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Accesstoken != other.Accesstoken) return false;
    if (ServiceType != other.ServiceType) return false;
    if (Mask != other.Mask) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasAccesstoken) hash ^= Accesstoken.GetHashCode();
    if (HasServiceType) hash ^= ServiceType.GetHashCode();
    if (HasMask) hash ^= Mask.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasAccesstoken) {
      output.WriteRawTag(10);
      output.WriteString(Accesstoken);
    }
    if (HasServiceType) {
      output.WriteRawTag(16);
      output.WriteEnum((int) ServiceType);
    }
    if (HasMask) {
      output.WriteRawTag(26);
      output.WriteString(Mask);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasAccesstoken) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Accesstoken);
    }
    if (HasServiceType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ServiceType);
    }
    if (HasMask) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Mask);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(P1_Request other) {
    if (other == null) {
      return;
    }
    if (other.HasAccesstoken) {
      Accesstoken = other.Accesstoken;
    }
    if (other.HasServiceType) {
      ServiceType = other.ServiceType;
    }
    if (other.HasMask) {
      Mask = other.Mask;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Accesstoken = input.ReadString();
          break;
        }
        case 16: {
          ServiceType = (global::DataLinkServiceType) input.ReadEnum();
          break;
        }
        case 26: {
          Mask = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class P1_Response : pb::IMessage<P1_Response> {
  private static readonly pb::MessageParser<P1_Response> _parser = new pb::MessageParser<P1_Response>(() => new P1_Response());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<P1_Response> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P1_Response() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P1_Response(P1_Response other) : this() {
    result_ = other.result_ != null ? other.result_.Clone() : null;
    authToken_ = other.authToken_;
    authKey_ = other.authKey_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P1_Response Clone() {
    return new P1_Response(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private global::PBResult result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PBResult Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "authToken" field.</summary>
  public const int AuthTokenFieldNumber = 2;
  private readonly static string AuthTokenDefaultValue = "";

  private string authToken_;
  /// <summary>
  ///玩家authtoken令牌
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string AuthToken {
    get { return authToken_ ?? AuthTokenDefaultValue; }
    set {
      authToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "authToken" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAuthToken {
    get { return authToken_ != null; }
  }
  /// <summary>Clears the value of the "authToken" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAuthToken() {
    authToken_ = null;
  }

  /// <summary>Field number for the "authKey" field.</summary>
  public const int AuthKeyFieldNumber = 3;
  private readonly static string AuthKeyDefaultValue = "";

  private string authKey_;
  /// <summary>
  ///交换密钥 给login使用
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string AuthKey {
    get { return authKey_ ?? AuthKeyDefaultValue; }
    set {
      authKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "authKey" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAuthKey {
    get { return authKey_ != null; }
  }
  /// <summary>Clears the value of the "authKey" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAuthKey() {
    authKey_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as P1_Response);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(P1_Response other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Result, other.Result)) return false;
    if (AuthToken != other.AuthToken) return false;
    if (AuthKey != other.AuthKey) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (result_ != null) hash ^= Result.GetHashCode();
    if (HasAuthToken) hash ^= AuthToken.GetHashCode();
    if (HasAuthKey) hash ^= AuthKey.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (result_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Result);
    }
    if (HasAuthToken) {
      output.WriteRawTag(18);
      output.WriteString(AuthToken);
    }
    if (HasAuthKey) {
      output.WriteRawTag(26);
      output.WriteString(AuthKey);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (result_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
    }
    if (HasAuthToken) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthToken);
    }
    if (HasAuthKey) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthKey);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(P1_Response other) {
    if (other == null) {
      return;
    }
    if (other.result_ != null) {
      if (result_ == null) {
        Result = new global::PBResult();
      }
      Result.MergeFrom(other.Result);
    }
    if (other.HasAuthToken) {
      AuthToken = other.AuthToken;
    }
    if (other.HasAuthKey) {
      AuthKey = other.AuthKey;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (result_ == null) {
            Result = new global::PBResult();
          }
          input.ReadMessage(Result);
          break;
        }
        case 18: {
          AuthToken = input.ReadString();
          break;
        }
        case 26: {
          AuthKey = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
///登录
/// </summary>
public sealed partial class P2_Request : pb::IMessage<P2_Request> {
  private static readonly pb::MessageParser<P2_Request> _parser = new pb::MessageParser<P2_Request>(() => new P2_Request());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<P2_Request> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P2_Request() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P2_Request(P2_Request other) : this() {
    authToken_ = other.authToken_;
    mask_ = other.mask_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P2_Request Clone() {
    return new P2_Request(this);
  }

  /// <summary>Field number for the "authToken" field.</summary>
  public const int AuthTokenFieldNumber = 1;
  private readonly static string AuthTokenDefaultValue = "";

  private string authToken_;
  /// <summary>
  ///玩家令牌
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string AuthToken {
    get { return authToken_ ?? AuthTokenDefaultValue; }
    set {
      authToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "authToken" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAuthToken {
    get { return authToken_ != null; }
  }
  /// <summary>Clears the value of the "authToken" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAuthToken() {
    authToken_ = null;
  }

  /// <summary>Field number for the "mask" field.</summary>
  public const int MaskFieldNumber = 2;
  private readonly static string MaskDefaultValue = "";

  private string mask_;
  /// <summary>
  ///客户端资源验签
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Mask {
    get { return mask_ ?? MaskDefaultValue; }
    set {
      mask_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "mask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMask {
    get { return mask_ != null; }
  }
  /// <summary>Clears the value of the "mask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMask() {
    mask_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as P2_Request);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(P2_Request other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AuthToken != other.AuthToken) return false;
    if (Mask != other.Mask) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasAuthToken) hash ^= AuthToken.GetHashCode();
    if (HasMask) hash ^= Mask.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasAuthToken) {
      output.WriteRawTag(10);
      output.WriteString(AuthToken);
    }
    if (HasMask) {
      output.WriteRawTag(18);
      output.WriteString(Mask);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasAuthToken) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthToken);
    }
    if (HasMask) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Mask);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(P2_Request other) {
    if (other == null) {
      return;
    }
    if (other.HasAuthToken) {
      AuthToken = other.AuthToken;
    }
    if (other.HasMask) {
      Mask = other.Mask;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          AuthToken = input.ReadString();
          break;
        }
        case 18: {
          Mask = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class P2_Response : pb::IMessage<P2_Response> {
  private static readonly pb::MessageParser<P2_Response> _parser = new pb::MessageParser<P2_Response>(() => new P2_Response());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<P2_Response> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P2_Response() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P2_Response(P2_Response other) : this() {
    _hasBits0 = other._hasBits0;
    result_ = other.result_ != null ? other.result_.Clone() : null;
    playerId_ = other.playerId_;
    sessionKey_ = other.sessionKey_;
    serverTime_ = other.serverTime_;
    isPlatformServiceLinked_ = other.isPlatformServiceLinked_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P2_Response Clone() {
    return new P2_Response(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private global::PBResult result_;
  /// <summary>
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PBResult Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "playerId" field.</summary>
  public const int PlayerIdFieldNumber = 2;
  private readonly static long PlayerIdDefaultValue = 0L;

  private long playerId_;
  /// <summary>
  ///玩家ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PlayerId {
    get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      playerId_ = value;
    }
  }
  /// <summary>Gets whether the "playerId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPlayerId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "playerId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPlayerId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "session_key" field.</summary>
  public const int SessionKeyFieldNumber = 3;
  private readonly static string SessionKeyDefaultValue = "";

  private string sessionKey_;
  /// <summary>
  ///后续加密用密钥
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionKey {
    get { return sessionKey_ ?? SessionKeyDefaultValue; }
    set {
      sessionKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "session_key" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSessionKey {
    get { return sessionKey_ != null; }
  }
  /// <summary>Clears the value of the "session_key" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSessionKey() {
    sessionKey_ = null;
  }

  /// <summary>Field number for the "serverTime" field.</summary>
  public const int ServerTimeFieldNumber = 4;
  private readonly static long ServerTimeDefaultValue = 0L;

  private long serverTime_;
  /// <summary>
  ///服务器时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long ServerTime {
    get { if ((_hasBits0 & 2) != 0) { return serverTime_; } else { return ServerTimeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      serverTime_ = value;
    }
  }
  /// <summary>Gets whether the "serverTime" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasServerTime {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "serverTime" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearServerTime() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "isPlatformServiceLinked" field.</summary>
  public const int IsPlatformServiceLinkedFieldNumber = 5;
  private readonly static bool IsPlatformServiceLinkedDefaultValue = false;

  private bool isPlatformServiceLinked_;
  /// <summary>
  ///是否关联 gs or gc
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsPlatformServiceLinked {
    get { if ((_hasBits0 & 4) != 0) { return isPlatformServiceLinked_; } else { return IsPlatformServiceLinkedDefaultValue; } }
    set {
      _hasBits0 |= 4;
      isPlatformServiceLinked_ = value;
    }
  }
  /// <summary>Gets whether the "isPlatformServiceLinked" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasIsPlatformServiceLinked {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "isPlatformServiceLinked" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIsPlatformServiceLinked() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as P2_Response);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(P2_Response other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Result, other.Result)) return false;
    if (PlayerId != other.PlayerId) return false;
    if (SessionKey != other.SessionKey) return false;
    if (ServerTime != other.ServerTime) return false;
    if (IsPlatformServiceLinked != other.IsPlatformServiceLinked) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (result_ != null) hash ^= Result.GetHashCode();
    if (HasPlayerId) hash ^= PlayerId.GetHashCode();
    if (HasSessionKey) hash ^= SessionKey.GetHashCode();
    if (HasServerTime) hash ^= ServerTime.GetHashCode();
    if (HasIsPlatformServiceLinked) hash ^= IsPlatformServiceLinked.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (result_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Result);
    }
    if (HasPlayerId) {
      output.WriteRawTag(16);
      output.WriteInt64(PlayerId);
    }
    if (HasSessionKey) {
      output.WriteRawTag(26);
      output.WriteString(SessionKey);
    }
    if (HasServerTime) {
      output.WriteRawTag(32);
      output.WriteInt64(ServerTime);
    }
    if (HasIsPlatformServiceLinked) {
      output.WriteRawTag(40);
      output.WriteBool(IsPlatformServiceLinked);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (result_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
    }
    if (HasPlayerId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
    }
    if (HasSessionKey) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionKey);
    }
    if (HasServerTime) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ServerTime);
    }
    if (HasIsPlatformServiceLinked) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(P2_Response other) {
    if (other == null) {
      return;
    }
    if (other.result_ != null) {
      if (result_ == null) {
        Result = new global::PBResult();
      }
      Result.MergeFrom(other.Result);
    }
    if (other.HasPlayerId) {
      PlayerId = other.PlayerId;
    }
    if (other.HasSessionKey) {
      SessionKey = other.SessionKey;
    }
    if (other.HasServerTime) {
      ServerTime = other.ServerTime;
    }
    if (other.HasIsPlatformServiceLinked) {
      IsPlatformServiceLinked = other.IsPlatformServiceLinked;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (result_ == null) {
            Result = new global::PBResult();
          }
          input.ReadMessage(Result);
          break;
        }
        case 16: {
          PlayerId = input.ReadInt64();
          break;
        }
        case 26: {
          SessionKey = input.ReadString();
          break;
        }
        case 32: {
          ServerTime = input.ReadInt64();
          break;
        }
        case 40: {
          IsPlatformServiceLinked = input.ReadBool();
          break;
        }
      }
    }
  }

}

/// <summary>
///获取玩家信息
/// </summary>
public sealed partial class P3_Response : pb::IMessage<P3_Response> {
  private static readonly pb::MessageParser<P3_Response> _parser = new pb::MessageParser<P3_Response>(() => new P3_Response());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<P3_Response> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P3_Response() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P3_Response(P3_Response other) : this() {
    result_ = other.result_ != null ? other.result_.Clone() : null;
    player_ = other.player_ != null ? other.player_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P3_Response Clone() {
    return new P3_Response(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private global::PBResult result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PBResult Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "player" field.</summary>
  public const int PlayerFieldNumber = 2;
  private global::PBPlayer player_;
  /// <summary>
  ///玩家信息
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PBPlayer Player {
    get { return player_; }
    set {
      player_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as P3_Response);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(P3_Response other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Result, other.Result)) return false;
    if (!object.Equals(Player, other.Player)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (result_ != null) hash ^= Result.GetHashCode();
    if (player_ != null) hash ^= Player.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (result_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Result);
    }
    if (player_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Player);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (result_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
    }
    if (player_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Player);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(P3_Response other) {
    if (other == null) {
      return;
    }
    if (other.result_ != null) {
      if (result_ == null) {
        Result = new global::PBResult();
      }
      Result.MergeFrom(other.Result);
    }
    if (other.player_ != null) {
      if (player_ == null) {
        Player = new global::PBPlayer();
      }
      Player.MergeFrom(other.Player);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (result_ == null) {
            Result = new global::PBResult();
          }
          input.ReadMessage(Result);
          break;
        }
        case 18: {
          if (player_ == null) {
            Player = new global::PBPlayer();
          }
          input.ReadMessage(Player);
          break;
        }
      }
    }
  }

}

public sealed partial class P4_Response : pb::IMessage<P4_Response> {
  private static readonly pb::MessageParser<P4_Response> _parser = new pb::MessageParser<P4_Response>(() => new P4_Response());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<P4_Response> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P4_Response() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P4_Response(P4_Response other) : this() {
    result_ = other.result_ != null ? other.result_.Clone() : null;
    battleId_ = other.battleId_;
    aryEnemyDataInfo_ = other.aryEnemyDataInfo_.Clone();
    aryRobotDataInfo_ = other.aryRobotDataInfo_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P4_Response Clone() {
    return new P4_Response(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private global::PBResult result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PBResult Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "battleId" field.</summary>
  public const int BattleIdFieldNumber = 2;
  private readonly static string BattleIdDefaultValue = "";

  private string battleId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string BattleId {
    get { return battleId_ ?? BattleIdDefaultValue; }
    set {
      battleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "battleId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasBattleId {
    get { return battleId_ != null; }
  }
  /// <summary>Clears the value of the "battleId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearBattleId() {
    battleId_ = null;
  }

  /// <summary>Field number for the "aryEnemyDataInfo" field.</summary>
  public const int AryEnemyDataInfoFieldNumber = 3;
  private static readonly pb::FieldCodec<global::PBEnemyDataInfo> _repeated_aryEnemyDataInfo_codec
      = pb::FieldCodec.ForMessage(26, global::PBEnemyDataInfo.Parser);
  private readonly pbc::RepeatedField<global::PBEnemyDataInfo> aryEnemyDataInfo_ = new pbc::RepeatedField<global::PBEnemyDataInfo>();
  /// <summary>
  /// 杂鱼信息，今后可能会根据段位而变化
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PBEnemyDataInfo> AryEnemyDataInfo {
    get { return aryEnemyDataInfo_; }
  }

  /// <summary>Field number for the "aryRobotDataInfo" field.</summary>
  public const int AryRobotDataInfoFieldNumber = 4;
  private static readonly pb::FieldCodec<global::PBRobotDataInfo> _repeated_aryRobotDataInfo_codec
      = pb::FieldCodec.ForMessage(34, global::PBRobotDataInfo.Parser);
  private readonly pbc::RepeatedField<global::PBRobotDataInfo> aryRobotDataInfo_ = new pbc::RepeatedField<global::PBRobotDataInfo>();
  /// <summary>
  /// 机器人，Boss信息
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PBRobotDataInfo> AryRobotDataInfo {
    get { return aryRobotDataInfo_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as P4_Response);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(P4_Response other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Result, other.Result)) return false;
    if (BattleId != other.BattleId) return false;
    if(!aryEnemyDataInfo_.Equals(other.aryEnemyDataInfo_)) return false;
    if(!aryRobotDataInfo_.Equals(other.aryRobotDataInfo_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (result_ != null) hash ^= Result.GetHashCode();
    if (HasBattleId) hash ^= BattleId.GetHashCode();
    hash ^= aryEnemyDataInfo_.GetHashCode();
    hash ^= aryRobotDataInfo_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (result_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Result);
    }
    if (HasBattleId) {
      output.WriteRawTag(18);
      output.WriteString(BattleId);
    }
    aryEnemyDataInfo_.WriteTo(output, _repeated_aryEnemyDataInfo_codec);
    aryRobotDataInfo_.WriteTo(output, _repeated_aryRobotDataInfo_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (result_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
    }
    if (HasBattleId) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(BattleId);
    }
    size += aryEnemyDataInfo_.CalculateSize(_repeated_aryEnemyDataInfo_codec);
    size += aryRobotDataInfo_.CalculateSize(_repeated_aryRobotDataInfo_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(P4_Response other) {
    if (other == null) {
      return;
    }
    if (other.result_ != null) {
      if (result_ == null) {
        Result = new global::PBResult();
      }
      Result.MergeFrom(other.Result);
    }
    if (other.HasBattleId) {
      BattleId = other.BattleId;
    }
    aryEnemyDataInfo_.Add(other.aryEnemyDataInfo_);
    aryRobotDataInfo_.Add(other.aryRobotDataInfo_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (result_ == null) {
            Result = new global::PBResult();
          }
          input.ReadMessage(Result);
          break;
        }
        case 18: {
          BattleId = input.ReadString();
          break;
        }
        case 26: {
          aryEnemyDataInfo_.AddEntriesFrom(input, _repeated_aryEnemyDataInfo_codec);
          break;
        }
        case 34: {
          aryRobotDataInfo_.AddEntriesFrom(input, _repeated_aryRobotDataInfo_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///战斗结算
/// </summary>
public sealed partial class P5_Request : pb::IMessage<P5_Request> {
  private static readonly pb::MessageParser<P5_Request> _parser = new pb::MessageParser<P5_Request>(() => new P5_Request());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<P5_Request> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P5_Request() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P5_Request(P5_Request other) : this() {
    _hasBits0 = other._hasBits0;
    battleId_ = other.battleId_;
    battleRanking_ = other.battleRanking_;
    actionList_ = other.actionList_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P5_Request Clone() {
    return new P5_Request(this);
  }

  /// <summary>Field number for the "battleId" field.</summary>
  public const int BattleIdFieldNumber = 1;
  private readonly static string BattleIdDefaultValue = "";

  private string battleId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string BattleId {
    get { return battleId_ ?? BattleIdDefaultValue; }
    set {
      battleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "battleId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasBattleId {
    get { return battleId_ != null; }
  }
  /// <summary>Clears the value of the "battleId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearBattleId() {
    battleId_ = null;
  }

  /// <summary>Field number for the "battleRanking" field.</summary>
  public const int BattleRankingFieldNumber = 2;
  private readonly static int BattleRankingDefaultValue = 0;

  private int battleRanking_;
  /// <summary>
  /// 排名,1~10
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BattleRanking {
    get { if ((_hasBits0 & 1) != 0) { return battleRanking_; } else { return BattleRankingDefaultValue; } }
    set {
      _hasBits0 |= 1;
      battleRanking_ = value;
    }
  }
  /// <summary>Gets whether the "battleRanking" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasBattleRanking {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "battleRanking" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearBattleRanking() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "actionList" field.</summary>
  public const int ActionListFieldNumber = 3;
  private static readonly pb::FieldCodec<global::PBAction> _repeated_actionList_codec
      = pb::FieldCodec.ForMessage(26, global::PBAction.Parser);
  private readonly pbc::RepeatedField<global::PBAction> actionList_ = new pbc::RepeatedField<global::PBAction>();
  /// <summary>
  /// action 列表
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PBAction> ActionList {
    get { return actionList_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as P5_Request);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(P5_Request other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (BattleId != other.BattleId) return false;
    if (BattleRanking != other.BattleRanking) return false;
    if(!actionList_.Equals(other.actionList_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasBattleId) hash ^= BattleId.GetHashCode();
    if (HasBattleRanking) hash ^= BattleRanking.GetHashCode();
    hash ^= actionList_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasBattleId) {
      output.WriteRawTag(10);
      output.WriteString(BattleId);
    }
    if (HasBattleRanking) {
      output.WriteRawTag(16);
      output.WriteInt32(BattleRanking);
    }
    actionList_.WriteTo(output, _repeated_actionList_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasBattleId) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(BattleId);
    }
    if (HasBattleRanking) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattleRanking);
    }
    size += actionList_.CalculateSize(_repeated_actionList_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(P5_Request other) {
    if (other == null) {
      return;
    }
    if (other.HasBattleId) {
      BattleId = other.BattleId;
    }
    if (other.HasBattleRanking) {
      BattleRanking = other.BattleRanking;
    }
    actionList_.Add(other.actionList_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          BattleId = input.ReadString();
          break;
        }
        case 16: {
          BattleRanking = input.ReadInt32();
          break;
        }
        case 26: {
          actionList_.AddEntriesFrom(input, _repeated_actionList_codec);
          break;
        }
      }
    }
  }

}

public sealed partial class P5_Response : pb::IMessage<P5_Response> {
  private static readonly pb::MessageParser<P5_Response> _parser = new pb::MessageParser<P5_Response>(() => new P5_Response());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<P5_Response> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P5_Response() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P5_Response(P5_Response other) : this() {
    _hasBits0 = other._hasBits0;
    result_ = other.result_ != null ? other.result_.Clone() : null;
    gainRankLevel_ = other.gainRankLevel_;
    gainGold_ = other.gainGold_;
    gainRankLevelupBonusGold_ = other.gainRankLevelupBonusGold_;
    fightFish_ = other.fightFish_ != null ? other.fightFish_.Clone() : null;
    contWinRankAdded_ = other.contWinRankAdded_;
    contWinGoldAdded_ = other.contWinGoldAdded_;
    goldPoolCurrGold_ = other.goldPoolCurrGold_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P5_Response Clone() {
    return new P5_Response(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private global::PBResult result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PBResult Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "gainRankLevel" field.</summary>
  public const int GainRankLevelFieldNumber = 2;
  private readonly static int GainRankLevelDefaultValue = 0;

  private int gainRankLevel_;
  /// <summary>
  ///获得奖杯数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GainRankLevel {
    get { if ((_hasBits0 & 1) != 0) { return gainRankLevel_; } else { return GainRankLevelDefaultValue; } }
    set {
      _hasBits0 |= 1;
      gainRankLevel_ = value;
    }
  }
  /// <summary>Gets whether the "gainRankLevel" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasGainRankLevel {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "gainRankLevel" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearGainRankLevel() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "gainGold" field.</summary>
  public const int GainGoldFieldNumber = 3;
  private readonly static int GainGoldDefaultValue = 0;

  private int gainGold_;
  /// <summary>
  ///获得战斗奖励金币
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GainGold {
    get { if ((_hasBits0 & 2) != 0) { return gainGold_; } else { return GainGoldDefaultValue; } }
    set {
      _hasBits0 |= 2;
      gainGold_ = value;
    }
  }
  /// <summary>Gets whether the "gainGold" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasGainGold {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "gainGold" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearGainGold() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "gainRankLevelupBonusGold" field.</summary>
  public const int GainRankLevelupBonusGoldFieldNumber = 4;
  private readonly static int GainRankLevelupBonusGoldDefaultValue = 0;

  private int gainRankLevelupBonusGold_;
  /// <summary>
  ///获得段位升级奖励金币（参照基表FishRankLevelData）
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GainRankLevelupBonusGold {
    get { if ((_hasBits0 & 4) != 0) { return gainRankLevelupBonusGold_; } else { return GainRankLevelupBonusGoldDefaultValue; } }
    set {
      _hasBits0 |= 4;
      gainRankLevelupBonusGold_ = value;
    }
  }
  /// <summary>Gets whether the "gainRankLevelupBonusGold" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasGainRankLevelupBonusGold {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "gainRankLevelupBonusGold" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearGainRankLevelupBonusGold() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "fightFish" field.</summary>
  public const int FightFishFieldNumber = 5;
  private global::PBPlayerFishLevelInfo fightFish_;
  /// <summary>
  ///当前出战鱼信息
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PBPlayerFishLevelInfo FightFish {
    get { return fightFish_; }
    set {
      fightFish_ = value;
    }
  }

  /// <summary>Field number for the "contWinRankAdded" field.</summary>
  public const int ContWinRankAddedFieldNumber = 6;
  private readonly static int ContWinRankAddedDefaultValue = 0;

  private int contWinRankAdded_;
  /// <summary>
  ///连胜增加的rank值
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ContWinRankAdded {
    get { if ((_hasBits0 & 8) != 0) { return contWinRankAdded_; } else { return ContWinRankAddedDefaultValue; } }
    set {
      _hasBits0 |= 8;
      contWinRankAdded_ = value;
    }
  }
  /// <summary>Gets whether the "contWinRankAdded" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasContWinRankAdded {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "contWinRankAdded" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearContWinRankAdded() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "contWinGoldAdded" field.</summary>
  public const int ContWinGoldAddedFieldNumber = 7;
  private readonly static int ContWinGoldAddedDefaultValue = 0;

  private int contWinGoldAdded_;
  /// <summary>
  ///连胜增加的金币
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ContWinGoldAdded {
    get { if ((_hasBits0 & 16) != 0) { return contWinGoldAdded_; } else { return ContWinGoldAddedDefaultValue; } }
    set {
      _hasBits0 |= 16;
      contWinGoldAdded_ = value;
    }
  }
  /// <summary>Gets whether the "contWinGoldAdded" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasContWinGoldAdded {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "contWinGoldAdded" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearContWinGoldAdded() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "goldPoolCurrGold" field.</summary>
  public const int GoldPoolCurrGoldFieldNumber = 8;
  private readonly static int GoldPoolCurrGoldDefaultValue = 0;

  private int goldPoolCurrGold_;
  /// <summary>
  ///扣除段位奖励前的金币池剩余金币
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GoldPoolCurrGold {
    get { if ((_hasBits0 & 32) != 0) { return goldPoolCurrGold_; } else { return GoldPoolCurrGoldDefaultValue; } }
    set {
      _hasBits0 |= 32;
      goldPoolCurrGold_ = value;
    }
  }
  /// <summary>Gets whether the "goldPoolCurrGold" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasGoldPoolCurrGold {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "goldPoolCurrGold" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearGoldPoolCurrGold() {
    _hasBits0 &= ~32;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as P5_Response);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(P5_Response other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Result, other.Result)) return false;
    if (GainRankLevel != other.GainRankLevel) return false;
    if (GainGold != other.GainGold) return false;
    if (GainRankLevelupBonusGold != other.GainRankLevelupBonusGold) return false;
    if (!object.Equals(FightFish, other.FightFish)) return false;
    if (ContWinRankAdded != other.ContWinRankAdded) return false;
    if (ContWinGoldAdded != other.ContWinGoldAdded) return false;
    if (GoldPoolCurrGold != other.GoldPoolCurrGold) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (result_ != null) hash ^= Result.GetHashCode();
    if (HasGainRankLevel) hash ^= GainRankLevel.GetHashCode();
    if (HasGainGold) hash ^= GainGold.GetHashCode();
    if (HasGainRankLevelupBonusGold) hash ^= GainRankLevelupBonusGold.GetHashCode();
    if (fightFish_ != null) hash ^= FightFish.GetHashCode();
    if (HasContWinRankAdded) hash ^= ContWinRankAdded.GetHashCode();
    if (HasContWinGoldAdded) hash ^= ContWinGoldAdded.GetHashCode();
    if (HasGoldPoolCurrGold) hash ^= GoldPoolCurrGold.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (result_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Result);
    }
    if (HasGainRankLevel) {
      output.WriteRawTag(16);
      output.WriteInt32(GainRankLevel);
    }
    if (HasGainGold) {
      output.WriteRawTag(24);
      output.WriteInt32(GainGold);
    }
    if (HasGainRankLevelupBonusGold) {
      output.WriteRawTag(32);
      output.WriteInt32(GainRankLevelupBonusGold);
    }
    if (fightFish_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(FightFish);
    }
    if (HasContWinRankAdded) {
      output.WriteRawTag(48);
      output.WriteInt32(ContWinRankAdded);
    }
    if (HasContWinGoldAdded) {
      output.WriteRawTag(56);
      output.WriteInt32(ContWinGoldAdded);
    }
    if (HasGoldPoolCurrGold) {
      output.WriteRawTag(64);
      output.WriteInt32(GoldPoolCurrGold);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (result_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
    }
    if (HasGainRankLevel) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GainRankLevel);
    }
    if (HasGainGold) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GainGold);
    }
    if (HasGainRankLevelupBonusGold) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GainRankLevelupBonusGold);
    }
    if (fightFish_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(FightFish);
    }
    if (HasContWinRankAdded) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ContWinRankAdded);
    }
    if (HasContWinGoldAdded) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ContWinGoldAdded);
    }
    if (HasGoldPoolCurrGold) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(GoldPoolCurrGold);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(P5_Response other) {
    if (other == null) {
      return;
    }
    if (other.result_ != null) {
      if (result_ == null) {
        Result = new global::PBResult();
      }
      Result.MergeFrom(other.Result);
    }
    if (other.HasGainRankLevel) {
      GainRankLevel = other.GainRankLevel;
    }
    if (other.HasGainGold) {
      GainGold = other.GainGold;
    }
    if (other.HasGainRankLevelupBonusGold) {
      GainRankLevelupBonusGold = other.GainRankLevelupBonusGold;
    }
    if (other.fightFish_ != null) {
      if (fightFish_ == null) {
        FightFish = new global::PBPlayerFishLevelInfo();
      }
      FightFish.MergeFrom(other.FightFish);
    }
    if (other.HasContWinRankAdded) {
      ContWinRankAdded = other.ContWinRankAdded;
    }
    if (other.HasContWinGoldAdded) {
      ContWinGoldAdded = other.ContWinGoldAdded;
    }
    if (other.HasGoldPoolCurrGold) {
      GoldPoolCurrGold = other.GoldPoolCurrGold;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (result_ == null) {
            Result = new global::PBResult();
          }
          input.ReadMessage(Result);
          break;
        }
        case 16: {
          GainRankLevel = input.ReadInt32();
          break;
        }
        case 24: {
          GainGold = input.ReadInt32();
          break;
        }
        case 32: {
          GainRankLevelupBonusGold = input.ReadInt32();
          break;
        }
        case 42: {
          if (fightFish_ == null) {
            FightFish = new global::PBPlayerFishLevelInfo();
          }
          input.ReadMessage(FightFish);
          break;
        }
        case 48: {
          ContWinRankAdded = input.ReadInt32();
          break;
        }
        case 56: {
          ContWinGoldAdded = input.ReadInt32();
          break;
        }
        case 64: {
          GoldPoolCurrGold = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///设置出战鱼
/// </summary>
public sealed partial class P6_Request : pb::IMessage<P6_Request> {
  private static readonly pb::MessageParser<P6_Request> _parser = new pb::MessageParser<P6_Request>(() => new P6_Request());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<P6_Request> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P6_Request() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P6_Request(P6_Request other) : this() {
    _hasBits0 = other._hasBits0;
    fishId_ = other.fishId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P6_Request Clone() {
    return new P6_Request(this);
  }

  /// <summary>Field number for the "fishId" field.</summary>
  public const int FishIdFieldNumber = 1;
  private readonly static int FishIdDefaultValue = 0;

  private int fishId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FishId {
    get { if ((_hasBits0 & 1) != 0) { return fishId_; } else { return FishIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      fishId_ = value;
    }
  }
  /// <summary>Gets whether the "fishId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasFishId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "fishId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearFishId() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as P6_Request);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(P6_Request other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (FishId != other.FishId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasFishId) hash ^= FishId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasFishId) {
      output.WriteRawTag(8);
      output.WriteInt32(FishId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasFishId) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(P6_Request other) {
    if (other == null) {
      return;
    }
    if (other.HasFishId) {
      FishId = other.FishId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          FishId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class P6_Response : pb::IMessage<P6_Response> {
  private static readonly pb::MessageParser<P6_Response> _parser = new pb::MessageParser<P6_Response>(() => new P6_Response());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<P6_Response> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P6_Response() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P6_Response(P6_Response other) : this() {
    result_ = other.result_ != null ? other.result_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P6_Response Clone() {
    return new P6_Response(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private global::PBResult result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PBResult Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as P6_Response);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(P6_Response other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Result, other.Result)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (result_ != null) hash ^= Result.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (result_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Result);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (result_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(P6_Response other) {
    if (other == null) {
      return;
    }
    if (other.result_ != null) {
      if (result_ == null) {
        Result = new global::PBResult();
      }
      Result.MergeFrom(other.Result);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (result_ == null) {
            Result = new global::PBResult();
          }
          input.ReadMessage(Result);
          break;
        }
      }
    }
  }

}

/// <summary>
///鱼升级
/// </summary>
public sealed partial class P7_Request : pb::IMessage<P7_Request> {
  private static readonly pb::MessageParser<P7_Request> _parser = new pb::MessageParser<P7_Request>(() => new P7_Request());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<P7_Request> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P7_Request() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P7_Request(P7_Request other) : this() {
    _hasBits0 = other._hasBits0;
    fishId_ = other.fishId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P7_Request Clone() {
    return new P7_Request(this);
  }

  /// <summary>Field number for the "fishId" field.</summary>
  public const int FishIdFieldNumber = 1;
  private readonly static int FishIdDefaultValue = 0;

  private int fishId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FishId {
    get { if ((_hasBits0 & 1) != 0) { return fishId_; } else { return FishIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      fishId_ = value;
    }
  }
  /// <summary>Gets whether the "fishId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasFishId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "fishId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearFishId() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as P7_Request);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(P7_Request other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (FishId != other.FishId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasFishId) hash ^= FishId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasFishId) {
      output.WriteRawTag(8);
      output.WriteInt32(FishId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasFishId) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(P7_Request other) {
    if (other == null) {
      return;
    }
    if (other.HasFishId) {
      FishId = other.FishId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          FishId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class P7_Response : pb::IMessage<P7_Response> {
  private static readonly pb::MessageParser<P7_Response> _parser = new pb::MessageParser<P7_Response>(() => new P7_Response());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<P7_Response> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[14]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P7_Response() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P7_Response(P7_Response other) : this() {
    result_ = other.result_ != null ? other.result_.Clone() : null;
    fishInfo_ = other.fishInfo_ != null ? other.fishInfo_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P7_Response Clone() {
    return new P7_Response(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private global::PBResult result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PBResult Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "fishInfo" field.</summary>
  public const int FishInfoFieldNumber = 2;
  private global::PBPlayerFishLevelInfo fishInfo_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PBPlayerFishLevelInfo FishInfo {
    get { return fishInfo_; }
    set {
      fishInfo_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as P7_Response);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(P7_Response other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Result, other.Result)) return false;
    if (!object.Equals(FishInfo, other.FishInfo)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (result_ != null) hash ^= Result.GetHashCode();
    if (fishInfo_ != null) hash ^= FishInfo.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (result_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Result);
    }
    if (fishInfo_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(FishInfo);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (result_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
    }
    if (fishInfo_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(FishInfo);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(P7_Response other) {
    if (other == null) {
      return;
    }
    if (other.result_ != null) {
      if (result_ == null) {
        Result = new global::PBResult();
      }
      Result.MergeFrom(other.Result);
    }
    if (other.fishInfo_ != null) {
      if (fishInfo_ == null) {
        FishInfo = new global::PBPlayerFishLevelInfo();
      }
      FishInfo.MergeFrom(other.FishInfo);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (result_ == null) {
            Result = new global::PBResult();
          }
          input.ReadMessage(Result);
          break;
        }
        case 18: {
          if (fishInfo_ == null) {
            FishInfo = new global::PBPlayerFishLevelInfo();
          }
          input.ReadMessage(FishInfo);
          break;
        }
      }
    }
  }

}

/// <summary>
///领取战斗奖励
/// </summary>
public sealed partial class P8_Request : pb::IMessage<P8_Request> {
  private static readonly pb::MessageParser<P8_Request> _parser = new pb::MessageParser<P8_Request>(() => new P8_Request());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<P8_Request> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[15]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P8_Request() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P8_Request(P8_Request other) : this() {
    _hasBits0 = other._hasBits0;
    battleId_ = other.battleId_;
    isDouble_ = other.isDouble_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P8_Request Clone() {
    return new P8_Request(this);
  }

  /// <summary>Field number for the "battleId" field.</summary>
  public const int BattleIdFieldNumber = 1;
  private readonly static string BattleIdDefaultValue = "";

  private string battleId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string BattleId {
    get { return battleId_ ?? BattleIdDefaultValue; }
    set {
      battleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "battleId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasBattleId {
    get { return battleId_ != null; }
  }
  /// <summary>Clears the value of the "battleId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearBattleId() {
    battleId_ = null;
  }

  /// <summary>Field number for the "isDouble" field.</summary>
  public const int IsDoubleFieldNumber = 2;
  private readonly static bool IsDoubleDefaultValue = false;

  private bool isDouble_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsDouble {
    get { if ((_hasBits0 & 1) != 0) { return isDouble_; } else { return IsDoubleDefaultValue; } }
    set {
      _hasBits0 |= 1;
      isDouble_ = value;
    }
  }
  /// <summary>Gets whether the "isDouble" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasIsDouble {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "isDouble" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIsDouble() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as P8_Request);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(P8_Request other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (BattleId != other.BattleId) return false;
    if (IsDouble != other.IsDouble) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasBattleId) hash ^= BattleId.GetHashCode();
    if (HasIsDouble) hash ^= IsDouble.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasBattleId) {
      output.WriteRawTag(10);
      output.WriteString(BattleId);
    }
    if (HasIsDouble) {
      output.WriteRawTag(16);
      output.WriteBool(IsDouble);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasBattleId) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(BattleId);
    }
    if (HasIsDouble) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(P8_Request other) {
    if (other == null) {
      return;
    }
    if (other.HasBattleId) {
      BattleId = other.BattleId;
    }
    if (other.HasIsDouble) {
      IsDouble = other.IsDouble;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          BattleId = input.ReadString();
          break;
        }
        case 16: {
          IsDouble = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class P8_Response : pb::IMessage<P8_Response> {
  private static readonly pb::MessageParser<P8_Response> _parser = new pb::MessageParser<P8_Response>(() => new P8_Response());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<P8_Response> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[16]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P8_Response() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P8_Response(P8_Response other) : this() {
    _hasBits0 = other._hasBits0;
    result_ = other.result_ != null ? other.result_.Clone() : null;
    rewardMoney_ = other.rewardMoney_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P8_Response Clone() {
    return new P8_Response(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private global::PBResult result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PBResult Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "rewardMoney" field.</summary>
  public const int RewardMoneyFieldNumber = 2;
  private readonly static int RewardMoneyDefaultValue = 0;

  private int rewardMoney_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RewardMoney {
    get { if ((_hasBits0 & 1) != 0) { return rewardMoney_; } else { return RewardMoneyDefaultValue; } }
    set {
      _hasBits0 |= 1;
      rewardMoney_ = value;
    }
  }
  /// <summary>Gets whether the "rewardMoney" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRewardMoney {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "rewardMoney" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRewardMoney() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as P8_Response);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(P8_Response other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Result, other.Result)) return false;
    if (RewardMoney != other.RewardMoney) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (result_ != null) hash ^= Result.GetHashCode();
    if (HasRewardMoney) hash ^= RewardMoney.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (result_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Result);
    }
    if (HasRewardMoney) {
      output.WriteRawTag(16);
      output.WriteInt32(RewardMoney);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (result_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
    }
    if (HasRewardMoney) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RewardMoney);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(P8_Response other) {
    if (other == null) {
      return;
    }
    if (other.result_ != null) {
      if (result_ == null) {
        Result = new global::PBResult();
      }
      Result.MergeFrom(other.Result);
    }
    if (other.HasRewardMoney) {
      RewardMoney = other.RewardMoney;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (result_ == null) {
            Result = new global::PBResult();
          }
          input.ReadMessage(Result);
          break;
        }
        case 16: {
          RewardMoney = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///修改昵称
/// </summary>
public sealed partial class P9_Request : pb::IMessage<P9_Request> {
  private static readonly pb::MessageParser<P9_Request> _parser = new pb::MessageParser<P9_Request>(() => new P9_Request());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<P9_Request> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[17]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P9_Request() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P9_Request(P9_Request other) : this() {
    nick_ = other.nick_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P9_Request Clone() {
    return new P9_Request(this);
  }

  /// <summary>Field number for the "nick" field.</summary>
  public const int NickFieldNumber = 1;
  private readonly static string NickDefaultValue = "";

  private string nick_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Nick {
    get { return nick_ ?? NickDefaultValue; }
    set {
      nick_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "nick" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasNick {
    get { return nick_ != null; }
  }
  /// <summary>Clears the value of the "nick" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearNick() {
    nick_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as P9_Request);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(P9_Request other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Nick != other.Nick) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasNick) hash ^= Nick.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasNick) {
      output.WriteRawTag(10);
      output.WriteString(Nick);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasNick) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Nick);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(P9_Request other) {
    if (other == null) {
      return;
    }
    if (other.HasNick) {
      Nick = other.Nick;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Nick = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class P9_Response : pb::IMessage<P9_Response> {
  private static readonly pb::MessageParser<P9_Response> _parser = new pb::MessageParser<P9_Response>(() => new P9_Response());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<P9_Response> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[18]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P9_Response() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P9_Response(P9_Response other) : this() {
    result_ = other.result_ != null ? other.result_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P9_Response Clone() {
    return new P9_Response(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private global::PBResult result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PBResult Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as P9_Response);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(P9_Response other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Result, other.Result)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (result_ != null) hash ^= Result.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (result_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Result);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (result_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(P9_Response other) {
    if (other == null) {
      return;
    }
    if (other.result_ != null) {
      if (result_ == null) {
        Result = new global::PBResult();
      }
      Result.MergeFrom(other.Result);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (result_ == null) {
            Result = new global::PBResult();
          }
          input.ReadMessage(Result);
          break;
        }
      }
    }
  }

}

/// <summary>
///获取商品列表
/// </summary>
public sealed partial class P10_Request : pb::IMessage<P10_Request> {
  private static readonly pb::MessageParser<P10_Request> _parser = new pb::MessageParser<P10_Request>(() => new P10_Request());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<P10_Request> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[19]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P10_Request() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P10_Request(P10_Request other) : this() {
    _hasBits0 = other._hasBits0;
    productType_ = other.productType_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P10_Request Clone() {
    return new P10_Request(this);
  }

  /// <summary>Field number for the "productType" field.</summary>
  public const int ProductTypeFieldNumber = 1;
  private readonly static global::ShopType ProductTypeDefaultValue = global::ShopType.Other;

  private global::ShopType productType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ShopType ProductType {
    get { if ((_hasBits0 & 1) != 0) { return productType_; } else { return ProductTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      productType_ = value;
    }
  }
  /// <summary>Gets whether the "productType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasProductType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "productType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearProductType() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as P10_Request);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(P10_Request other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ProductType != other.ProductType) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasProductType) hash ^= ProductType.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasProductType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) ProductType);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasProductType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ProductType);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(P10_Request other) {
    if (other == null) {
      return;
    }
    if (other.HasProductType) {
      ProductType = other.ProductType;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ProductType = (global::ShopType) input.ReadEnum();
          break;
        }
      }
    }
  }

}

/// <summary>
///获取商店列表
/// </summary>
public sealed partial class P10_Response : pb::IMessage<P10_Response> {
  private static readonly pb::MessageParser<P10_Response> _parser = new pb::MessageParser<P10_Response>(() => new P10_Response());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<P10_Response> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[20]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P10_Response() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P10_Response(P10_Response other) : this() {
    result_ = other.result_ != null ? other.result_.Clone() : null;
    productList_ = other.productList_.Clone();
    billingStateInfo_ = other.billingStateInfo_ != null ? other.billingStateInfo_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P10_Response Clone() {
    return new P10_Response(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private global::PBResult result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PBResult Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "productList" field.</summary>
  public const int ProductListFieldNumber = 2;
  private static readonly pb::FieldCodec<global::ShopBillingProduct> _repeated_productList_codec
      = pb::FieldCodec.ForMessage(18, global::ShopBillingProduct.Parser);
  private readonly pbc::RepeatedField<global::ShopBillingProduct> productList_ = new pbc::RepeatedField<global::ShopBillingProduct>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ShopBillingProduct> ProductList {
    get { return productList_; }
  }

  /// <summary>Field number for the "billingStateInfo" field.</summary>
  public const int BillingStateInfoFieldNumber = 3;
  private global::BillingStateInfo billingStateInfo_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::BillingStateInfo BillingStateInfo {
    get { return billingStateInfo_; }
    set {
      billingStateInfo_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as P10_Response);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(P10_Response other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Result, other.Result)) return false;
    if(!productList_.Equals(other.productList_)) return false;
    if (!object.Equals(BillingStateInfo, other.BillingStateInfo)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (result_ != null) hash ^= Result.GetHashCode();
    hash ^= productList_.GetHashCode();
    if (billingStateInfo_ != null) hash ^= BillingStateInfo.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (result_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Result);
    }
    productList_.WriteTo(output, _repeated_productList_codec);
    if (billingStateInfo_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(BillingStateInfo);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (result_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
    }
    size += productList_.CalculateSize(_repeated_productList_codec);
    if (billingStateInfo_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(BillingStateInfo);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(P10_Response other) {
    if (other == null) {
      return;
    }
    if (other.result_ != null) {
      if (result_ == null) {
        Result = new global::PBResult();
      }
      Result.MergeFrom(other.Result);
    }
    productList_.Add(other.productList_);
    if (other.billingStateInfo_ != null) {
      if (billingStateInfo_ == null) {
        BillingStateInfo = new global::BillingStateInfo();
      }
      BillingStateInfo.MergeFrom(other.BillingStateInfo);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (result_ == null) {
            Result = new global::PBResult();
          }
          input.ReadMessage(Result);
          break;
        }
        case 18: {
          productList_.AddEntriesFrom(input, _repeated_productList_codec);
          break;
        }
        case 26: {
          if (billingStateInfo_ == null) {
            BillingStateInfo = new global::BillingStateInfo();
          }
          input.ReadMessage(BillingStateInfo);
          break;
        }
      }
    }
  }

}

/// <summary>
///购买商品协议
/// </summary>
public sealed partial class P11_Request : pb::IMessage<P11_Request> {
  private static readonly pb::MessageParser<P11_Request> _parser = new pb::MessageParser<P11_Request>(() => new P11_Request());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<P11_Request> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[21]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P11_Request() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P11_Request(P11_Request other) : this() {
    _hasBits0 = other._hasBits0;
    shopItemId_ = other.shopItemId_;
    shopItemNum_ = other.shopItemNum_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P11_Request Clone() {
    return new P11_Request(this);
  }

  /// <summary>Field number for the "shopItemId" field.</summary>
  public const int ShopItemIdFieldNumber = 1;
  private readonly static int ShopItemIdDefaultValue = 0;

  private int shopItemId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ShopItemId {
    get { if ((_hasBits0 & 1) != 0) { return shopItemId_; } else { return ShopItemIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      shopItemId_ = value;
    }
  }
  /// <summary>Gets whether the "shopItemId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasShopItemId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "shopItemId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearShopItemId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "shopItemNum" field.</summary>
  public const int ShopItemNumFieldNumber = 2;
  private readonly static int ShopItemNumDefaultValue = 0;

  private int shopItemNum_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ShopItemNum {
    get { if ((_hasBits0 & 2) != 0) { return shopItemNum_; } else { return ShopItemNumDefaultValue; } }
    set {
      _hasBits0 |= 2;
      shopItemNum_ = value;
    }
  }
  /// <summary>Gets whether the "shopItemNum" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasShopItemNum {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "shopItemNum" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearShopItemNum() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as P11_Request);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(P11_Request other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ShopItemId != other.ShopItemId) return false;
    if (ShopItemNum != other.ShopItemNum) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasShopItemId) hash ^= ShopItemId.GetHashCode();
    if (HasShopItemNum) hash ^= ShopItemNum.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasShopItemId) {
      output.WriteRawTag(8);
      output.WriteInt32(ShopItemId);
    }
    if (HasShopItemNum) {
      output.WriteRawTag(16);
      output.WriteInt32(ShopItemNum);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasShopItemId) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShopItemId);
    }
    if (HasShopItemNum) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShopItemNum);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(P11_Request other) {
    if (other == null) {
      return;
    }
    if (other.HasShopItemId) {
      ShopItemId = other.ShopItemId;
    }
    if (other.HasShopItemNum) {
      ShopItemNum = other.ShopItemNum;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ShopItemId = input.ReadInt32();
          break;
        }
        case 16: {
          ShopItemNum = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class P11_Response : pb::IMessage<P11_Response> {
  private static readonly pb::MessageParser<P11_Response> _parser = new pb::MessageParser<P11_Response>(() => new P11_Response());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<P11_Response> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[22]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P11_Response() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P11_Response(P11_Response other) : this() {
    _hasBits0 = other._hasBits0;
    result_ = other.result_ != null ? other.result_.Clone() : null;
    content_ = other.content_.Clone();
    isTreasure_ = other.isTreasure_;
    treaContent_ = other.treaContent_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P11_Response Clone() {
    return new P11_Response(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private global::PBResult result_;
  /// <summary>
  ///结果
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PBResult Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "content" field.</summary>
  public const int ContentFieldNumber = 2;
  private static readonly pb::FieldCodec<global::ProductContent> _repeated_content_codec
      = pb::FieldCodec.ForMessage(18, global::ProductContent.Parser);
  private readonly pbc::RepeatedField<global::ProductContent> content_ = new pbc::RepeatedField<global::ProductContent>();
  /// <summary>
  ///获得物品列表
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ProductContent> Content {
    get { return content_; }
  }

  /// <summary>Field number for the "isTreasure" field.</summary>
  public const int IsTreasureFieldNumber = 3;
  private readonly static bool IsTreasureDefaultValue = false;

  private bool isTreasure_;
  /// <summary>
  ///是否为宝箱物品
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsTreasure {
    get { if ((_hasBits0 & 1) != 0) { return isTreasure_; } else { return IsTreasureDefaultValue; } }
    set {
      _hasBits0 |= 1;
      isTreasure_ = value;
    }
  }
  /// <summary>Gets whether the "isTreasure" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasIsTreasure {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "isTreasure" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIsTreasure() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "treaContent" field.</summary>
  public const int TreaContentFieldNumber = 4;
  private static readonly pb::FieldCodec<global::ProductContent> _repeated_treaContent_codec
      = pb::FieldCodec.ForMessage(34, global::ProductContent.Parser);
  private readonly pbc::RepeatedField<global::ProductContent> treaContent_ = new pbc::RepeatedField<global::ProductContent>();
  /// <summary>
  ///宝箱开启后的物品列表
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ProductContent> TreaContent {
    get { return treaContent_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as P11_Response);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(P11_Response other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Result, other.Result)) return false;
    if(!content_.Equals(other.content_)) return false;
    if (IsTreasure != other.IsTreasure) return false;
    if(!treaContent_.Equals(other.treaContent_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (result_ != null) hash ^= Result.GetHashCode();
    hash ^= content_.GetHashCode();
    if (HasIsTreasure) hash ^= IsTreasure.GetHashCode();
    hash ^= treaContent_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (result_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Result);
    }
    content_.WriteTo(output, _repeated_content_codec);
    if (HasIsTreasure) {
      output.WriteRawTag(24);
      output.WriteBool(IsTreasure);
    }
    treaContent_.WriteTo(output, _repeated_treaContent_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (result_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
    }
    size += content_.CalculateSize(_repeated_content_codec);
    if (HasIsTreasure) {
      size += 1 + 1;
    }
    size += treaContent_.CalculateSize(_repeated_treaContent_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(P11_Response other) {
    if (other == null) {
      return;
    }
    if (other.result_ != null) {
      if (result_ == null) {
        Result = new global::PBResult();
      }
      Result.MergeFrom(other.Result);
    }
    content_.Add(other.content_);
    if (other.HasIsTreasure) {
      IsTreasure = other.IsTreasure;
    }
    treaContent_.Add(other.treaContent_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (result_ == null) {
            Result = new global::PBResult();
          }
          input.ReadMessage(Result);
          break;
        }
        case 18: {
          content_.AddEntriesFrom(input, _repeated_content_codec);
          break;
        }
        case 24: {
          IsTreasure = input.ReadBool();
          break;
        }
        case 34: {
          treaContent_.AddEntriesFrom(input, _repeated_treaContent_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///氪金前验证
/// </summary>
public sealed partial class P12_Request : pb::IMessage<P12_Request> {
  private static readonly pb::MessageParser<P12_Request> _parser = new pb::MessageParser<P12_Request>(() => new P12_Request());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<P12_Request> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[23]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P12_Request() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P12_Request(P12_Request other) : this() {
    platformId_ = other.platformId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P12_Request Clone() {
    return new P12_Request(this);
  }

  /// <summary>Field number for the "platformId" field.</summary>
  public const int PlatformIdFieldNumber = 1;
  private readonly static string PlatformIdDefaultValue = "";

  private string platformId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string PlatformId {
    get { return platformId_ ?? PlatformIdDefaultValue; }
    set {
      platformId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "platformId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPlatformId {
    get { return platformId_ != null; }
  }
  /// <summary>Clears the value of the "platformId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPlatformId() {
    platformId_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as P12_Request);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(P12_Request other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlatformId != other.PlatformId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPlatformId) hash ^= PlatformId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPlatformId) {
      output.WriteRawTag(10);
      output.WriteString(PlatformId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPlatformId) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(PlatformId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(P12_Request other) {
    if (other == null) {
      return;
    }
    if (other.HasPlatformId) {
      PlatformId = other.PlatformId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          PlatformId = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class P12_Response : pb::IMessage<P12_Response> {
  private static readonly pb::MessageParser<P12_Response> _parser = new pb::MessageParser<P12_Response>(() => new P12_Response());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<P12_Response> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[24]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P12_Response() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P12_Response(P12_Response other) : this() {
    _hasBits0 = other._hasBits0;
    result_ = other.result_ != null ? other.result_.Clone() : null;
    resultCode_ = other.resultCode_;
    message_ = other.message_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P12_Response Clone() {
    return new P12_Response(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private global::PBResult result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PBResult Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "resultCode" field.</summary>
  public const int ResultCodeFieldNumber = 2;
  private readonly static global::PurchasedResponseKind ResultCodeDefaultValue = global::PurchasedResponseKind.ProcessedSuccessfully;

  private global::PurchasedResponseKind resultCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PurchasedResponseKind ResultCode {
    get { if ((_hasBits0 & 1) != 0) { return resultCode_; } else { return ResultCodeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      resultCode_ = value;
    }
  }
  /// <summary>Gets whether the "resultCode" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasResultCode {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "resultCode" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearResultCode() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "message" field.</summary>
  public const int MessageFieldNumber = 3;
  private readonly static string MessageDefaultValue = "";

  private string message_;
  /// <summary>
  ///android payload
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Message {
    get { return message_ ?? MessageDefaultValue; }
    set {
      message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "message" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMessage {
    get { return message_ != null; }
  }
  /// <summary>Clears the value of the "message" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMessage() {
    message_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as P12_Response);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(P12_Response other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Result, other.Result)) return false;
    if (ResultCode != other.ResultCode) return false;
    if (Message != other.Message) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (result_ != null) hash ^= Result.GetHashCode();
    if (HasResultCode) hash ^= ResultCode.GetHashCode();
    if (HasMessage) hash ^= Message.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (result_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Result);
    }
    if (HasResultCode) {
      output.WriteRawTag(16);
      output.WriteEnum((int) ResultCode);
    }
    if (HasMessage) {
      output.WriteRawTag(26);
      output.WriteString(Message);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (result_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
    }
    if (HasResultCode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ResultCode);
    }
    if (HasMessage) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(P12_Response other) {
    if (other == null) {
      return;
    }
    if (other.result_ != null) {
      if (result_ == null) {
        Result = new global::PBResult();
      }
      Result.MergeFrom(other.Result);
    }
    if (other.HasResultCode) {
      ResultCode = other.ResultCode;
    }
    if (other.HasMessage) {
      Message = other.Message;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (result_ == null) {
            Result = new global::PBResult();
          }
          input.ReadMessage(Result);
          break;
        }
        case 16: {
          ResultCode = (global::PurchasedResponseKind) input.ReadEnum();
          break;
        }
        case 26: {
          Message = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
///氪金协议
/// </summary>
public sealed partial class P13_Request : pb::IMessage<P13_Request> {
  private static readonly pb::MessageParser<P13_Request> _parser = new pb::MessageParser<P13_Request>(() => new P13_Request());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<P13_Request> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[25]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P13_Request() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P13_Request(P13_Request other) : this() {
    _hasBits0 = other._hasBits0;
    receipt_ = other.receipt_;
    transactionId_ = other.transactionId_;
    price_ = other.price_;
    formattedPrice_ = other.formattedPrice_;
    platform_ = other.platform_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P13_Request Clone() {
    return new P13_Request(this);
  }

  /// <summary>Field number for the "receipt" field.</summary>
  public const int ReceiptFieldNumber = 1;
  private readonly static string ReceiptDefaultValue = "";

  private string receipt_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Receipt {
    get { return receipt_ ?? ReceiptDefaultValue; }
    set {
      receipt_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "receipt" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasReceipt {
    get { return receipt_ != null; }
  }
  /// <summary>Clears the value of the "receipt" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearReceipt() {
    receipt_ = null;
  }

  /// <summary>Field number for the "transactionId" field.</summary>
  public const int TransactionIdFieldNumber = 2;
  private readonly static string TransactionIdDefaultValue = "";

  private string transactionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string TransactionId {
    get { return transactionId_ ?? TransactionIdDefaultValue; }
    set {
      transactionId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "transactionId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasTransactionId {
    get { return transactionId_ != null; }
  }
  /// <summary>Clears the value of the "transactionId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearTransactionId() {
    transactionId_ = null;
  }

  /// <summary>Field number for the "price" field.</summary>
  public const int PriceFieldNumber = 3;
  private readonly static string PriceDefaultValue = "";

  private string price_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Price {
    get { return price_ ?? PriceDefaultValue; }
    set {
      price_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "price" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPrice {
    get { return price_ != null; }
  }
  /// <summary>Clears the value of the "price" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPrice() {
    price_ = null;
  }

  /// <summary>Field number for the "formattedPrice" field.</summary>
  public const int FormattedPriceFieldNumber = 4;
  private readonly static string FormattedPriceDefaultValue = "";

  private string formattedPrice_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string FormattedPrice {
    get { return formattedPrice_ ?? FormattedPriceDefaultValue; }
    set {
      formattedPrice_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "formattedPrice" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasFormattedPrice {
    get { return formattedPrice_ != null; }
  }
  /// <summary>Clears the value of the "formattedPrice" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearFormattedPrice() {
    formattedPrice_ = null;
  }

  /// <summary>Field number for the "platform" field.</summary>
  public const int PlatformFieldNumber = 5;
  private readonly static global::Device PlatformDefaultValue = global::Device.NotSpecified;

  private global::Device platform_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Device Platform {
    get { if ((_hasBits0 & 1) != 0) { return platform_; } else { return PlatformDefaultValue; } }
    set {
      _hasBits0 |= 1;
      platform_ = value;
    }
  }
  /// <summary>Gets whether the "platform" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPlatform {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "platform" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPlatform() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as P13_Request);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(P13_Request other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Receipt != other.Receipt) return false;
    if (TransactionId != other.TransactionId) return false;
    if (Price != other.Price) return false;
    if (FormattedPrice != other.FormattedPrice) return false;
    if (Platform != other.Platform) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasReceipt) hash ^= Receipt.GetHashCode();
    if (HasTransactionId) hash ^= TransactionId.GetHashCode();
    if (HasPrice) hash ^= Price.GetHashCode();
    if (HasFormattedPrice) hash ^= FormattedPrice.GetHashCode();
    if (HasPlatform) hash ^= Platform.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasReceipt) {
      output.WriteRawTag(10);
      output.WriteString(Receipt);
    }
    if (HasTransactionId) {
      output.WriteRawTag(18);
      output.WriteString(TransactionId);
    }
    if (HasPrice) {
      output.WriteRawTag(26);
      output.WriteString(Price);
    }
    if (HasFormattedPrice) {
      output.WriteRawTag(34);
      output.WriteString(FormattedPrice);
    }
    if (HasPlatform) {
      output.WriteRawTag(40);
      output.WriteEnum((int) Platform);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasReceipt) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Receipt);
    }
    if (HasTransactionId) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(TransactionId);
    }
    if (HasPrice) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Price);
    }
    if (HasFormattedPrice) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(FormattedPrice);
    }
    if (HasPlatform) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Platform);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(P13_Request other) {
    if (other == null) {
      return;
    }
    if (other.HasReceipt) {
      Receipt = other.Receipt;
    }
    if (other.HasTransactionId) {
      TransactionId = other.TransactionId;
    }
    if (other.HasPrice) {
      Price = other.Price;
    }
    if (other.HasFormattedPrice) {
      FormattedPrice = other.FormattedPrice;
    }
    if (other.HasPlatform) {
      Platform = other.Platform;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Receipt = input.ReadString();
          break;
        }
        case 18: {
          TransactionId = input.ReadString();
          break;
        }
        case 26: {
          Price = input.ReadString();
          break;
        }
        case 34: {
          FormattedPrice = input.ReadString();
          break;
        }
        case 40: {
          Platform = (global::Device) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class P13_Response : pb::IMessage<P13_Response> {
  private static readonly pb::MessageParser<P13_Response> _parser = new pb::MessageParser<P13_Response>(() => new P13_Response());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<P13_Response> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[26]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P13_Response() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P13_Response(P13_Response other) : this() {
    _hasBits0 = other._hasBits0;
    result_ = other.result_ != null ? other.result_.Clone() : null;
    content_ = other.content_.Clone();
    resultCode_ = other.resultCode_;
    message_ = other.message_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P13_Response Clone() {
    return new P13_Response(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private global::PBResult result_;
  /// <summary>
  ///结果
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PBResult Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "content" field.</summary>
  public const int ContentFieldNumber = 2;
  private static readonly pb::FieldCodec<global::ProductContent> _repeated_content_codec
      = pb::FieldCodec.ForMessage(18, global::ProductContent.Parser);
  private readonly pbc::RepeatedField<global::ProductContent> content_ = new pbc::RepeatedField<global::ProductContent>();
  /// <summary>
  ///获得物品列表
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ProductContent> Content {
    get { return content_; }
  }

  /// <summary>Field number for the "resultCode" field.</summary>
  public const int ResultCodeFieldNumber = 3;
  private readonly static global::PurchasedResponseKind ResultCodeDefaultValue = global::PurchasedResponseKind.ProcessedSuccessfully;

  private global::PurchasedResponseKind resultCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PurchasedResponseKind ResultCode {
    get { if ((_hasBits0 & 1) != 0) { return resultCode_; } else { return ResultCodeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      resultCode_ = value;
    }
  }
  /// <summary>Gets whether the "resultCode" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasResultCode {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "resultCode" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearResultCode() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "message" field.</summary>
  public const int MessageFieldNumber = 4;
  private readonly static string MessageDefaultValue = "";

  private string message_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Message {
    get { return message_ ?? MessageDefaultValue; }
    set {
      message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "message" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMessage {
    get { return message_ != null; }
  }
  /// <summary>Clears the value of the "message" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMessage() {
    message_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as P13_Response);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(P13_Response other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Result, other.Result)) return false;
    if(!content_.Equals(other.content_)) return false;
    if (ResultCode != other.ResultCode) return false;
    if (Message != other.Message) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (result_ != null) hash ^= Result.GetHashCode();
    hash ^= content_.GetHashCode();
    if (HasResultCode) hash ^= ResultCode.GetHashCode();
    if (HasMessage) hash ^= Message.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (result_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Result);
    }
    content_.WriteTo(output, _repeated_content_codec);
    if (HasResultCode) {
      output.WriteRawTag(24);
      output.WriteEnum((int) ResultCode);
    }
    if (HasMessage) {
      output.WriteRawTag(34);
      output.WriteString(Message);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (result_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
    }
    size += content_.CalculateSize(_repeated_content_codec);
    if (HasResultCode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ResultCode);
    }
    if (HasMessage) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(P13_Response other) {
    if (other == null) {
      return;
    }
    if (other.result_ != null) {
      if (result_ == null) {
        Result = new global::PBResult();
      }
      Result.MergeFrom(other.Result);
    }
    content_.Add(other.content_);
    if (other.HasResultCode) {
      ResultCode = other.ResultCode;
    }
    if (other.HasMessage) {
      Message = other.Message;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (result_ == null) {
            Result = new global::PBResult();
          }
          input.ReadMessage(Result);
          break;
        }
        case 18: {
          content_.AddEntriesFrom(input, _repeated_content_codec);
          break;
        }
        case 24: {
          ResultCode = (global::PurchasedResponseKind) input.ReadEnum();
          break;
        }
        case 34: {
          Message = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
///金币池信息获取
/// </summary>
public sealed partial class P14_Response : pb::IMessage<P14_Response> {
  private static readonly pb::MessageParser<P14_Response> _parser = new pb::MessageParser<P14_Response>(() => new P14_Response());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<P14_Response> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[27]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P14_Response() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P14_Response(P14_Response other) : this() {
    _hasBits0 = other._hasBits0;
    result_ = other.result_ != null ? other.result_.Clone() : null;
    level_ = other.level_;
    currGold_ = other.currGold_;
    currTime_ = other.currTime_;
    nextAt_ = other.nextAt_;
    fullAt_ = other.fullAt_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P14_Response Clone() {
    return new P14_Response(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private global::PBResult result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PBResult Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 2;
  private readonly static int LevelDefaultValue = 0;

  private int level_;
  /// <summary>
  ///金币池等级
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { if ((_hasBits0 & 1) != 0) { return level_; } else { return LevelDefaultValue; } }
    set {
      _hasBits0 |= 1;
      level_ = value;
    }
  }
  /// <summary>Gets whether the "level" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasLevel {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "level" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearLevel() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "currGold" field.</summary>
  public const int CurrGoldFieldNumber = 3;
  private readonly static int CurrGoldDefaultValue = 0;

  private int currGold_;
  /// <summary>
  ///当前金币池金币数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CurrGold {
    get { if ((_hasBits0 & 2) != 0) { return currGold_; } else { return CurrGoldDefaultValue; } }
    set {
      _hasBits0 |= 2;
      currGold_ = value;
    }
  }
  /// <summary>Gets whether the "currGold" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCurrGold {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "currGold" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCurrGold() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "currTime" field.</summary>
  public const int CurrTimeFieldNumber = 4;
  private readonly static long CurrTimeDefaultValue = 0L;

  private long currTime_;
  /// <summary>
  ///当前服务器时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long CurrTime {
    get { if ((_hasBits0 & 4) != 0) { return currTime_; } else { return CurrTimeDefaultValue; } }
    set {
      _hasBits0 |= 4;
      currTime_ = value;
    }
  }
  /// <summary>Gets whether the "currTime" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCurrTime {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "currTime" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCurrTime() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "nextAt" field.</summary>
  public const int NextAtFieldNumber = 5;
  private readonly static long NextAtDefaultValue = 0L;

  private long nextAt_;
  /// <summary>
  ///下一个增加金币时间点 如果已满 返回-1
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long NextAt {
    get { if ((_hasBits0 & 8) != 0) { return nextAt_; } else { return NextAtDefaultValue; } }
    set {
      _hasBits0 |= 8;
      nextAt_ = value;
    }
  }
  /// <summary>Gets whether the "nextAt" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasNextAt {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "nextAt" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearNextAt() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "fullAt" field.</summary>
  public const int FullAtFieldNumber = 6;
  private readonly static long FullAtDefaultValue = 0L;

  private long fullAt_;
  /// <summary>
  ///金币池到达满的时间 如果已满 返回-1
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long FullAt {
    get { if ((_hasBits0 & 16) != 0) { return fullAt_; } else { return FullAtDefaultValue; } }
    set {
      _hasBits0 |= 16;
      fullAt_ = value;
    }
  }
  /// <summary>Gets whether the "fullAt" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasFullAt {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "fullAt" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearFullAt() {
    _hasBits0 &= ~16;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as P14_Response);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(P14_Response other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Result, other.Result)) return false;
    if (Level != other.Level) return false;
    if (CurrGold != other.CurrGold) return false;
    if (CurrTime != other.CurrTime) return false;
    if (NextAt != other.NextAt) return false;
    if (FullAt != other.FullAt) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (result_ != null) hash ^= Result.GetHashCode();
    if (HasLevel) hash ^= Level.GetHashCode();
    if (HasCurrGold) hash ^= CurrGold.GetHashCode();
    if (HasCurrTime) hash ^= CurrTime.GetHashCode();
    if (HasNextAt) hash ^= NextAt.GetHashCode();
    if (HasFullAt) hash ^= FullAt.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (result_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Result);
    }
    if (HasLevel) {
      output.WriteRawTag(16);
      output.WriteInt32(Level);
    }
    if (HasCurrGold) {
      output.WriteRawTag(24);
      output.WriteInt32(CurrGold);
    }
    if (HasCurrTime) {
      output.WriteRawTag(32);
      output.WriteInt64(CurrTime);
    }
    if (HasNextAt) {
      output.WriteRawTag(40);
      output.WriteInt64(NextAt);
    }
    if (HasFullAt) {
      output.WriteRawTag(48);
      output.WriteInt64(FullAt);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (result_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
    }
    if (HasLevel) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    if (HasCurrGold) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrGold);
    }
    if (HasCurrTime) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurrTime);
    }
    if (HasNextAt) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(NextAt);
    }
    if (HasFullAt) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(FullAt);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(P14_Response other) {
    if (other == null) {
      return;
    }
    if (other.result_ != null) {
      if (result_ == null) {
        Result = new global::PBResult();
      }
      Result.MergeFrom(other.Result);
    }
    if (other.HasLevel) {
      Level = other.Level;
    }
    if (other.HasCurrGold) {
      CurrGold = other.CurrGold;
    }
    if (other.HasCurrTime) {
      CurrTime = other.CurrTime;
    }
    if (other.HasNextAt) {
      NextAt = other.NextAt;
    }
    if (other.HasFullAt) {
      FullAt = other.FullAt;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (result_ == null) {
            Result = new global::PBResult();
          }
          input.ReadMessage(Result);
          break;
        }
        case 16: {
          Level = input.ReadInt32();
          break;
        }
        case 24: {
          CurrGold = input.ReadInt32();
          break;
        }
        case 32: {
          CurrTime = input.ReadInt64();
          break;
        }
        case 40: {
          NextAt = input.ReadInt64();
          break;
        }
        case 48: {
          FullAt = input.ReadInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Debug Billing
/// </summary>
public sealed partial class P15_Request : pb::IMessage<P15_Request> {
  private static readonly pb::MessageParser<P15_Request> _parser = new pb::MessageParser<P15_Request>(() => new P15_Request());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<P15_Request> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[28]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P15_Request() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P15_Request(P15_Request other) : this() {
    platformId_ = other.platformId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P15_Request Clone() {
    return new P15_Request(this);
  }

  /// <summary>Field number for the "platformId" field.</summary>
  public const int PlatformIdFieldNumber = 1;
  private readonly static string PlatformIdDefaultValue = "";

  private string platformId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string PlatformId {
    get { return platformId_ ?? PlatformIdDefaultValue; }
    set {
      platformId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "platformId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPlatformId {
    get { return platformId_ != null; }
  }
  /// <summary>Clears the value of the "platformId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPlatformId() {
    platformId_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as P15_Request);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(P15_Request other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlatformId != other.PlatformId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPlatformId) hash ^= PlatformId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPlatformId) {
      output.WriteRawTag(10);
      output.WriteString(PlatformId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPlatformId) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(PlatformId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(P15_Request other) {
    if (other == null) {
      return;
    }
    if (other.HasPlatformId) {
      PlatformId = other.PlatformId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          PlatformId = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class P15_Response : pb::IMessage<P15_Response> {
  private static readonly pb::MessageParser<P15_Response> _parser = new pb::MessageParser<P15_Response>(() => new P15_Response());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<P15_Response> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[29]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P15_Response() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P15_Response(P15_Response other) : this() {
    _hasBits0 = other._hasBits0;
    result_ = other.result_ != null ? other.result_.Clone() : null;
    content_ = other.content_.Clone();
    resultCode_ = other.resultCode_;
    message_ = other.message_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P15_Response Clone() {
    return new P15_Response(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private global::PBResult result_;
  /// <summary>
  ///结果
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PBResult Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "content" field.</summary>
  public const int ContentFieldNumber = 2;
  private static readonly pb::FieldCodec<global::ProductContent> _repeated_content_codec
      = pb::FieldCodec.ForMessage(18, global::ProductContent.Parser);
  private readonly pbc::RepeatedField<global::ProductContent> content_ = new pbc::RepeatedField<global::ProductContent>();
  /// <summary>
  ///获得物品列表
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ProductContent> Content {
    get { return content_; }
  }

  /// <summary>Field number for the "resultCode" field.</summary>
  public const int ResultCodeFieldNumber = 3;
  private readonly static global::PurchasedResponseKind ResultCodeDefaultValue = global::PurchasedResponseKind.ProcessedSuccessfully;

  private global::PurchasedResponseKind resultCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PurchasedResponseKind ResultCode {
    get { if ((_hasBits0 & 1) != 0) { return resultCode_; } else { return ResultCodeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      resultCode_ = value;
    }
  }
  /// <summary>Gets whether the "resultCode" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasResultCode {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "resultCode" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearResultCode() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "message" field.</summary>
  public const int MessageFieldNumber = 4;
  private readonly static string MessageDefaultValue = "";

  private string message_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Message {
    get { return message_ ?? MessageDefaultValue; }
    set {
      message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "message" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMessage {
    get { return message_ != null; }
  }
  /// <summary>Clears the value of the "message" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMessage() {
    message_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as P15_Response);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(P15_Response other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Result, other.Result)) return false;
    if(!content_.Equals(other.content_)) return false;
    if (ResultCode != other.ResultCode) return false;
    if (Message != other.Message) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (result_ != null) hash ^= Result.GetHashCode();
    hash ^= content_.GetHashCode();
    if (HasResultCode) hash ^= ResultCode.GetHashCode();
    if (HasMessage) hash ^= Message.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (result_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Result);
    }
    content_.WriteTo(output, _repeated_content_codec);
    if (HasResultCode) {
      output.WriteRawTag(24);
      output.WriteEnum((int) ResultCode);
    }
    if (HasMessage) {
      output.WriteRawTag(34);
      output.WriteString(Message);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (result_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
    }
    size += content_.CalculateSize(_repeated_content_codec);
    if (HasResultCode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ResultCode);
    }
    if (HasMessage) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(P15_Response other) {
    if (other == null) {
      return;
    }
    if (other.result_ != null) {
      if (result_ == null) {
        Result = new global::PBResult();
      }
      Result.MergeFrom(other.Result);
    }
    content_.Add(other.content_);
    if (other.HasResultCode) {
      ResultCode = other.ResultCode;
    }
    if (other.HasMessage) {
      Message = other.Message;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (result_ == null) {
            Result = new global::PBResult();
          }
          input.ReadMessage(Result);
          break;
        }
        case 18: {
          content_.AddEntriesFrom(input, _repeated_content_codec);
          break;
        }
        case 24: {
          ResultCode = (global::PurchasedResponseKind) input.ReadEnum();
          break;
        }
        case 34: {
          Message = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Get Rank Reward
/// </summary>
public sealed partial class P16_Request : pb::IMessage<P16_Request> {
  private static readonly pb::MessageParser<P16_Request> _parser = new pb::MessageParser<P16_Request>(() => new P16_Request());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<P16_Request> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[30]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P16_Request() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P16_Request(P16_Request other) : this() {
    _hasBits0 = other._hasBits0;
    rankBoundsId_ = other.rankBoundsId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P16_Request Clone() {
    return new P16_Request(this);
  }

  /// <summary>Field number for the "rankBoundsId" field.</summary>
  public const int RankBoundsIdFieldNumber = 1;
  private readonly static int RankBoundsIdDefaultValue = 0;

  private int rankBoundsId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RankBoundsId {
    get { if ((_hasBits0 & 1) != 0) { return rankBoundsId_; } else { return RankBoundsIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      rankBoundsId_ = value;
    }
  }
  /// <summary>Gets whether the "rankBoundsId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRankBoundsId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "rankBoundsId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRankBoundsId() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as P16_Request);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(P16_Request other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RankBoundsId != other.RankBoundsId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasRankBoundsId) hash ^= RankBoundsId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasRankBoundsId) {
      output.WriteRawTag(8);
      output.WriteInt32(RankBoundsId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasRankBoundsId) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RankBoundsId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(P16_Request other) {
    if (other == null) {
      return;
    }
    if (other.HasRankBoundsId) {
      RankBoundsId = other.RankBoundsId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          RankBoundsId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class P16_Response : pb::IMessage<P16_Response> {
  private static readonly pb::MessageParser<P16_Response> _parser = new pb::MessageParser<P16_Response>(() => new P16_Response());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<P16_Response> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[31]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P16_Response() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P16_Response(P16_Response other) : this() {
    _hasBits0 = other._hasBits0;
    result_ = other.result_ != null ? other.result_.Clone() : null;
    gettedBoundsId_ = other.gettedBoundsId_.Clone();
    content_ = other.content_.Clone();
    isTreasure_ = other.isTreasure_;
    treaContent_ = other.treaContent_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P16_Response Clone() {
    return new P16_Response(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private global::PBResult result_;
  /// <summary>
  ///结果
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PBResult Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "gettedBoundsId" field.</summary>
  public const int GettedBoundsIdFieldNumber = 2;
  private static readonly pb::FieldCodec<int> _repeated_gettedBoundsId_codec
      = pb::FieldCodec.ForInt32(16);
  private readonly pbc::RepeatedField<int> gettedBoundsId_ = new pbc::RepeatedField<int>();
  /// <summary>
  ///已获得奖励ID 数组
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> GettedBoundsId {
    get { return gettedBoundsId_; }
  }

  /// <summary>Field number for the "content" field.</summary>
  public const int ContentFieldNumber = 3;
  private static readonly pb::FieldCodec<global::ProductContent> _repeated_content_codec
      = pb::FieldCodec.ForMessage(26, global::ProductContent.Parser);
  private readonly pbc::RepeatedField<global::ProductContent> content_ = new pbc::RepeatedField<global::ProductContent>();
  /// <summary>
  ///获得物品列表
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ProductContent> Content {
    get { return content_; }
  }

  /// <summary>Field number for the "isTreasure" field.</summary>
  public const int IsTreasureFieldNumber = 4;
  private readonly static bool IsTreasureDefaultValue = false;

  private bool isTreasure_;
  /// <summary>
  ///是否为宝箱物品
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsTreasure {
    get { if ((_hasBits0 & 1) != 0) { return isTreasure_; } else { return IsTreasureDefaultValue; } }
    set {
      _hasBits0 |= 1;
      isTreasure_ = value;
    }
  }
  /// <summary>Gets whether the "isTreasure" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasIsTreasure {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "isTreasure" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIsTreasure() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "treaContent" field.</summary>
  public const int TreaContentFieldNumber = 5;
  private static readonly pb::FieldCodec<global::ProductContent> _repeated_treaContent_codec
      = pb::FieldCodec.ForMessage(42, global::ProductContent.Parser);
  private readonly pbc::RepeatedField<global::ProductContent> treaContent_ = new pbc::RepeatedField<global::ProductContent>();
  /// <summary>
  ///宝箱开启后的物品列表
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ProductContent> TreaContent {
    get { return treaContent_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as P16_Response);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(P16_Response other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Result, other.Result)) return false;
    if(!gettedBoundsId_.Equals(other.gettedBoundsId_)) return false;
    if(!content_.Equals(other.content_)) return false;
    if (IsTreasure != other.IsTreasure) return false;
    if(!treaContent_.Equals(other.treaContent_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (result_ != null) hash ^= Result.GetHashCode();
    hash ^= gettedBoundsId_.GetHashCode();
    hash ^= content_.GetHashCode();
    if (HasIsTreasure) hash ^= IsTreasure.GetHashCode();
    hash ^= treaContent_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (result_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Result);
    }
    gettedBoundsId_.WriteTo(output, _repeated_gettedBoundsId_codec);
    content_.WriteTo(output, _repeated_content_codec);
    if (HasIsTreasure) {
      output.WriteRawTag(32);
      output.WriteBool(IsTreasure);
    }
    treaContent_.WriteTo(output, _repeated_treaContent_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (result_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
    }
    size += gettedBoundsId_.CalculateSize(_repeated_gettedBoundsId_codec);
    size += content_.CalculateSize(_repeated_content_codec);
    if (HasIsTreasure) {
      size += 1 + 1;
    }
    size += treaContent_.CalculateSize(_repeated_treaContent_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(P16_Response other) {
    if (other == null) {
      return;
    }
    if (other.result_ != null) {
      if (result_ == null) {
        Result = new global::PBResult();
      }
      Result.MergeFrom(other.Result);
    }
    gettedBoundsId_.Add(other.gettedBoundsId_);
    content_.Add(other.content_);
    if (other.HasIsTreasure) {
      IsTreasure = other.IsTreasure;
    }
    treaContent_.Add(other.treaContent_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (result_ == null) {
            Result = new global::PBResult();
          }
          input.ReadMessage(Result);
          break;
        }
        case 18:
        case 16: {
          gettedBoundsId_.AddEntriesFrom(input, _repeated_gettedBoundsId_codec);
          break;
        }
        case 26: {
          content_.AddEntriesFrom(input, _repeated_content_codec);
          break;
        }
        case 32: {
          IsTreasure = input.ReadBool();
          break;
        }
        case 42: {
          treaContent_.AddEntriesFrom(input, _repeated_treaContent_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 测试登录
/// </summary>
public sealed partial class P17_Request : pb::IMessage<P17_Request> {
  private static readonly pb::MessageParser<P17_Request> _parser = new pb::MessageParser<P17_Request>(() => new P17_Request());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<P17_Request> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[32]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P17_Request() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P17_Request(P17_Request other) : this() {
    playerId_ = other.playerId_;
    mask_ = other.mask_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P17_Request Clone() {
    return new P17_Request(this);
  }

  /// <summary>Field number for the "playerId" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private readonly static string PlayerIdDefaultValue = "";

  private string playerId_;
  /// <summary>
  ///玩家id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string PlayerId {
    get { return playerId_ ?? PlayerIdDefaultValue; }
    set {
      playerId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "playerId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPlayerId {
    get { return playerId_ != null; }
  }
  /// <summary>Clears the value of the "playerId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPlayerId() {
    playerId_ = null;
  }

  /// <summary>Field number for the "mask" field.</summary>
  public const int MaskFieldNumber = 2;
  private readonly static string MaskDefaultValue = "";

  private string mask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Mask {
    get { return mask_ ?? MaskDefaultValue; }
    set {
      mask_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "mask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMask {
    get { return mask_ != null; }
  }
  /// <summary>Clears the value of the "mask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMask() {
    mask_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as P17_Request);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(P17_Request other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (Mask != other.Mask) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPlayerId) hash ^= PlayerId.GetHashCode();
    if (HasMask) hash ^= Mask.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPlayerId) {
      output.WriteRawTag(10);
      output.WriteString(PlayerId);
    }
    if (HasMask) {
      output.WriteRawTag(18);
      output.WriteString(Mask);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPlayerId) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(PlayerId);
    }
    if (HasMask) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Mask);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(P17_Request other) {
    if (other == null) {
      return;
    }
    if (other.HasPlayerId) {
      PlayerId = other.PlayerId;
    }
    if (other.HasMask) {
      Mask = other.Mask;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          PlayerId = input.ReadString();
          break;
        }
        case 18: {
          Mask = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class P17_Response : pb::IMessage<P17_Response> {
  private static readonly pb::MessageParser<P17_Response> _parser = new pb::MessageParser<P17_Response>(() => new P17_Response());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<P17_Response> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[33]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P17_Response() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P17_Response(P17_Response other) : this() {
    result_ = other.result_ != null ? other.result_.Clone() : null;
    authToken_ = other.authToken_;
    authKey_ = other.authKey_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P17_Response Clone() {
    return new P17_Response(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private global::PBResult result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PBResult Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "authToken" field.</summary>
  public const int AuthTokenFieldNumber = 2;
  private readonly static string AuthTokenDefaultValue = "";

  private string authToken_;
  /// <summary>
  ///玩家authtoken令牌
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string AuthToken {
    get { return authToken_ ?? AuthTokenDefaultValue; }
    set {
      authToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "authToken" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAuthToken {
    get { return authToken_ != null; }
  }
  /// <summary>Clears the value of the "authToken" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAuthToken() {
    authToken_ = null;
  }

  /// <summary>Field number for the "authKey" field.</summary>
  public const int AuthKeyFieldNumber = 3;
  private readonly static string AuthKeyDefaultValue = "";

  private string authKey_;
  /// <summary>
  ///交换密钥 给login使用
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string AuthKey {
    get { return authKey_ ?? AuthKeyDefaultValue; }
    set {
      authKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "authKey" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAuthKey {
    get { return authKey_ != null; }
  }
  /// <summary>Clears the value of the "authKey" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAuthKey() {
    authKey_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as P17_Response);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(P17_Response other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Result, other.Result)) return false;
    if (AuthToken != other.AuthToken) return false;
    if (AuthKey != other.AuthKey) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (result_ != null) hash ^= Result.GetHashCode();
    if (HasAuthToken) hash ^= AuthToken.GetHashCode();
    if (HasAuthKey) hash ^= AuthKey.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (result_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Result);
    }
    if (HasAuthToken) {
      output.WriteRawTag(18);
      output.WriteString(AuthToken);
    }
    if (HasAuthKey) {
      output.WriteRawTag(26);
      output.WriteString(AuthKey);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (result_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
    }
    if (HasAuthToken) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthToken);
    }
    if (HasAuthKey) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthKey);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(P17_Response other) {
    if (other == null) {
      return;
    }
    if (other.result_ != null) {
      if (result_ == null) {
        Result = new global::PBResult();
      }
      Result.MergeFrom(other.Result);
    }
    if (other.HasAuthToken) {
      AuthToken = other.AuthToken;
    }
    if (other.HasAuthKey) {
      AuthKey = other.AuthKey;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (result_ == null) {
            Result = new global::PBResult();
          }
          input.ReadMessage(Result);
          break;
        }
        case 18: {
          AuthToken = input.ReadString();
          break;
        }
        case 26: {
          AuthKey = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 金币池升级
/// </summary>
public sealed partial class P18_Response : pb::IMessage<P18_Response> {
  private static readonly pb::MessageParser<P18_Response> _parser = new pb::MessageParser<P18_Response>(() => new P18_Response());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<P18_Response> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[34]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P18_Response() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P18_Response(P18_Response other) : this() {
    result_ = other.result_ != null ? other.result_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P18_Response Clone() {
    return new P18_Response(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private global::PBResult result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PBResult Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as P18_Response);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(P18_Response other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Result, other.Result)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (result_ != null) hash ^= Result.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (result_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Result);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (result_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(P18_Response other) {
    if (other == null) {
      return;
    }
    if (other.result_ != null) {
      if (result_ == null) {
        Result = new global::PBResult();
      }
      Result.MergeFrom(other.Result);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (result_ == null) {
            Result = new global::PBResult();
          }
          input.ReadMessage(Result);
          break;
        }
      }
    }
  }

}

/// <summary>
///请求获取排行榜信息
/// </summary>
public sealed partial class P19_Request : pb::IMessage<P19_Request> {
  private static readonly pb::MessageParser<P19_Request> _parser = new pb::MessageParser<P19_Request>(() => new P19_Request());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<P19_Request> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[35]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P19_Request() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P19_Request(P19_Request other) : this() {
    _hasBits0 = other._hasBits0;
    rankType_ = other.rankType_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P19_Request Clone() {
    return new P19_Request(this);
  }

  /// <summary>Field number for the "rankType" field.</summary>
  public const int RankTypeFieldNumber = 1;
  private readonly static global::PBRankType RankTypeDefaultValue = global::PBRankType.Weekly;

  private global::PBRankType rankType_;
  /// <summary>
  ///排行类型
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PBRankType RankType {
    get { if ((_hasBits0 & 1) != 0) { return rankType_; } else { return RankTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      rankType_ = value;
    }
  }
  /// <summary>Gets whether the "rankType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRankType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "rankType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRankType() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as P19_Request);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(P19_Request other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RankType != other.RankType) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasRankType) hash ^= RankType.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasRankType) {
      output.WriteRawTag(8);
      output.WriteEnum((int) RankType);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasRankType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RankType);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(P19_Request other) {
    if (other == null) {
      return;
    }
    if (other.HasRankType) {
      RankType = other.RankType;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          RankType = (global::PBRankType) input.ReadEnum();
          break;
        }
      }
    }
  }

}

public sealed partial class P19_Response : pb::IMessage<P19_Response> {
  private static readonly pb::MessageParser<P19_Response> _parser = new pb::MessageParser<P19_Response>(() => new P19_Response());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<P19_Response> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[36]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P19_Response() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P19_Response(P19_Response other) : this() {
    _hasBits0 = other._hasBits0;
    result_ = other.result_ != null ? other.result_.Clone() : null;
    rankPlayerList_ = other.rankPlayerList_.Clone();
    rankReward_ = other.rankReward_ != null ? other.rankReward_.Clone() : null;
    type_ = other.type_;
    rankBatch_ = other.rankBatch_;
    rank_ = other.rank_;
    rankRate_ = other.rankRate_;
    bestRank_ = other.bestRank_;
    bestRankRate_ = other.bestRankRate_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P19_Response Clone() {
    return new P19_Response(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private global::PBResult result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PBResult Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "rankPlayerList" field.</summary>
  public const int RankPlayerListFieldNumber = 2;
  private static readonly pb::FieldCodec<global::RankPlayer> _repeated_rankPlayerList_codec
      = pb::FieldCodec.ForMessage(18, global::RankPlayer.Parser);
  private readonly pbc::RepeatedField<global::RankPlayer> rankPlayerList_ = new pbc::RepeatedField<global::RankPlayer>();
  /// <summary>
  ///排行榜top 玩家降序
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::RankPlayer> RankPlayerList {
    get { return rankPlayerList_; }
  }

  /// <summary>Field number for the "rankReward" field.</summary>
  public const int RankRewardFieldNumber = 3;
  private global::PBRankReward rankReward_;
  /// <summary>
  ///排行榜奖励
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PBRankReward RankReward {
    get { return rankReward_; }
    set {
      rankReward_ = value;
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 4;
  private readonly static global::PBRankType TypeDefaultValue = global::PBRankType.Weekly;

  private global::PBRankType type_;
  /// <summary>
  ///排行榜类型
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PBRankType Type {
    get { if ((_hasBits0 & 1) != 0) { return type_; } else { return TypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      type_ = value;
    }
  }
  /// <summary>Gets whether the "type" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "type" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "rankBatch" field.</summary>
  public const int RankBatchFieldNumber = 5;
  private readonly static int RankBatchDefaultValue = 0;

  private int rankBatch_;
  /// <summary>
  ///当前排行批次
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RankBatch {
    get { if ((_hasBits0 & 2) != 0) { return rankBatch_; } else { return RankBatchDefaultValue; } }
    set {
      _hasBits0 |= 2;
      rankBatch_ = value;
    }
  }
  /// <summary>Gets whether the "rankBatch" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRankBatch {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "rankBatch" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRankBatch() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "rank" field.</summary>
  public const int RankFieldNumber = 6;
  private readonly static long RankDefaultValue = 0L;

  private long rank_;
  /// <summary>
  ///本期排行榜名次
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Rank {
    get { if ((_hasBits0 & 4) != 0) { return rank_; } else { return RankDefaultValue; } }
    set {
      _hasBits0 |= 4;
      rank_ = value;
    }
  }
  /// <summary>Gets whether the "rank" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRank {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "rank" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRank() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "rankRate" field.</summary>
  public const int RankRateFieldNumber = 7;
  private readonly static float RankRateDefaultValue = 0F;

  private float rankRate_;
  /// <summary>
  ///本期排行榜名次百分比
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float RankRate {
    get { if ((_hasBits0 & 8) != 0) { return rankRate_; } else { return RankRateDefaultValue; } }
    set {
      _hasBits0 |= 8;
      rankRate_ = value;
    }
  }
  /// <summary>Gets whether the "rankRate" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRankRate {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "rankRate" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRankRate() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "bestRank" field.</summary>
  public const int BestRankFieldNumber = 8;
  private readonly static long BestRankDefaultValue = 0L;

  private long bestRank_;
  /// <summary>
  ///最佳该类排行榜名次
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long BestRank {
    get { if ((_hasBits0 & 16) != 0) { return bestRank_; } else { return BestRankDefaultValue; } }
    set {
      _hasBits0 |= 16;
      bestRank_ = value;
    }
  }
  /// <summary>Gets whether the "bestRank" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasBestRank {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "bestRank" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearBestRank() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "bestRankRate" field.</summary>
  public const int BestRankRateFieldNumber = 9;
  private readonly static float BestRankRateDefaultValue = 0F;

  private float bestRankRate_;
  /// <summary>
  ///最佳该累排行榜名次百分比
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float BestRankRate {
    get { if ((_hasBits0 & 32) != 0) { return bestRankRate_; } else { return BestRankRateDefaultValue; } }
    set {
      _hasBits0 |= 32;
      bestRankRate_ = value;
    }
  }
  /// <summary>Gets whether the "bestRankRate" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasBestRankRate {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "bestRankRate" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearBestRankRate() {
    _hasBits0 &= ~32;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as P19_Response);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(P19_Response other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Result, other.Result)) return false;
    if(!rankPlayerList_.Equals(other.rankPlayerList_)) return false;
    if (!object.Equals(RankReward, other.RankReward)) return false;
    if (Type != other.Type) return false;
    if (RankBatch != other.RankBatch) return false;
    if (Rank != other.Rank) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RankRate, other.RankRate)) return false;
    if (BestRank != other.BestRank) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BestRankRate, other.BestRankRate)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (result_ != null) hash ^= Result.GetHashCode();
    hash ^= rankPlayerList_.GetHashCode();
    if (rankReward_ != null) hash ^= RankReward.GetHashCode();
    if (HasType) hash ^= Type.GetHashCode();
    if (HasRankBatch) hash ^= RankBatch.GetHashCode();
    if (HasRank) hash ^= Rank.GetHashCode();
    if (HasRankRate) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RankRate);
    if (HasBestRank) hash ^= BestRank.GetHashCode();
    if (HasBestRankRate) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BestRankRate);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (result_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Result);
    }
    rankPlayerList_.WriteTo(output, _repeated_rankPlayerList_codec);
    if (rankReward_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(RankReward);
    }
    if (HasType) {
      output.WriteRawTag(32);
      output.WriteEnum((int) Type);
    }
    if (HasRankBatch) {
      output.WriteRawTag(40);
      output.WriteInt32(RankBatch);
    }
    if (HasRank) {
      output.WriteRawTag(48);
      output.WriteInt64(Rank);
    }
    if (HasRankRate) {
      output.WriteRawTag(61);
      output.WriteFloat(RankRate);
    }
    if (HasBestRank) {
      output.WriteRawTag(64);
      output.WriteInt64(BestRank);
    }
    if (HasBestRankRate) {
      output.WriteRawTag(77);
      output.WriteFloat(BestRankRate);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (result_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
    }
    size += rankPlayerList_.CalculateSize(_repeated_rankPlayerList_codec);
    if (rankReward_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RankReward);
    }
    if (HasType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (HasRankBatch) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RankBatch);
    }
    if (HasRank) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Rank);
    }
    if (HasRankRate) {
      size += 1 + 4;
    }
    if (HasBestRank) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(BestRank);
    }
    if (HasBestRankRate) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(P19_Response other) {
    if (other == null) {
      return;
    }
    if (other.result_ != null) {
      if (result_ == null) {
        Result = new global::PBResult();
      }
      Result.MergeFrom(other.Result);
    }
    rankPlayerList_.Add(other.rankPlayerList_);
    if (other.rankReward_ != null) {
      if (rankReward_ == null) {
        RankReward = new global::PBRankReward();
      }
      RankReward.MergeFrom(other.RankReward);
    }
    if (other.HasType) {
      Type = other.Type;
    }
    if (other.HasRankBatch) {
      RankBatch = other.RankBatch;
    }
    if (other.HasRank) {
      Rank = other.Rank;
    }
    if (other.HasRankRate) {
      RankRate = other.RankRate;
    }
    if (other.HasBestRank) {
      BestRank = other.BestRank;
    }
    if (other.HasBestRankRate) {
      BestRankRate = other.BestRankRate;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (result_ == null) {
            Result = new global::PBResult();
          }
          input.ReadMessage(Result);
          break;
        }
        case 18: {
          rankPlayerList_.AddEntriesFrom(input, _repeated_rankPlayerList_codec);
          break;
        }
        case 26: {
          if (rankReward_ == null) {
            RankReward = new global::PBRankReward();
          }
          input.ReadMessage(RankReward);
          break;
        }
        case 32: {
          Type = (global::PBRankType) input.ReadEnum();
          break;
        }
        case 40: {
          RankBatch = input.ReadInt32();
          break;
        }
        case 48: {
          Rank = input.ReadInt64();
          break;
        }
        case 61: {
          RankRate = input.ReadFloat();
          break;
        }
        case 64: {
          BestRank = input.ReadInt64();
          break;
        }
        case 77: {
          BestRankRate = input.ReadFloat();
          break;
        }
      }
    }
  }

}

/// <summary>
///获取任务列表
/// </summary>
public sealed partial class P20_Response : pb::IMessage<P20_Response> {
  private static readonly pb::MessageParser<P20_Response> _parser = new pb::MessageParser<P20_Response>(() => new P20_Response());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<P20_Response> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[37]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P20_Response() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P20_Response(P20_Response other) : this() {
    result_ = other.result_ != null ? other.result_.Clone() : null;
    missionList_ = other.missionList_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P20_Response Clone() {
    return new P20_Response(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private global::PBResult result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PBResult Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "missionList" field.</summary>
  public const int MissionListFieldNumber = 2;
  private static readonly pb::FieldCodec<global::PBMission> _repeated_missionList_codec
      = pb::FieldCodec.ForMessage(18, global::PBMission.Parser);
  private readonly pbc::RepeatedField<global::PBMission> missionList_ = new pbc::RepeatedField<global::PBMission>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PBMission> MissionList {
    get { return missionList_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as P20_Response);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(P20_Response other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Result, other.Result)) return false;
    if(!missionList_.Equals(other.missionList_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (result_ != null) hash ^= Result.GetHashCode();
    hash ^= missionList_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (result_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Result);
    }
    missionList_.WriteTo(output, _repeated_missionList_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (result_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
    }
    size += missionList_.CalculateSize(_repeated_missionList_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(P20_Response other) {
    if (other == null) {
      return;
    }
    if (other.result_ != null) {
      if (result_ == null) {
        Result = new global::PBResult();
      }
      Result.MergeFrom(other.Result);
    }
    missionList_.Add(other.missionList_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (result_ == null) {
            Result = new global::PBResult();
          }
          input.ReadMessage(Result);
          break;
        }
        case 18: {
          missionList_.AddEntriesFrom(input, _repeated_missionList_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///完成任务-获取任务奖励
/// </summary>
public sealed partial class P21_Request : pb::IMessage<P21_Request> {
  private static readonly pb::MessageParser<P21_Request> _parser = new pb::MessageParser<P21_Request>(() => new P21_Request());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<P21_Request> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[38]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P21_Request() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P21_Request(P21_Request other) : this() {
    _hasBits0 = other._hasBits0;
    missionId_ = other.missionId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P21_Request Clone() {
    return new P21_Request(this);
  }

  /// <summary>Field number for the "missionId" field.</summary>
  public const int MissionIdFieldNumber = 1;
  private readonly static int MissionIdDefaultValue = 0;

  private int missionId_;
  /// <summary>
  ///任务id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MissionId {
    get { if ((_hasBits0 & 1) != 0) { return missionId_; } else { return MissionIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      missionId_ = value;
    }
  }
  /// <summary>Gets whether the "missionId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMissionId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "missionId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMissionId() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as P21_Request);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(P21_Request other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (MissionId != other.MissionId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasMissionId) hash ^= MissionId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasMissionId) {
      output.WriteRawTag(8);
      output.WriteInt32(MissionId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasMissionId) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MissionId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(P21_Request other) {
    if (other == null) {
      return;
    }
    if (other.HasMissionId) {
      MissionId = other.MissionId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          MissionId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class P21_Response : pb::IMessage<P21_Response> {
  private static readonly pb::MessageParser<P21_Response> _parser = new pb::MessageParser<P21_Response>(() => new P21_Response());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<P21_Response> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[39]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P21_Response() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P21_Response(P21_Response other) : this() {
    _hasBits0 = other._hasBits0;
    result_ = other.result_ != null ? other.result_.Clone() : null;
    content_ = other.content_.Clone();
    isTreasure_ = other.isTreasure_;
    treaContent_ = other.treaContent_.Clone();
    newMission_ = other.newMission_ != null ? other.newMission_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P21_Response Clone() {
    return new P21_Response(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private global::PBResult result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PBResult Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "content" field.</summary>
  public const int ContentFieldNumber = 3;
  private static readonly pb::FieldCodec<global::ProductContent> _repeated_content_codec
      = pb::FieldCodec.ForMessage(26, global::ProductContent.Parser);
  private readonly pbc::RepeatedField<global::ProductContent> content_ = new pbc::RepeatedField<global::ProductContent>();
  /// <summary>
  ///获得物品列表
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ProductContent> Content {
    get { return content_; }
  }

  /// <summary>Field number for the "isTreasure" field.</summary>
  public const int IsTreasureFieldNumber = 4;
  private readonly static bool IsTreasureDefaultValue = false;

  private bool isTreasure_;
  /// <summary>
  ///是否为宝箱物品
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsTreasure {
    get { if ((_hasBits0 & 1) != 0) { return isTreasure_; } else { return IsTreasureDefaultValue; } }
    set {
      _hasBits0 |= 1;
      isTreasure_ = value;
    }
  }
  /// <summary>Gets whether the "isTreasure" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasIsTreasure {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "isTreasure" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIsTreasure() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "treaContent" field.</summary>
  public const int TreaContentFieldNumber = 5;
  private static readonly pb::FieldCodec<global::ProductContent> _repeated_treaContent_codec
      = pb::FieldCodec.ForMessage(42, global::ProductContent.Parser);
  private readonly pbc::RepeatedField<global::ProductContent> treaContent_ = new pbc::RepeatedField<global::ProductContent>();
  /// <summary>
  ///宝箱开启后的物品列表
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ProductContent> TreaContent {
    get { return treaContent_; }
  }

  /// <summary>Field number for the "newMission" field.</summary>
  public const int NewMissionFieldNumber = 6;
  private global::PBMission newMission_;
  /// <summary>
  /// 完成成就任务后更新的任务
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PBMission NewMission {
    get { return newMission_; }
    set {
      newMission_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as P21_Response);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(P21_Response other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Result, other.Result)) return false;
    if(!content_.Equals(other.content_)) return false;
    if (IsTreasure != other.IsTreasure) return false;
    if(!treaContent_.Equals(other.treaContent_)) return false;
    if (!object.Equals(NewMission, other.NewMission)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (result_ != null) hash ^= Result.GetHashCode();
    hash ^= content_.GetHashCode();
    if (HasIsTreasure) hash ^= IsTreasure.GetHashCode();
    hash ^= treaContent_.GetHashCode();
    if (newMission_ != null) hash ^= NewMission.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (result_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Result);
    }
    content_.WriteTo(output, _repeated_content_codec);
    if (HasIsTreasure) {
      output.WriteRawTag(32);
      output.WriteBool(IsTreasure);
    }
    treaContent_.WriteTo(output, _repeated_treaContent_codec);
    if (newMission_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(NewMission);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (result_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
    }
    size += content_.CalculateSize(_repeated_content_codec);
    if (HasIsTreasure) {
      size += 1 + 1;
    }
    size += treaContent_.CalculateSize(_repeated_treaContent_codec);
    if (newMission_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(NewMission);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(P21_Response other) {
    if (other == null) {
      return;
    }
    if (other.result_ != null) {
      if (result_ == null) {
        Result = new global::PBResult();
      }
      Result.MergeFrom(other.Result);
    }
    content_.Add(other.content_);
    if (other.HasIsTreasure) {
      IsTreasure = other.IsTreasure;
    }
    treaContent_.Add(other.treaContent_);
    if (other.newMission_ != null) {
      if (newMission_ == null) {
        NewMission = new global::PBMission();
      }
      NewMission.MergeFrom(other.NewMission);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (result_ == null) {
            Result = new global::PBResult();
          }
          input.ReadMessage(Result);
          break;
        }
        case 26: {
          content_.AddEntriesFrom(input, _repeated_content_codec);
          break;
        }
        case 32: {
          IsTreasure = input.ReadBool();
          break;
        }
        case 42: {
          treaContent_.AddEntriesFrom(input, _repeated_treaContent_codec);
          break;
        }
        case 50: {
          if (newMission_ == null) {
            NewMission = new global::PBMission();
          }
          input.ReadMessage(NewMission);
          break;
        }
      }
    }
  }

}

/// <summary>
///看广告拿钻石
/// </summary>
public sealed partial class P22_Response : pb::IMessage<P22_Response> {
  private static readonly pb::MessageParser<P22_Response> _parser = new pb::MessageParser<P22_Response>(() => new P22_Response());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<P22_Response> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[40]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P22_Response() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P22_Response(P22_Response other) : this() {
    _hasBits0 = other._hasBits0;
    result_ = other.result_ != null ? other.result_.Clone() : null;
    advertRewardRemainingCnt_ = other.advertRewardRemainingCnt_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P22_Response Clone() {
    return new P22_Response(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private global::PBResult result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PBResult Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "advertRewardRemainingCnt" field.</summary>
  public const int AdvertRewardRemainingCntFieldNumber = 2;
  private readonly static int AdvertRewardRemainingCntDefaultValue = 0;

  private int advertRewardRemainingCnt_;
  /// <summary>
  /// 剩余观看广告次数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int AdvertRewardRemainingCnt {
    get { if ((_hasBits0 & 1) != 0) { return advertRewardRemainingCnt_; } else { return AdvertRewardRemainingCntDefaultValue; } }
    set {
      _hasBits0 |= 1;
      advertRewardRemainingCnt_ = value;
    }
  }
  /// <summary>Gets whether the "advertRewardRemainingCnt" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAdvertRewardRemainingCnt {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "advertRewardRemainingCnt" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAdvertRewardRemainingCnt() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as P22_Response);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(P22_Response other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Result, other.Result)) return false;
    if (AdvertRewardRemainingCnt != other.AdvertRewardRemainingCnt) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (result_ != null) hash ^= Result.GetHashCode();
    if (HasAdvertRewardRemainingCnt) hash ^= AdvertRewardRemainingCnt.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (result_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Result);
    }
    if (HasAdvertRewardRemainingCnt) {
      output.WriteRawTag(16);
      output.WriteInt32(AdvertRewardRemainingCnt);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (result_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
    }
    if (HasAdvertRewardRemainingCnt) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AdvertRewardRemainingCnt);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(P22_Response other) {
    if (other == null) {
      return;
    }
    if (other.result_ != null) {
      if (result_ == null) {
        Result = new global::PBResult();
      }
      Result.MergeFrom(other.Result);
    }
    if (other.HasAdvertRewardRemainingCnt) {
      AdvertRewardRemainingCnt = other.AdvertRewardRemainingCnt;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (result_ == null) {
            Result = new global::PBResult();
          }
          input.ReadMessage(Result);
          break;
        }
        case 16: {
          AdvertRewardRemainingCnt = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///-----------------------------------------------[公用]----------------------------------
/// </summary>
public sealed partial class PBAction : pb::IMessage<PBAction> {
  private static readonly pb::MessageParser<PBAction> _parser = new pb::MessageParser<PBAction>(() => new PBAction());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PBAction> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[41]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PBAction() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PBAction(PBAction other) : this() {
    _hasBits0 = other._hasBits0;
    actionId_ = other.actionId_;
    triggerNumber_ = other.triggerNumber_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PBAction Clone() {
    return new PBAction(this);
  }

  /// <summary>Field number for the "actionId" field.</summary>
  public const int ActionIdFieldNumber = 1;
  private readonly static int ActionIdDefaultValue = 0;

  private int actionId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ActionId {
    get { if ((_hasBits0 & 1) != 0) { return actionId_; } else { return ActionIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      actionId_ = value;
    }
  }
  /// <summary>Gets whether the "actionId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasActionId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "actionId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearActionId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "triggerNumber" field.</summary>
  public const int TriggerNumberFieldNumber = 2;
  private readonly static int TriggerNumberDefaultValue = 0;

  private int triggerNumber_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TriggerNumber {
    get { if ((_hasBits0 & 2) != 0) { return triggerNumber_; } else { return TriggerNumberDefaultValue; } }
    set {
      _hasBits0 |= 2;
      triggerNumber_ = value;
    }
  }
  /// <summary>Gets whether the "triggerNumber" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasTriggerNumber {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "triggerNumber" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearTriggerNumber() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PBAction);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PBAction other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ActionId != other.ActionId) return false;
    if (TriggerNumber != other.TriggerNumber) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasActionId) hash ^= ActionId.GetHashCode();
    if (HasTriggerNumber) hash ^= TriggerNumber.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasActionId) {
      output.WriteRawTag(8);
      output.WriteInt32(ActionId);
    }
    if (HasTriggerNumber) {
      output.WriteRawTag(16);
      output.WriteInt32(TriggerNumber);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasActionId) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActionId);
    }
    if (HasTriggerNumber) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(TriggerNumber);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PBAction other) {
    if (other == null) {
      return;
    }
    if (other.HasActionId) {
      ActionId = other.ActionId;
    }
    if (other.HasTriggerNumber) {
      TriggerNumber = other.TriggerNumber;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          ActionId = input.ReadInt32();
          break;
        }
        case 16: {
          TriggerNumber = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class PBMission : pb::IMessage<PBMission> {
  private static readonly pb::MessageParser<PBMission> _parser = new pb::MessageParser<PBMission>(() => new PBMission());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PBMission> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[42]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PBMission() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PBMission(PBMission other) : this() {
    _hasBits0 = other._hasBits0;
    missionId_ = other.missionId_;
    type_ = other.type_;
    actionId_ = other.actionId_;
    trigger_ = other.trigger_;
    currTrigger_ = other.currTrigger_;
    reward_ = other.reward_;
    isComplete_ = other.isComplete_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PBMission Clone() {
    return new PBMission(this);
  }

  /// <summary>Field number for the "missionId" field.</summary>
  public const int MissionIdFieldNumber = 1;
  private readonly static int MissionIdDefaultValue = 0;

  private int missionId_;
  /// <summary>
  ///任务id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MissionId {
    get { if ((_hasBits0 & 1) != 0) { return missionId_; } else { return MissionIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      missionId_ = value;
    }
  }
  /// <summary>Gets whether the "missionId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMissionId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "missionId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMissionId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 2;
  private readonly static global::MissionType TypeDefaultValue = global::MissionType.MissionDaily;

  private global::MissionType type_;
  /// <summary>
  ///任务类型
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MissionType Type {
    get { if ((_hasBits0 & 2) != 0) { return type_; } else { return TypeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      type_ = value;
    }
  }
  /// <summary>Gets whether the "type" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasType {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "type" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearType() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "actionId" field.</summary>
  public const int ActionIdFieldNumber = 3;
  private readonly static int ActionIdDefaultValue = 0;

  private int actionId_;
  /// <summary>
  ///任务条件id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ActionId {
    get { if ((_hasBits0 & 4) != 0) { return actionId_; } else { return ActionIdDefaultValue; } }
    set {
      _hasBits0 |= 4;
      actionId_ = value;
    }
  }
  /// <summary>Gets whether the "actionId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasActionId {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "actionId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearActionId() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "trigger" field.</summary>
  public const int TriggerFieldNumber = 4;
  private readonly static int TriggerDefaultValue = 0;

  private int trigger_;
  /// <summary>
  ///任务需要完成的数量要求
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Trigger {
    get { if ((_hasBits0 & 8) != 0) { return trigger_; } else { return TriggerDefaultValue; } }
    set {
      _hasBits0 |= 8;
      trigger_ = value;
    }
  }
  /// <summary>Gets whether the "trigger" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasTrigger {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "trigger" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearTrigger() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "currTrigger" field.</summary>
  public const int CurrTriggerFieldNumber = 5;
  private readonly static int CurrTriggerDefaultValue = 0;

  private int currTrigger_;
  /// <summary>
  ///当前完成的数量要求
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CurrTrigger {
    get { if ((_hasBits0 & 16) != 0) { return currTrigger_; } else { return CurrTriggerDefaultValue; } }
    set {
      _hasBits0 |= 16;
      currTrigger_ = value;
    }
  }
  /// <summary>Gets whether the "currTrigger" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCurrTrigger {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "currTrigger" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCurrTrigger() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "reward" field.</summary>
  public const int RewardFieldNumber = 6;
  private readonly static string RewardDefaultValue = "";

  private string reward_;
  /// <summary>
  ///任务奖励
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Reward {
    get { return reward_ ?? RewardDefaultValue; }
    set {
      reward_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "reward" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasReward {
    get { return reward_ != null; }
  }
  /// <summary>Clears the value of the "reward" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearReward() {
    reward_ = null;
  }

  /// <summary>Field number for the "isComplete" field.</summary>
  public const int IsCompleteFieldNumber = 7;
  private readonly static bool IsCompleteDefaultValue = false;

  private bool isComplete_;
  /// <summary>
  ///是否已领奖励
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsComplete {
    get { if ((_hasBits0 & 32) != 0) { return isComplete_; } else { return IsCompleteDefaultValue; } }
    set {
      _hasBits0 |= 32;
      isComplete_ = value;
    }
  }
  /// <summary>Gets whether the "isComplete" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasIsComplete {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "isComplete" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIsComplete() {
    _hasBits0 &= ~32;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PBMission);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PBMission other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (MissionId != other.MissionId) return false;
    if (Type != other.Type) return false;
    if (ActionId != other.ActionId) return false;
    if (Trigger != other.Trigger) return false;
    if (CurrTrigger != other.CurrTrigger) return false;
    if (Reward != other.Reward) return false;
    if (IsComplete != other.IsComplete) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasMissionId) hash ^= MissionId.GetHashCode();
    if (HasType) hash ^= Type.GetHashCode();
    if (HasActionId) hash ^= ActionId.GetHashCode();
    if (HasTrigger) hash ^= Trigger.GetHashCode();
    if (HasCurrTrigger) hash ^= CurrTrigger.GetHashCode();
    if (HasReward) hash ^= Reward.GetHashCode();
    if (HasIsComplete) hash ^= IsComplete.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasMissionId) {
      output.WriteRawTag(8);
      output.WriteInt32(MissionId);
    }
    if (HasType) {
      output.WriteRawTag(16);
      output.WriteEnum((int) Type);
    }
    if (HasActionId) {
      output.WriteRawTag(24);
      output.WriteInt32(ActionId);
    }
    if (HasTrigger) {
      output.WriteRawTag(32);
      output.WriteInt32(Trigger);
    }
    if (HasCurrTrigger) {
      output.WriteRawTag(40);
      output.WriteInt32(CurrTrigger);
    }
    if (HasReward) {
      output.WriteRawTag(50);
      output.WriteString(Reward);
    }
    if (HasIsComplete) {
      output.WriteRawTag(56);
      output.WriteBool(IsComplete);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasMissionId) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MissionId);
    }
    if (HasType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (HasActionId) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActionId);
    }
    if (HasTrigger) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Trigger);
    }
    if (HasCurrTrigger) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrTrigger);
    }
    if (HasReward) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Reward);
    }
    if (HasIsComplete) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PBMission other) {
    if (other == null) {
      return;
    }
    if (other.HasMissionId) {
      MissionId = other.MissionId;
    }
    if (other.HasType) {
      Type = other.Type;
    }
    if (other.HasActionId) {
      ActionId = other.ActionId;
    }
    if (other.HasTrigger) {
      Trigger = other.Trigger;
    }
    if (other.HasCurrTrigger) {
      CurrTrigger = other.CurrTrigger;
    }
    if (other.HasReward) {
      Reward = other.Reward;
    }
    if (other.HasIsComplete) {
      IsComplete = other.IsComplete;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          MissionId = input.ReadInt32();
          break;
        }
        case 16: {
          Type = (global::MissionType) input.ReadEnum();
          break;
        }
        case 24: {
          ActionId = input.ReadInt32();
          break;
        }
        case 32: {
          Trigger = input.ReadInt32();
          break;
        }
        case 40: {
          CurrTrigger = input.ReadInt32();
          break;
        }
        case 50: {
          Reward = input.ReadString();
          break;
        }
        case 56: {
          IsComplete = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class PBRankReward : pb::IMessage<PBRankReward> {
  private static readonly pb::MessageParser<PBRankReward> _parser = new pb::MessageParser<PBRankReward>(() => new PBRankReward());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PBRankReward> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[43]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PBRankReward() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PBRankReward(PBRankReward other) : this() {
    _hasBits0 = other._hasBits0;
    rankBatch_ = other.rankBatch_;
    rank_ = other.rank_;
    rankRate_ = other.rankRate_;
    content_ = other.content_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PBRankReward Clone() {
    return new PBRankReward(this);
  }

  /// <summary>Field number for the "rankBatch" field.</summary>
  public const int RankBatchFieldNumber = 1;
  private readonly static int RankBatchDefaultValue = 0;

  private int rankBatch_;
  /// <summary>
  ///获得奖励的排行榜批次
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RankBatch {
    get { if ((_hasBits0 & 1) != 0) { return rankBatch_; } else { return RankBatchDefaultValue; } }
    set {
      _hasBits0 |= 1;
      rankBatch_ = value;
    }
  }
  /// <summary>Gets whether the "rankBatch" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRankBatch {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "rankBatch" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRankBatch() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "rank" field.</summary>
  public const int RankFieldNumber = 2;
  private readonly static long RankDefaultValue = 0L;

  private long rank_;
  /// <summary>
  ///上期排行榜名次
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Rank {
    get { if ((_hasBits0 & 2) != 0) { return rank_; } else { return RankDefaultValue; } }
    set {
      _hasBits0 |= 2;
      rank_ = value;
    }
  }
  /// <summary>Gets whether the "rank" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRank {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "rank" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRank() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "rankRate" field.</summary>
  public const int RankRateFieldNumber = 3;
  private readonly static float RankRateDefaultValue = 0F;

  private float rankRate_;
  /// <summary>
  ///上期排行榜名次百分比
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float RankRate {
    get { if ((_hasBits0 & 4) != 0) { return rankRate_; } else { return RankRateDefaultValue; } }
    set {
      _hasBits0 |= 4;
      rankRate_ = value;
    }
  }
  /// <summary>Gets whether the "rankRate" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRankRate {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "rankRate" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRankRate() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "content" field.</summary>
  public const int ContentFieldNumber = 4;
  private static readonly pb::FieldCodec<global::ProductContent> _repeated_content_codec
      = pb::FieldCodec.ForMessage(34, global::ProductContent.Parser);
  private readonly pbc::RepeatedField<global::ProductContent> content_ = new pbc::RepeatedField<global::ProductContent>();
  /// <summary>
  ///排行榜奖励
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ProductContent> Content {
    get { return content_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PBRankReward);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PBRankReward other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RankBatch != other.RankBatch) return false;
    if (Rank != other.Rank) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(RankRate, other.RankRate)) return false;
    if(!content_.Equals(other.content_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasRankBatch) hash ^= RankBatch.GetHashCode();
    if (HasRank) hash ^= Rank.GetHashCode();
    if (HasRankRate) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(RankRate);
    hash ^= content_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasRankBatch) {
      output.WriteRawTag(8);
      output.WriteInt32(RankBatch);
    }
    if (HasRank) {
      output.WriteRawTag(16);
      output.WriteInt64(Rank);
    }
    if (HasRankRate) {
      output.WriteRawTag(29);
      output.WriteFloat(RankRate);
    }
    content_.WriteTo(output, _repeated_content_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasRankBatch) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RankBatch);
    }
    if (HasRank) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Rank);
    }
    if (HasRankRate) {
      size += 1 + 4;
    }
    size += content_.CalculateSize(_repeated_content_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PBRankReward other) {
    if (other == null) {
      return;
    }
    if (other.HasRankBatch) {
      RankBatch = other.RankBatch;
    }
    if (other.HasRank) {
      Rank = other.Rank;
    }
    if (other.HasRankRate) {
      RankRate = other.RankRate;
    }
    content_.Add(other.content_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          RankBatch = input.ReadInt32();
          break;
        }
        case 16: {
          Rank = input.ReadInt64();
          break;
        }
        case 29: {
          RankRate = input.ReadFloat();
          break;
        }
        case 34: {
          content_.AddEntriesFrom(input, _repeated_content_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
///PB结果
/// </summary>
public sealed partial class PBResult : pb::IMessage<PBResult> {
  private static readonly pb::MessageParser<PBResult> _parser = new pb::MessageParser<PBResult>(() => new PBResult());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PBResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[44]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PBResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PBResult(PBResult other) : this() {
    _hasBits0 = other._hasBits0;
    code_ = other.code_;
    desc_ = other.desc_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PBResult Clone() {
    return new PBResult(this);
  }

  /// <summary>Field number for the "code" field.</summary>
  public const int CodeFieldNumber = 1;
  private readonly static int CodeDefaultValue = 0;

  private int code_;
  /// <summary>
  ///返回code
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Code {
    get { if ((_hasBits0 & 1) != 0) { return code_; } else { return CodeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      code_ = value;
    }
  }
  /// <summary>Gets whether the "code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCode {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCode() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "desc" field.</summary>
  public const int DescFieldNumber = 2;
  private readonly static string DescDefaultValue = "";

  private string desc_;
  /// <summary>
  ///返回描述
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Desc {
    get { return desc_ ?? DescDefaultValue; }
    set {
      desc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "desc" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDesc {
    get { return desc_ != null; }
  }
  /// <summary>Clears the value of the "desc" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDesc() {
    desc_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PBResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PBResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Code != other.Code) return false;
    if (Desc != other.Desc) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasCode) hash ^= Code.GetHashCode();
    if (HasDesc) hash ^= Desc.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasCode) {
      output.WriteRawTag(8);
      output.WriteInt32(Code);
    }
    if (HasDesc) {
      output.WriteRawTag(18);
      output.WriteString(Desc);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasCode) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
    }
    if (HasDesc) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Desc);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PBResult other) {
    if (other == null) {
      return;
    }
    if (other.HasCode) {
      Code = other.Code;
    }
    if (other.HasDesc) {
      Desc = other.Desc;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Code = input.ReadInt32();
          break;
        }
        case 18: {
          Desc = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class PBPlayerFishLevelInfo : pb::IMessage<PBPlayerFishLevelInfo> {
  private static readonly pb::MessageParser<PBPlayerFishLevelInfo> _parser = new pb::MessageParser<PBPlayerFishLevelInfo>(() => new PBPlayerFishLevelInfo());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PBPlayerFishLevelInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[45]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PBPlayerFishLevelInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PBPlayerFishLevelInfo(PBPlayerFishLevelInfo other) : this() {
    _hasBits0 = other._hasBits0;
    fishId_ = other.fishId_;
    fishLevel_ = other.fishLevel_;
    fishChip_ = other.fishChip_;
    rankLevel_ = other.rankLevel_;
    currentWin_ = other.currentWin_;
    maxWin_ = other.maxWin_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PBPlayerFishLevelInfo Clone() {
    return new PBPlayerFishLevelInfo(this);
  }

  /// <summary>Field number for the "fishId" field.</summary>
  public const int FishIdFieldNumber = 1;
  private readonly static int FishIdDefaultValue = 0;

  private int fishId_;
  /// <summary>
  /// 魚ID，對照FishDataTable的ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FishId {
    get { if ((_hasBits0 & 1) != 0) { return fishId_; } else { return FishIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      fishId_ = value;
    }
  }
  /// <summary>Gets whether the "fishId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasFishId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "fishId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearFishId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "fishLevel" field.</summary>
  public const int FishLevelFieldNumber = 2;
  private readonly static int FishLevelDefaultValue = 0;

  private int fishLevel_;
  /// <summary>
  /// 当前鱼等级
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FishLevel {
    get { if ((_hasBits0 & 2) != 0) { return fishLevel_; } else { return FishLevelDefaultValue; } }
    set {
      _hasBits0 |= 2;
      fishLevel_ = value;
    }
  }
  /// <summary>Gets whether the "fishLevel" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasFishLevel {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "fishLevel" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearFishLevel() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "fishChip" field.</summary>
  public const int FishChipFieldNumber = 3;
  private readonly static int FishChipDefaultValue = 0;

  private int fishChip_;
  /// <summary>
  /// 升級用的魚碎片
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FishChip {
    get { if ((_hasBits0 & 4) != 0) { return fishChip_; } else { return FishChipDefaultValue; } }
    set {
      _hasBits0 |= 4;
      fishChip_ = value;
    }
  }
  /// <summary>Gets whether the "fishChip" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasFishChip {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "fishChip" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearFishChip() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "rankLevel" field.</summary>
  public const int RankLevelFieldNumber = 4;
  private readonly static int RankLevelDefaultValue = 0;

  private int rankLevel_;
  /// <summary>
  /// 段位等级
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RankLevel {
    get { if ((_hasBits0 & 8) != 0) { return rankLevel_; } else { return RankLevelDefaultValue; } }
    set {
      _hasBits0 |= 8;
      rankLevel_ = value;
    }
  }
  /// <summary>Gets whether the "rankLevel" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRankLevel {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "rankLevel" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRankLevel() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "currentWin" field.</summary>
  public const int CurrentWinFieldNumber = 5;
  private readonly static int CurrentWinDefaultValue = 0;

  private int currentWin_;
  /// <summary>
  /// 当前连胜
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CurrentWin {
    get { if ((_hasBits0 & 16) != 0) { return currentWin_; } else { return CurrentWinDefaultValue; } }
    set {
      _hasBits0 |= 16;
      currentWin_ = value;
    }
  }
  /// <summary>Gets whether the "currentWin" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCurrentWin {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "currentWin" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCurrentWin() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "maxWin" field.</summary>
  public const int MaxWinFieldNumber = 6;
  private readonly static int MaxWinDefaultValue = 0;

  private int maxWin_;
  /// <summary>
  /// 最大连胜数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int MaxWin {
    get { if ((_hasBits0 & 32) != 0) { return maxWin_; } else { return MaxWinDefaultValue; } }
    set {
      _hasBits0 |= 32;
      maxWin_ = value;
    }
  }
  /// <summary>Gets whether the "maxWin" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMaxWin {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "maxWin" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMaxWin() {
    _hasBits0 &= ~32;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PBPlayerFishLevelInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PBPlayerFishLevelInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (FishId != other.FishId) return false;
    if (FishLevel != other.FishLevel) return false;
    if (FishChip != other.FishChip) return false;
    if (RankLevel != other.RankLevel) return false;
    if (CurrentWin != other.CurrentWin) return false;
    if (MaxWin != other.MaxWin) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasFishId) hash ^= FishId.GetHashCode();
    if (HasFishLevel) hash ^= FishLevel.GetHashCode();
    if (HasFishChip) hash ^= FishChip.GetHashCode();
    if (HasRankLevel) hash ^= RankLevel.GetHashCode();
    if (HasCurrentWin) hash ^= CurrentWin.GetHashCode();
    if (HasMaxWin) hash ^= MaxWin.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasFishId) {
      output.WriteRawTag(8);
      output.WriteInt32(FishId);
    }
    if (HasFishLevel) {
      output.WriteRawTag(16);
      output.WriteInt32(FishLevel);
    }
    if (HasFishChip) {
      output.WriteRawTag(24);
      output.WriteInt32(FishChip);
    }
    if (HasRankLevel) {
      output.WriteRawTag(32);
      output.WriteInt32(RankLevel);
    }
    if (HasCurrentWin) {
      output.WriteRawTag(40);
      output.WriteInt32(CurrentWin);
    }
    if (HasMaxWin) {
      output.WriteRawTag(48);
      output.WriteInt32(MaxWin);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasFishId) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishId);
    }
    if (HasFishLevel) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishLevel);
    }
    if (HasFishChip) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishChip);
    }
    if (HasRankLevel) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RankLevel);
    }
    if (HasCurrentWin) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentWin);
    }
    if (HasMaxWin) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxWin);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PBPlayerFishLevelInfo other) {
    if (other == null) {
      return;
    }
    if (other.HasFishId) {
      FishId = other.FishId;
    }
    if (other.HasFishLevel) {
      FishLevel = other.FishLevel;
    }
    if (other.HasFishChip) {
      FishChip = other.FishChip;
    }
    if (other.HasRankLevel) {
      RankLevel = other.RankLevel;
    }
    if (other.HasCurrentWin) {
      CurrentWin = other.CurrentWin;
    }
    if (other.HasMaxWin) {
      MaxWin = other.MaxWin;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          FishId = input.ReadInt32();
          break;
        }
        case 16: {
          FishLevel = input.ReadInt32();
          break;
        }
        case 24: {
          FishChip = input.ReadInt32();
          break;
        }
        case 32: {
          RankLevel = input.ReadInt32();
          break;
        }
        case 40: {
          CurrentWin = input.ReadInt32();
          break;
        }
        case 48: {
          MaxWin = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///玩家模型
/// </summary>
public sealed partial class PBPlayer : pb::IMessage<PBPlayer> {
  private static readonly pb::MessageParser<PBPlayer> _parser = new pb::MessageParser<PBPlayer>(() => new PBPlayer());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PBPlayer> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[46]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PBPlayer() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PBPlayer(PBPlayer other) : this() {
    _hasBits0 = other._hasBits0;
    playerId_ = other.playerId_;
    nickname_ = other.nickname_;
    faceIconId_ = other.faceIconId_;
    regTime_ = other.regTime_;
    loginLast_ = other.loginLast_;
    diamond_ = other.diamond_;
    gold_ = other.gold_;
    power_ = other.power_;
    powerAt_ = other.powerAt_;
    fightFish_ = other.fightFish_;
    aryPlayerFishInfo_ = other.aryPlayerFishInfo_.Clone();
    gettedBoundsId_ = other.gettedBoundsId_.Clone();
    advertRewardRemainingCnt_ = other.advertRewardRemainingCnt_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PBPlayer Clone() {
    return new PBPlayer(this);
  }

  /// <summary>Field number for the "playerId" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private readonly static long PlayerIdDefaultValue = 0L;

  private long playerId_;
  /// <summary>
  ///玩家ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PlayerId {
    get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      playerId_ = value;
    }
  }
  /// <summary>Gets whether the "playerId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPlayerId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "playerId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPlayerId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "nickname" field.</summary>
  public const int NicknameFieldNumber = 2;
  private readonly static string NicknameDefaultValue = "";

  private string nickname_;
  /// <summary>
  ///名字
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Nickname {
    get { return nickname_ ?? NicknameDefaultValue; }
    set {
      nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "nickname" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasNickname {
    get { return nickname_ != null; }
  }
  /// <summary>Clears the value of the "nickname" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearNickname() {
    nickname_ = null;
  }

  /// <summary>Field number for the "faceIconId" field.</summary>
  public const int FaceIconIdFieldNumber = 3;
  private readonly static int FaceIconIdDefaultValue = 0;

  private int faceIconId_;
  /// <summary>
  ///头像ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FaceIconId {
    get { if ((_hasBits0 & 2) != 0) { return faceIconId_; } else { return FaceIconIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      faceIconId_ = value;
    }
  }
  /// <summary>Gets whether the "faceIconId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasFaceIconId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "faceIconId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearFaceIconId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "regTime" field.</summary>
  public const int RegTimeFieldNumber = 4;
  private readonly static long RegTimeDefaultValue = 0L;

  private long regTime_;
  /// <summary>
  ///注册时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long RegTime {
    get { if ((_hasBits0 & 4) != 0) { return regTime_; } else { return RegTimeDefaultValue; } }
    set {
      _hasBits0 |= 4;
      regTime_ = value;
    }
  }
  /// <summary>Gets whether the "regTime" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRegTime {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "regTime" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRegTime() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "loginLast" field.</summary>
  public const int LoginLastFieldNumber = 5;
  private readonly static long LoginLastDefaultValue = 0L;

  private long loginLast_;
  /// <summary>
  ///上次登入时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long LoginLast {
    get { if ((_hasBits0 & 8) != 0) { return loginLast_; } else { return LoginLastDefaultValue; } }
    set {
      _hasBits0 |= 8;
      loginLast_ = value;
    }
  }
  /// <summary>Gets whether the "loginLast" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasLoginLast {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "loginLast" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearLoginLast() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "diamond" field.</summary>
  public const int DiamondFieldNumber = 6;
  private readonly static int DiamondDefaultValue = 0;

  private int diamond_;
  /// <summary>
  ///钻石
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Diamond {
    get { if ((_hasBits0 & 16) != 0) { return diamond_; } else { return DiamondDefaultValue; } }
    set {
      _hasBits0 |= 16;
      diamond_ = value;
    }
  }
  /// <summary>Gets whether the "diamond" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDiamond {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "diamond" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDiamond() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "gold" field.</summary>
  public const int GoldFieldNumber = 7;
  private readonly static int GoldDefaultValue = 0;

  private int gold_;
  /// <summary>
  ///金币
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Gold {
    get { if ((_hasBits0 & 32) != 0) { return gold_; } else { return GoldDefaultValue; } }
    set {
      _hasBits0 |= 32;
      gold_ = value;
    }
  }
  /// <summary>Gets whether the "gold" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasGold {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "gold" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearGold() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "power" field.</summary>
  public const int PowerFieldNumber = 8;
  private readonly static int PowerDefaultValue = 0;

  private int power_;
  /// <summary>
  ///体力
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Power {
    get { if ((_hasBits0 & 64) != 0) { return power_; } else { return PowerDefaultValue; } }
    set {
      _hasBits0 |= 64;
      power_ = value;
    }
  }
  /// <summary>Gets whether the "power" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPower {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "power" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPower() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "powerAt" field.</summary>
  public const int PowerAtFieldNumber = 9;
  private readonly static long PowerAtDefaultValue = 0L;

  private long powerAt_;
  /// <summary>
  ///体力时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PowerAt {
    get { if ((_hasBits0 & 128) != 0) { return powerAt_; } else { return PowerAtDefaultValue; } }
    set {
      _hasBits0 |= 128;
      powerAt_ = value;
    }
  }
  /// <summary>Gets whether the "powerAt" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPowerAt {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "powerAt" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPowerAt() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "fightFish" field.</summary>
  public const int FightFishFieldNumber = 10;
  private readonly static int FightFishDefaultValue = 0;

  private int fightFish_;
  /// <summary>
  ///出战鱼
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FightFish {
    get { if ((_hasBits0 & 256) != 0) { return fightFish_; } else { return FightFishDefaultValue; } }
    set {
      _hasBits0 |= 256;
      fightFish_ = value;
    }
  }
  /// <summary>Gets whether the "fightFish" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasFightFish {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "fightFish" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearFightFish() {
    _hasBits0 &= ~256;
  }

  /// <summary>Field number for the "aryPlayerFishInfo" field.</summary>
  public const int AryPlayerFishInfoFieldNumber = 11;
  private static readonly pb::FieldCodec<global::PBPlayerFishLevelInfo> _repeated_aryPlayerFishInfo_codec
      = pb::FieldCodec.ForMessage(90, global::PBPlayerFishLevelInfo.Parser);
  private readonly pbc::RepeatedField<global::PBPlayerFishLevelInfo> aryPlayerFishInfo_ = new pbc::RepeatedField<global::PBPlayerFishLevelInfo>();
  /// <summary>
  /// 玩家鱼信息
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PBPlayerFishLevelInfo> AryPlayerFishInfo {
    get { return aryPlayerFishInfo_; }
  }

  /// <summary>Field number for the "gettedBoundsId" field.</summary>
  public const int GettedBoundsIdFieldNumber = 12;
  private static readonly pb::FieldCodec<int> _repeated_gettedBoundsId_codec
      = pb::FieldCodec.ForInt32(96);
  private readonly pbc::RepeatedField<int> gettedBoundsId_ = new pbc::RepeatedField<int>();
  /// <summary>
  ///已获得奖励ID 数组
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> GettedBoundsId {
    get { return gettedBoundsId_; }
  }

  /// <summary>Field number for the "advertRewardRemainingCnt" field.</summary>
  public const int AdvertRewardRemainingCntFieldNumber = 13;
  private readonly static int AdvertRewardRemainingCntDefaultValue = 0;

  private int advertRewardRemainingCnt_;
  /// <summary>
  /// 剩余观看广告次数
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int AdvertRewardRemainingCnt {
    get { if ((_hasBits0 & 512) != 0) { return advertRewardRemainingCnt_; } else { return AdvertRewardRemainingCntDefaultValue; } }
    set {
      _hasBits0 |= 512;
      advertRewardRemainingCnt_ = value;
    }
  }
  /// <summary>Gets whether the "advertRewardRemainingCnt" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAdvertRewardRemainingCnt {
    get { return (_hasBits0 & 512) != 0; }
  }
  /// <summary>Clears the value of the "advertRewardRemainingCnt" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAdvertRewardRemainingCnt() {
    _hasBits0 &= ~512;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PBPlayer);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PBPlayer other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (Nickname != other.Nickname) return false;
    if (FaceIconId != other.FaceIconId) return false;
    if (RegTime != other.RegTime) return false;
    if (LoginLast != other.LoginLast) return false;
    if (Diamond != other.Diamond) return false;
    if (Gold != other.Gold) return false;
    if (Power != other.Power) return false;
    if (PowerAt != other.PowerAt) return false;
    if (FightFish != other.FightFish) return false;
    if(!aryPlayerFishInfo_.Equals(other.aryPlayerFishInfo_)) return false;
    if(!gettedBoundsId_.Equals(other.gettedBoundsId_)) return false;
    if (AdvertRewardRemainingCnt != other.AdvertRewardRemainingCnt) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPlayerId) hash ^= PlayerId.GetHashCode();
    if (HasNickname) hash ^= Nickname.GetHashCode();
    if (HasFaceIconId) hash ^= FaceIconId.GetHashCode();
    if (HasRegTime) hash ^= RegTime.GetHashCode();
    if (HasLoginLast) hash ^= LoginLast.GetHashCode();
    if (HasDiamond) hash ^= Diamond.GetHashCode();
    if (HasGold) hash ^= Gold.GetHashCode();
    if (HasPower) hash ^= Power.GetHashCode();
    if (HasPowerAt) hash ^= PowerAt.GetHashCode();
    if (HasFightFish) hash ^= FightFish.GetHashCode();
    hash ^= aryPlayerFishInfo_.GetHashCode();
    hash ^= gettedBoundsId_.GetHashCode();
    if (HasAdvertRewardRemainingCnt) hash ^= AdvertRewardRemainingCnt.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPlayerId) {
      output.WriteRawTag(8);
      output.WriteInt64(PlayerId);
    }
    if (HasNickname) {
      output.WriteRawTag(18);
      output.WriteString(Nickname);
    }
    if (HasFaceIconId) {
      output.WriteRawTag(24);
      output.WriteInt32(FaceIconId);
    }
    if (HasRegTime) {
      output.WriteRawTag(32);
      output.WriteInt64(RegTime);
    }
    if (HasLoginLast) {
      output.WriteRawTag(40);
      output.WriteInt64(LoginLast);
    }
    if (HasDiamond) {
      output.WriteRawTag(48);
      output.WriteInt32(Diamond);
    }
    if (HasGold) {
      output.WriteRawTag(56);
      output.WriteInt32(Gold);
    }
    if (HasPower) {
      output.WriteRawTag(64);
      output.WriteInt32(Power);
    }
    if (HasPowerAt) {
      output.WriteRawTag(72);
      output.WriteInt64(PowerAt);
    }
    if (HasFightFish) {
      output.WriteRawTag(80);
      output.WriteInt32(FightFish);
    }
    aryPlayerFishInfo_.WriteTo(output, _repeated_aryPlayerFishInfo_codec);
    gettedBoundsId_.WriteTo(output, _repeated_gettedBoundsId_codec);
    if (HasAdvertRewardRemainingCnt) {
      output.WriteRawTag(104);
      output.WriteInt32(AdvertRewardRemainingCnt);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPlayerId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
    }
    if (HasNickname) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
    }
    if (HasFaceIconId) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FaceIconId);
    }
    if (HasRegTime) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(RegTime);
    }
    if (HasLoginLast) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(LoginLast);
    }
    if (HasDiamond) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Diamond);
    }
    if (HasGold) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gold);
    }
    if (HasPower) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Power);
    }
    if (HasPowerAt) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PowerAt);
    }
    if (HasFightFish) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FightFish);
    }
    size += aryPlayerFishInfo_.CalculateSize(_repeated_aryPlayerFishInfo_codec);
    size += gettedBoundsId_.CalculateSize(_repeated_gettedBoundsId_codec);
    if (HasAdvertRewardRemainingCnt) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AdvertRewardRemainingCnt);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PBPlayer other) {
    if (other == null) {
      return;
    }
    if (other.HasPlayerId) {
      PlayerId = other.PlayerId;
    }
    if (other.HasNickname) {
      Nickname = other.Nickname;
    }
    if (other.HasFaceIconId) {
      FaceIconId = other.FaceIconId;
    }
    if (other.HasRegTime) {
      RegTime = other.RegTime;
    }
    if (other.HasLoginLast) {
      LoginLast = other.LoginLast;
    }
    if (other.HasDiamond) {
      Diamond = other.Diamond;
    }
    if (other.HasGold) {
      Gold = other.Gold;
    }
    if (other.HasPower) {
      Power = other.Power;
    }
    if (other.HasPowerAt) {
      PowerAt = other.PowerAt;
    }
    if (other.HasFightFish) {
      FightFish = other.FightFish;
    }
    aryPlayerFishInfo_.Add(other.aryPlayerFishInfo_);
    gettedBoundsId_.Add(other.gettedBoundsId_);
    if (other.HasAdvertRewardRemainingCnt) {
      AdvertRewardRemainingCnt = other.AdvertRewardRemainingCnt;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadInt64();
          break;
        }
        case 18: {
          Nickname = input.ReadString();
          break;
        }
        case 24: {
          FaceIconId = input.ReadInt32();
          break;
        }
        case 32: {
          RegTime = input.ReadInt64();
          break;
        }
        case 40: {
          LoginLast = input.ReadInt64();
          break;
        }
        case 48: {
          Diamond = input.ReadInt32();
          break;
        }
        case 56: {
          Gold = input.ReadInt32();
          break;
        }
        case 64: {
          Power = input.ReadInt32();
          break;
        }
        case 72: {
          PowerAt = input.ReadInt64();
          break;
        }
        case 80: {
          FightFish = input.ReadInt32();
          break;
        }
        case 90: {
          aryPlayerFishInfo_.AddEntriesFrom(input, _repeated_aryPlayerFishInfo_codec);
          break;
        }
        case 98:
        case 96: {
          gettedBoundsId_.AddEntriesFrom(input, _repeated_gettedBoundsId_codec);
          break;
        }
        case 104: {
          AdvertRewardRemainingCnt = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 敵人
/// </summary>
public sealed partial class PBEnemyDataInfo : pb::IMessage<PBEnemyDataInfo> {
  private static readonly pb::MessageParser<PBEnemyDataInfo> _parser = new pb::MessageParser<PBEnemyDataInfo>(() => new PBEnemyDataInfo());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PBEnemyDataInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[47]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PBEnemyDataInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PBEnemyDataInfo(PBEnemyDataInfo other) : this() {
    _hasBits0 = other._hasBits0;
    fishId_ = other.fishId_;
    fishLevel_ = other.fishLevel_;
    fishCountMax_ = other.fishCountMax_;
    fishCountMin_ = other.fishCountMin_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PBEnemyDataInfo Clone() {
    return new PBEnemyDataInfo(this);
  }

  /// <summary>Field number for the "fishId" field.</summary>
  public const int FishIdFieldNumber = 1;
  private readonly static int FishIdDefaultValue = 0;

  private int fishId_;
  /// <summary>
  /// 魚ID，對照FishDataTable的ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FishId {
    get { if ((_hasBits0 & 1) != 0) { return fishId_; } else { return FishIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      fishId_ = value;
    }
  }
  /// <summary>Gets whether the "fishId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasFishId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "fishId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearFishId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "fishLevel" field.</summary>
  public const int FishLevelFieldNumber = 2;
  private readonly static int FishLevelDefaultValue = 0;

  private int fishLevel_;
  /// <summary>
  /// 魚等级
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FishLevel {
    get { if ((_hasBits0 & 2) != 0) { return fishLevel_; } else { return FishLevelDefaultValue; } }
    set {
      _hasBits0 |= 2;
      fishLevel_ = value;
    }
  }
  /// <summary>Gets whether the "fishLevel" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasFishLevel {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "fishLevel" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearFishLevel() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "fishCountMax" field.</summary>
  public const int FishCountMaxFieldNumber = 3;
  private readonly static int FishCountMaxDefaultValue = 0;

  private int fishCountMax_;
  /// <summary>
  /// 最大数量
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FishCountMax {
    get { if ((_hasBits0 & 4) != 0) { return fishCountMax_; } else { return FishCountMaxDefaultValue; } }
    set {
      _hasBits0 |= 4;
      fishCountMax_ = value;
    }
  }
  /// <summary>Gets whether the "fishCountMax" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasFishCountMax {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "fishCountMax" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearFishCountMax() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "fishCountMin" field.</summary>
  public const int FishCountMinFieldNumber = 4;
  private readonly static int FishCountMinDefaultValue = 0;

  private int fishCountMin_;
  /// <summary>
  /// 最小数量
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FishCountMin {
    get { if ((_hasBits0 & 8) != 0) { return fishCountMin_; } else { return FishCountMinDefaultValue; } }
    set {
      _hasBits0 |= 8;
      fishCountMin_ = value;
    }
  }
  /// <summary>Gets whether the "fishCountMin" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasFishCountMin {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "fishCountMin" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearFishCountMin() {
    _hasBits0 &= ~8;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PBEnemyDataInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PBEnemyDataInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (FishId != other.FishId) return false;
    if (FishLevel != other.FishLevel) return false;
    if (FishCountMax != other.FishCountMax) return false;
    if (FishCountMin != other.FishCountMin) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasFishId) hash ^= FishId.GetHashCode();
    if (HasFishLevel) hash ^= FishLevel.GetHashCode();
    if (HasFishCountMax) hash ^= FishCountMax.GetHashCode();
    if (HasFishCountMin) hash ^= FishCountMin.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasFishId) {
      output.WriteRawTag(8);
      output.WriteInt32(FishId);
    }
    if (HasFishLevel) {
      output.WriteRawTag(16);
      output.WriteInt32(FishLevel);
    }
    if (HasFishCountMax) {
      output.WriteRawTag(24);
      output.WriteInt32(FishCountMax);
    }
    if (HasFishCountMin) {
      output.WriteRawTag(32);
      output.WriteInt32(FishCountMin);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasFishId) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishId);
    }
    if (HasFishLevel) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishLevel);
    }
    if (HasFishCountMax) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishCountMax);
    }
    if (HasFishCountMin) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishCountMin);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PBEnemyDataInfo other) {
    if (other == null) {
      return;
    }
    if (other.HasFishId) {
      FishId = other.FishId;
    }
    if (other.HasFishLevel) {
      FishLevel = other.FishLevel;
    }
    if (other.HasFishCountMax) {
      FishCountMax = other.FishCountMax;
    }
    if (other.HasFishCountMin) {
      FishCountMin = other.FishCountMin;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          FishId = input.ReadInt32();
          break;
        }
        case 16: {
          FishLevel = input.ReadInt32();
          break;
        }
        case 24: {
          FishCountMax = input.ReadInt32();
          break;
        }
        case 32: {
          FishCountMin = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 机器人
/// </summary>
public sealed partial class PBRobotDataInfo : pb::IMessage<PBRobotDataInfo> {
  private static readonly pb::MessageParser<PBRobotDataInfo> _parser = new pb::MessageParser<PBRobotDataInfo>(() => new PBRobotDataInfo());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PBRobotDataInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[48]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PBRobotDataInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PBRobotDataInfo(PBRobotDataInfo other) : this() {
    _hasBits0 = other._hasBits0;
    fishId_ = other.fishId_;
    aiId_ = other.aiId_;
    level_ = other.level_;
    growth_ = other.growth_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PBRobotDataInfo Clone() {
    return new PBRobotDataInfo(this);
  }

  /// <summary>Field number for the "fishId" field.</summary>
  public const int FishIdFieldNumber = 1;
  private readonly static int FishIdDefaultValue = 0;

  private int fishId_;
  /// <summary>
  /// 魚ID，對照RobotData.xlsx
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FishId {
    get { if ((_hasBits0 & 1) != 0) { return fishId_; } else { return FishIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      fishId_ = value;
    }
  }
  /// <summary>Gets whether the "fishId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasFishId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "fishId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearFishId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "aiId" field.</summary>
  public const int AiIdFieldNumber = 2;
  private readonly static int AiIdDefaultValue = 0;

  private int aiId_;
  /// <summary>
  /// 参照基表RobotData.xlsx
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int AiId {
    get { if ((_hasBits0 & 2) != 0) { return aiId_; } else { return AiIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      aiId_ = value;
    }
  }
  /// <summary>Gets whether the "aiId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAiId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "aiId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAiId() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "level" field.</summary>
  public const int LevelFieldNumber = 3;
  private readonly static int LevelDefaultValue = 0;

  private int level_;
  /// <summary>
  /// 参照基表RobotData.xlsx
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Level {
    get { if ((_hasBits0 & 4) != 0) { return level_; } else { return LevelDefaultValue; } }
    set {
      _hasBits0 |= 4;
      level_ = value;
    }
  }
  /// <summary>Gets whether the "level" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasLevel {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "level" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearLevel() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "growth" field.</summary>
  public const int GrowthFieldNumber = 4;
  private readonly static int GrowthDefaultValue = 0;

  private int growth_;
  /// <summary>
  /// 参照基表RobotData.xlsx
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Growth {
    get { if ((_hasBits0 & 8) != 0) { return growth_; } else { return GrowthDefaultValue; } }
    set {
      _hasBits0 |= 8;
      growth_ = value;
    }
  }
  /// <summary>Gets whether the "growth" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasGrowth {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "growth" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearGrowth() {
    _hasBits0 &= ~8;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PBRobotDataInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PBRobotDataInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (FishId != other.FishId) return false;
    if (AiId != other.AiId) return false;
    if (Level != other.Level) return false;
    if (Growth != other.Growth) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasFishId) hash ^= FishId.GetHashCode();
    if (HasAiId) hash ^= AiId.GetHashCode();
    if (HasLevel) hash ^= Level.GetHashCode();
    if (HasGrowth) hash ^= Growth.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasFishId) {
      output.WriteRawTag(8);
      output.WriteInt32(FishId);
    }
    if (HasAiId) {
      output.WriteRawTag(16);
      output.WriteInt32(AiId);
    }
    if (HasLevel) {
      output.WriteRawTag(24);
      output.WriteInt32(Level);
    }
    if (HasGrowth) {
      output.WriteRawTag(32);
      output.WriteInt32(Growth);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasFishId) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishId);
    }
    if (HasAiId) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AiId);
    }
    if (HasLevel) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
    }
    if (HasGrowth) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Growth);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PBRobotDataInfo other) {
    if (other == null) {
      return;
    }
    if (other.HasFishId) {
      FishId = other.FishId;
    }
    if (other.HasAiId) {
      AiId = other.AiId;
    }
    if (other.HasLevel) {
      Level = other.Level;
    }
    if (other.HasGrowth) {
      Growth = other.Growth;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          FishId = input.ReadInt32();
          break;
        }
        case 16: {
          AiId = input.ReadInt32();
          break;
        }
        case 24: {
          Level = input.ReadInt32();
          break;
        }
        case 32: {
          Growth = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///商店出售物品
/// </summary>
public sealed partial class ShopBillingProduct : pb::IMessage<ShopBillingProduct> {
  private static readonly pb::MessageParser<ShopBillingProduct> _parser = new pb::MessageParser<ShopBillingProduct>(() => new ShopBillingProduct());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ShopBillingProduct> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[49]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ShopBillingProduct() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ShopBillingProduct(ShopBillingProduct other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    payType_ = other.payType_;
    priceRate_ = other.priceRate_;
    price_ = other.price_;
    resIcon_ = other.resIcon_;
    productContent_ = other.productContent_.Clone();
    platformProductId_ = other.platformProductId_;
    limitDetail_ = other.limitDetail_ != null ? other.limitDetail_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ShopBillingProduct Clone() {
    return new ShopBillingProduct(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private readonly static int IdDefaultValue = 0;

  private int id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Id {
    get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      id_ = value;
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "payType" field.</summary>
  public const int PayTypeFieldNumber = 2;
  private readonly static global::PayType PayTypeDefaultValue = global::PayType.Gold;

  private global::PayType payType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PayType PayType {
    get { if ((_hasBits0 & 2) != 0) { return payType_; } else { return PayTypeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      payType_ = value;
    }
  }
  /// <summary>Gets whether the "payType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPayType {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "payType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPayType() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "priceRate" field.</summary>
  public const int PriceRateFieldNumber = 3;
  private readonly static float PriceRateDefaultValue = 0F;

  private float priceRate_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float PriceRate {
    get { if ((_hasBits0 & 4) != 0) { return priceRate_; } else { return PriceRateDefaultValue; } }
    set {
      _hasBits0 |= 4;
      priceRate_ = value;
    }
  }
  /// <summary>Gets whether the "priceRate" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPriceRate {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "priceRate" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPriceRate() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "price" field.</summary>
  public const int PriceFieldNumber = 4;
  private readonly static int PriceDefaultValue = 0;

  private int price_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Price {
    get { if ((_hasBits0 & 8) != 0) { return price_; } else { return PriceDefaultValue; } }
    set {
      _hasBits0 |= 8;
      price_ = value;
    }
  }
  /// <summary>Gets whether the "price" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPrice {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "price" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPrice() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "resIcon" field.</summary>
  public const int ResIconFieldNumber = 5;
  private readonly static string ResIconDefaultValue = "";

  private string resIcon_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ResIcon {
    get { return resIcon_ ?? ResIconDefaultValue; }
    set {
      resIcon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "resIcon" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasResIcon {
    get { return resIcon_ != null; }
  }
  /// <summary>Clears the value of the "resIcon" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearResIcon() {
    resIcon_ = null;
  }

  /// <summary>Field number for the "productContent" field.</summary>
  public const int ProductContentFieldNumber = 6;
  private static readonly pb::FieldCodec<global::ProductContent> _repeated_productContent_codec
      = pb::FieldCodec.ForMessage(50, global::ProductContent.Parser);
  private readonly pbc::RepeatedField<global::ProductContent> productContent_ = new pbc::RepeatedField<global::ProductContent>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ProductContent> ProductContent {
    get { return productContent_; }
  }

  /// <summary>Field number for the "platformProductId" field.</summary>
  public const int PlatformProductIdFieldNumber = 7;
  private readonly static string PlatformProductIdDefaultValue = "";

  private string platformProductId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string PlatformProductId {
    get { return platformProductId_ ?? PlatformProductIdDefaultValue; }
    set {
      platformProductId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "platformProductId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPlatformProductId {
    get { return platformProductId_ != null; }
  }
  /// <summary>Clears the value of the "platformProductId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPlatformProductId() {
    platformProductId_ = null;
  }

  /// <summary>Field number for the "limitDetail" field.</summary>
  public const int LimitDetailFieldNumber = 8;
  private global::LimitedDetail limitDetail_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LimitedDetail LimitDetail {
    get { return limitDetail_; }
    set {
      limitDetail_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ShopBillingProduct);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ShopBillingProduct other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (PayType != other.PayType) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(PriceRate, other.PriceRate)) return false;
    if (Price != other.Price) return false;
    if (ResIcon != other.ResIcon) return false;
    if(!productContent_.Equals(other.productContent_)) return false;
    if (PlatformProductId != other.PlatformProductId) return false;
    if (!object.Equals(LimitDetail, other.LimitDetail)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasPayType) hash ^= PayType.GetHashCode();
    if (HasPriceRate) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(PriceRate);
    if (HasPrice) hash ^= Price.GetHashCode();
    if (HasResIcon) hash ^= ResIcon.GetHashCode();
    hash ^= productContent_.GetHashCode();
    if (HasPlatformProductId) hash ^= PlatformProductId.GetHashCode();
    if (limitDetail_ != null) hash ^= LimitDetail.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(8);
      output.WriteInt32(Id);
    }
    if (HasPayType) {
      output.WriteRawTag(16);
      output.WriteEnum((int) PayType);
    }
    if (HasPriceRate) {
      output.WriteRawTag(29);
      output.WriteFloat(PriceRate);
    }
    if (HasPrice) {
      output.WriteRawTag(32);
      output.WriteInt32(Price);
    }
    if (HasResIcon) {
      output.WriteRawTag(42);
      output.WriteString(ResIcon);
    }
    productContent_.WriteTo(output, _repeated_productContent_codec);
    if (HasPlatformProductId) {
      output.WriteRawTag(58);
      output.WriteString(PlatformProductId);
    }
    if (limitDetail_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(LimitDetail);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
    }
    if (HasPayType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PayType);
    }
    if (HasPriceRate) {
      size += 1 + 4;
    }
    if (HasPrice) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Price);
    }
    if (HasResIcon) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ResIcon);
    }
    size += productContent_.CalculateSize(_repeated_productContent_codec);
    if (HasPlatformProductId) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(PlatformProductId);
    }
    if (limitDetail_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LimitDetail);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ShopBillingProduct other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasPayType) {
      PayType = other.PayType;
    }
    if (other.HasPriceRate) {
      PriceRate = other.PriceRate;
    }
    if (other.HasPrice) {
      Price = other.Price;
    }
    if (other.HasResIcon) {
      ResIcon = other.ResIcon;
    }
    productContent_.Add(other.productContent_);
    if (other.HasPlatformProductId) {
      PlatformProductId = other.PlatformProductId;
    }
    if (other.limitDetail_ != null) {
      if (limitDetail_ == null) {
        LimitDetail = new global::LimitedDetail();
      }
      LimitDetail.MergeFrom(other.LimitDetail);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = input.ReadInt32();
          break;
        }
        case 16: {
          PayType = (global::PayType) input.ReadEnum();
          break;
        }
        case 29: {
          PriceRate = input.ReadFloat();
          break;
        }
        case 32: {
          Price = input.ReadInt32();
          break;
        }
        case 42: {
          ResIcon = input.ReadString();
          break;
        }
        case 50: {
          productContent_.AddEntriesFrom(input, _repeated_productContent_codec);
          break;
        }
        case 58: {
          PlatformProductId = input.ReadString();
          break;
        }
        case 66: {
          if (limitDetail_ == null) {
            LimitDetail = new global::LimitedDetail();
          }
          input.ReadMessage(LimitDetail);
          break;
        }
      }
    }
  }

}

public sealed partial class ProductContent : pb::IMessage<ProductContent> {
  private static readonly pb::MessageParser<ProductContent> _parser = new pb::MessageParser<ProductContent>(() => new ProductContent());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProductContent> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[50]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProductContent() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProductContent(ProductContent other) : this() {
    _hasBits0 = other._hasBits0;
    amount_ = other.amount_;
    contentId_ = other.contentId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProductContent Clone() {
    return new ProductContent(this);
  }

  /// <summary>Field number for the "amount" field.</summary>
  public const int AmountFieldNumber = 1;
  private readonly static int AmountDefaultValue = 0;

  private int amount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Amount {
    get { if ((_hasBits0 & 1) != 0) { return amount_; } else { return AmountDefaultValue; } }
    set {
      _hasBits0 |= 1;
      amount_ = value;
    }
  }
  /// <summary>Gets whether the "amount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAmount {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "amount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAmount() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "contentId" field.</summary>
  public const int ContentIdFieldNumber = 2;
  private readonly static int ContentIdDefaultValue = 0;

  private int contentId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ContentId {
    get { if ((_hasBits0 & 2) != 0) { return contentId_; } else { return ContentIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      contentId_ = value;
    }
  }
  /// <summary>Gets whether the "contentId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasContentId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "contentId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearContentId() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProductContent);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProductContent other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Amount != other.Amount) return false;
    if (ContentId != other.ContentId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasAmount) hash ^= Amount.GetHashCode();
    if (HasContentId) hash ^= ContentId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasAmount) {
      output.WriteRawTag(8);
      output.WriteInt32(Amount);
    }
    if (HasContentId) {
      output.WriteRawTag(16);
      output.WriteInt32(ContentId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasAmount) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Amount);
    }
    if (HasContentId) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ContentId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProductContent other) {
    if (other == null) {
      return;
    }
    if (other.HasAmount) {
      Amount = other.Amount;
    }
    if (other.HasContentId) {
      ContentId = other.ContentId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Amount = input.ReadInt32();
          break;
        }
        case 16: {
          ContentId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class LimitedDetail : pb::IMessage<LimitedDetail> {
  private static readonly pb::MessageParser<LimitedDetail> _parser = new pb::MessageParser<LimitedDetail>(() => new LimitedDetail());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LimitedDetail> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[51]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LimitedDetail() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LimitedDetail(LimitedDetail other) : this() {
    _hasBits0 = other._hasBits0;
    beginAt_ = other.beginAt_;
    saleEndAt_ = other.saleEndAt_;
    limitAmount_ = other.limitAmount_;
    limitedRemainingAmount_ = other.limitedRemainingAmount_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LimitedDetail Clone() {
    return new LimitedDetail(this);
  }

  /// <summary>Field number for the "beginAt" field.</summary>
  public const int BeginAtFieldNumber = 1;
  private readonly static ulong BeginAtDefaultValue = 0UL;

  private ulong beginAt_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong BeginAt {
    get { if ((_hasBits0 & 1) != 0) { return beginAt_; } else { return BeginAtDefaultValue; } }
    set {
      _hasBits0 |= 1;
      beginAt_ = value;
    }
  }
  /// <summary>Gets whether the "beginAt" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasBeginAt {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "beginAt" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearBeginAt() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "saleEndAt" field.</summary>
  public const int SaleEndAtFieldNumber = 2;
  private readonly static ulong SaleEndAtDefaultValue = 0UL;

  private ulong saleEndAt_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong SaleEndAt {
    get { if ((_hasBits0 & 2) != 0) { return saleEndAt_; } else { return SaleEndAtDefaultValue; } }
    set {
      _hasBits0 |= 2;
      saleEndAt_ = value;
    }
  }
  /// <summary>Gets whether the "saleEndAt" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSaleEndAt {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "saleEndAt" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSaleEndAt() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "limitAmount" field.</summary>
  public const int LimitAmountFieldNumber = 3;
  private readonly static int LimitAmountDefaultValue = 0;

  private int limitAmount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LimitAmount {
    get { if ((_hasBits0 & 4) != 0) { return limitAmount_; } else { return LimitAmountDefaultValue; } }
    set {
      _hasBits0 |= 4;
      limitAmount_ = value;
    }
  }
  /// <summary>Gets whether the "limitAmount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasLimitAmount {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "limitAmount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearLimitAmount() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "limitedRemainingAmount" field.</summary>
  public const int LimitedRemainingAmountFieldNumber = 4;
  private readonly static int LimitedRemainingAmountDefaultValue = 0;

  private int limitedRemainingAmount_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LimitedRemainingAmount {
    get { if ((_hasBits0 & 8) != 0) { return limitedRemainingAmount_; } else { return LimitedRemainingAmountDefaultValue; } }
    set {
      _hasBits0 |= 8;
      limitedRemainingAmount_ = value;
    }
  }
  /// <summary>Gets whether the "limitedRemainingAmount" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasLimitedRemainingAmount {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "limitedRemainingAmount" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearLimitedRemainingAmount() {
    _hasBits0 &= ~8;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LimitedDetail);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LimitedDetail other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (BeginAt != other.BeginAt) return false;
    if (SaleEndAt != other.SaleEndAt) return false;
    if (LimitAmount != other.LimitAmount) return false;
    if (LimitedRemainingAmount != other.LimitedRemainingAmount) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasBeginAt) hash ^= BeginAt.GetHashCode();
    if (HasSaleEndAt) hash ^= SaleEndAt.GetHashCode();
    if (HasLimitAmount) hash ^= LimitAmount.GetHashCode();
    if (HasLimitedRemainingAmount) hash ^= LimitedRemainingAmount.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasBeginAt) {
      output.WriteRawTag(8);
      output.WriteUInt64(BeginAt);
    }
    if (HasSaleEndAt) {
      output.WriteRawTag(16);
      output.WriteUInt64(SaleEndAt);
    }
    if (HasLimitAmount) {
      output.WriteRawTag(24);
      output.WriteInt32(LimitAmount);
    }
    if (HasLimitedRemainingAmount) {
      output.WriteRawTag(32);
      output.WriteInt32(LimitedRemainingAmount);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasBeginAt) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(BeginAt);
    }
    if (HasSaleEndAt) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SaleEndAt);
    }
    if (HasLimitAmount) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LimitAmount);
    }
    if (HasLimitedRemainingAmount) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LimitedRemainingAmount);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LimitedDetail other) {
    if (other == null) {
      return;
    }
    if (other.HasBeginAt) {
      BeginAt = other.BeginAt;
    }
    if (other.HasSaleEndAt) {
      SaleEndAt = other.SaleEndAt;
    }
    if (other.HasLimitAmount) {
      LimitAmount = other.LimitAmount;
    }
    if (other.HasLimitedRemainingAmount) {
      LimitedRemainingAmount = other.LimitedRemainingAmount;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          BeginAt = input.ReadUInt64();
          break;
        }
        case 16: {
          SaleEndAt = input.ReadUInt64();
          break;
        }
        case 24: {
          LimitAmount = input.ReadInt32();
          break;
        }
        case 32: {
          LimitedRemainingAmount = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class BillingStateInfo : pb::IMessage<BillingStateInfo> {
  private static readonly pb::MessageParser<BillingStateInfo> _parser = new pb::MessageParser<BillingStateInfo>(() => new BillingStateInfo());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BillingStateInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[52]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BillingStateInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BillingStateInfo(BillingStateInfo other) : this() {
    _hasBits0 = other._hasBits0;
    age_ = other.age_;
    currentMonthPurchasePrice_ = other.currentMonthPurchasePrice_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BillingStateInfo Clone() {
    return new BillingStateInfo(this);
  }

  /// <summary>Field number for the "age" field.</summary>
  public const int AgeFieldNumber = 1;
  private readonly static int AgeDefaultValue = 0;

  private int age_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Age {
    get { if ((_hasBits0 & 1) != 0) { return age_; } else { return AgeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      age_ = value;
    }
  }
  /// <summary>Gets whether the "age" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAge {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "age" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAge() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "currentMonthPurchasePrice" field.</summary>
  public const int CurrentMonthPurchasePriceFieldNumber = 2;
  private readonly static int CurrentMonthPurchasePriceDefaultValue = 0;

  private int currentMonthPurchasePrice_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CurrentMonthPurchasePrice {
    get { if ((_hasBits0 & 2) != 0) { return currentMonthPurchasePrice_; } else { return CurrentMonthPurchasePriceDefaultValue; } }
    set {
      _hasBits0 |= 2;
      currentMonthPurchasePrice_ = value;
    }
  }
  /// <summary>Gets whether the "currentMonthPurchasePrice" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCurrentMonthPurchasePrice {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "currentMonthPurchasePrice" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCurrentMonthPurchasePrice() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BillingStateInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BillingStateInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Age != other.Age) return false;
    if (CurrentMonthPurchasePrice != other.CurrentMonthPurchasePrice) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasAge) hash ^= Age.GetHashCode();
    if (HasCurrentMonthPurchasePrice) hash ^= CurrentMonthPurchasePrice.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasAge) {
      output.WriteRawTag(8);
      output.WriteInt32(Age);
    }
    if (HasCurrentMonthPurchasePrice) {
      output.WriteRawTag(16);
      output.WriteInt32(CurrentMonthPurchasePrice);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasAge) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Age);
    }
    if (HasCurrentMonthPurchasePrice) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(CurrentMonthPurchasePrice);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BillingStateInfo other) {
    if (other == null) {
      return;
    }
    if (other.HasAge) {
      Age = other.Age;
    }
    if (other.HasCurrentMonthPurchasePrice) {
      CurrentMonthPurchasePrice = other.CurrentMonthPurchasePrice;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Age = input.ReadInt32();
          break;
        }
        case 16: {
          CurrentMonthPurchasePrice = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class RankPlayer : pb::IMessage<RankPlayer> {
  private static readonly pb::MessageParser<RankPlayer> _parser = new pb::MessageParser<RankPlayer>(() => new RankPlayer());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RankPlayer> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[53]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RankPlayer() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RankPlayer(RankPlayer other) : this() {
    _hasBits0 = other._hasBits0;
    playerId_ = other.playerId_;
    nickname_ = other.nickname_;
    score_ = other.score_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RankPlayer Clone() {
    return new RankPlayer(this);
  }

  /// <summary>Field number for the "playerId" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private readonly static long PlayerIdDefaultValue = 0L;

  private long playerId_;
  /// <summary>
  ///玩家ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PlayerId {
    get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      playerId_ = value;
    }
  }
  /// <summary>Gets whether the "playerId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPlayerId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "playerId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPlayerId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "nickname" field.</summary>
  public const int NicknameFieldNumber = 2;
  private readonly static string NicknameDefaultValue = "";

  private string nickname_;
  /// <summary>
  ///名字
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Nickname {
    get { return nickname_ ?? NicknameDefaultValue; }
    set {
      nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "nickname" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasNickname {
    get { return nickname_ != null; }
  }
  /// <summary>Clears the value of the "nickname" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearNickname() {
    nickname_ = null;
  }

  /// <summary>Field number for the "score" field.</summary>
  public const int ScoreFieldNumber = 3;
  private readonly static long ScoreDefaultValue = 0L;

  private long score_;
  /// <summary>
  ///排行积分
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long Score {
    get { if ((_hasBits0 & 2) != 0) { return score_; } else { return ScoreDefaultValue; } }
    set {
      _hasBits0 |= 2;
      score_ = value;
    }
  }
  /// <summary>Gets whether the "score" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasScore {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "score" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearScore() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RankPlayer);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RankPlayer other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (Nickname != other.Nickname) return false;
    if (Score != other.Score) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPlayerId) hash ^= PlayerId.GetHashCode();
    if (HasNickname) hash ^= Nickname.GetHashCode();
    if (HasScore) hash ^= Score.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPlayerId) {
      output.WriteRawTag(8);
      output.WriteInt64(PlayerId);
    }
    if (HasNickname) {
      output.WriteRawTag(18);
      output.WriteString(Nickname);
    }
    if (HasScore) {
      output.WriteRawTag(24);
      output.WriteInt64(Score);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPlayerId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
    }
    if (HasNickname) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
    }
    if (HasScore) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(Score);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RankPlayer other) {
    if (other == null) {
      return;
    }
    if (other.HasPlayerId) {
      PlayerId = other.PlayerId;
    }
    if (other.HasNickname) {
      Nickname = other.Nickname;
    }
    if (other.HasScore) {
      Score = other.Score;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadInt64();
          break;
        }
        case 18: {
          Nickname = input.ReadString();
          break;
        }
        case 24: {
          Score = input.ReadInt64();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
