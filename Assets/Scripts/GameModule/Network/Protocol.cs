// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: protocol.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from protocol.proto</summary>
public static partial class ProtocolReflection {

  #region Descriptor
  /// <summary>File descriptor for protocol.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static ProtocolReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "Cg5wcm90b2NvbC5wcm90byKYAQoKUDBfUmVxdWVzdBIQCghkZXZpY2VJZBgB",
          "IAIoCRIWCg5kZXZpY2VQbGF0Zm9ybRgCIAIoCRISCgpkZXZpY2VOYW1lGAMg",
          "AigJEhMKC2FjY2Vzc3Rva2VuGAQgASgJEikKC3NlcnZpY2VUeXBlGAUgASgO",
          "MhQuRGF0YUxpbmtTZXJ2aWNlVHlwZRIMCgRtYXNrGAYgAigJIkwKC1AwX1Jl",
          "c3BvbnNlEhkKBnJlc3VsdBgBIAIoCzIJLlBCUmVzdWx0EhEKCWF1dGhUb2tl",
          "bhgCIAEoCRIPCgdhdXRoS2V5GAMgASgJIloKClAxX1JlcXVlc3QSEwoLYWNj",
          "ZXNzdG9rZW4YASACKAkSKQoLc2VydmljZVR5cGUYAiACKA4yFC5EYXRhTGlu",
          "a1NlcnZpY2VUeXBlEgwKBG1hc2sYAyACKAkiTAoLUDFfUmVzcG9uc2USGQoG",
          "cmVzdWx0GAEgASgLMgkuUEJSZXN1bHQSEQoJYXV0aFRva2VuGAIgASgJEg8K",
          "B2F1dGhLZXkYAyABKAkiLQoKUDJfUmVxdWVzdBIRCglhdXRoVG9rZW4YASAC",
          "KAkSDAoEbWFzaxgCIAEoCSKEAQoLUDJfUmVzcG9uc2USGQoGcmVzdWx0GAEg",
          "ASgLMgkuUEJSZXN1bHQSEAoIcGxheWVySWQYAiABKAMSEwoLc2Vzc2lvbl9r",
          "ZXkYAyABKAkSEgoKc2VydmVyVGltZRgEIAEoAxIfChdpc1BsYXRmb3JtU2Vy",
          "dmljZUxpbmtlZBgFIAEoCCJDCgtQM19SZXNwb25zZRIZCgZyZXN1bHQYASAB",
          "KAsyCS5QQlJlc3VsdBIZCgZwbGF5ZXIYAiABKAsyCS5QQlBsYXllciIcCgpQ",
          "NF9SZXF1ZXN0Eg4KBmZpc2hJZBgBIAIoBSJJCgtQNF9SZXNwb25zZRIZCgZy",
          "ZXN1bHQYASABKAsyCS5QQlJlc3VsdBIfCglzdGFnZUluZm8YAiABKAsyDC5Q",
          "QlN0YWdlSW5mbyIjCgpQNV9SZXF1ZXN0EhUKDWJhdHRsZVJhbmtpbmcYASAC",
          "KAUiQwoLUDVfUmVzcG9uc2USGQoGcmVzdWx0GAEgASgLMgkuUEJSZXN1bHQS",
          "GQoGcGxheWVyGAIgASgLMgkuUEJQbGF5ZXIiJgoIUEJSZXN1bHQSDAoEY29k",
          "ZRgBIAEoBRIMCgRkZXNjGAIgASgJIl8KFVBCUGxheWVyRmlzaExldmVsSW5m",
          "bxIOCgZmaXNoSWQYASABKAUSEQoJZmlzaExldmVsGAIgASgFEhAKCGZpc2hD",
          "aGlwGAMgASgFEhEKCXJhbmtMZXZlbBgEIAEoBSLlAQoIUEJQbGF5ZXISEAoI",
          "cGxheWVySWQYASABKAMSEAoIbmlja25hbWUYAiABKAkSDAoEcmFuaxgDIAEo",
          "BRIPCgdyZWdUaW1lGAQgASgDEhEKCWxvZ2luTGFzdBgFIAEoAxIPCgdkaWFt",
          "b25kGAYgASgFEgwKBGdvbGQYByABKAUSDQoFcG93ZXIYCCABKAUSDwoHcG93",
          "ZXJBdBgJIAEoAxIRCglmaWdodEZpc2gYCiABKAUSMQoRYXJ5UGxheWVyRmlz",
          "aEluZm8YCyADKAsyFi5QQlBsYXllckZpc2hMZXZlbEluZm8iTQoPUEJFbmVt",
          "eURhdGFJbmZvEg4KBmZpc2hJZBgBIAEoBRIUCgxmaXNoQ291bnRNYXgYAiAB",
          "KAUSFAoMZmlzaENvdW50TWluGAMgASgFIi8KD1BCUm9ib3REYXRhSW5mbxIO",
          "CgZmaXNoSWQYASABKAUSDAoEYWlJZBgCIAEoBSJlCgtQQlN0YWdlSW5mbxIq",
          "ChBhcnlFbmVteURhdGFJbmZvGAEgAygLMhAuUEJFbmVteURhdGFJbmZvEioK",
          "EGFyeVJvYm90RGF0YUluZm8YAiADKAsyEC5QQlJvYm90RGF0YUluZm8qUAoT",
          "RGF0YUxpbmtTZXJ2aWNlVHlwZRIICgRub25lEAASDwoLZ2FtZV9jZW50ZXIQ",
          "ARIPCgtnb29nbGVfcGxheRACEg0KCWFwcF9sb3ZpbhADKmEKCU1lc3NhZ2VJ",
          "ZBIPCgtNSURfU1RBUlRVUBAAEhsKF01JRF9MT0dJTl9XSVRIX1BMQVRGT1JN",
          "EAESDQoJTUlEX0xPR0lOEAISFwoTTUlEX0dFVF9QTEFZRVJfSU5GTxADKm0K",
          "ClN0YXR1c0NvZGUSBgoCT0sQABIKCgZGQUlMRUQQARITCg9TSUdOQVRVUkVf",
          "RVJST1IQAhIXChNLSUNLX09VVF9MT0dJTl9VU0VSEAMSCwoHQ0FVVElPThAE",
          "EhAKDENMSUVOVF9FUlJPUhAFQjAKIGNvbS5jaGFvLmZpc2guc2VydmVyLmZp",
          "c2hnYW1lLnBiQglQQk1lc3NhZ2WIAQA="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(new[] {typeof(global::DataLinkServiceType), typeof(global::MessageId), typeof(global::StatusCode), }, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::P0_Request), global::P0_Request.Parser, new[]{ "DeviceId", "DevicePlatform", "DeviceName", "Accesstoken", "ServiceType", "Mask" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::P0_Response), global::P0_Response.Parser, new[]{ "Result", "AuthToken", "AuthKey" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::P1_Request), global::P1_Request.Parser, new[]{ "Accesstoken", "ServiceType", "Mask" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::P1_Response), global::P1_Response.Parser, new[]{ "Result", "AuthToken", "AuthKey" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::P2_Request), global::P2_Request.Parser, new[]{ "AuthToken", "Mask" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::P2_Response), global::P2_Response.Parser, new[]{ "Result", "PlayerId", "SessionKey", "ServerTime", "IsPlatformServiceLinked" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::P3_Response), global::P3_Response.Parser, new[]{ "Result", "Player" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::P4_Request), global::P4_Request.Parser, new[]{ "FishId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::P4_Response), global::P4_Response.Parser, new[]{ "Result", "StageInfo" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::P5_Request), global::P5_Request.Parser, new[]{ "BattleRanking" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::P5_Response), global::P5_Response.Parser, new[]{ "Result", "Player" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PBResult), global::PBResult.Parser, new[]{ "Code", "Desc" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PBPlayerFishLevelInfo), global::PBPlayerFishLevelInfo.Parser, new[]{ "FishId", "FishLevel", "FishChip", "RankLevel" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PBPlayer), global::PBPlayer.Parser, new[]{ "PlayerId", "Nickname", "Rank", "RegTime", "LoginLast", "Diamond", "Gold", "Power", "PowerAt", "FightFish", "AryPlayerFishInfo" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PBEnemyDataInfo), global::PBEnemyDataInfo.Parser, new[]{ "FishId", "FishCountMax", "FishCountMin" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PBRobotDataInfo), global::PBRobotDataInfo.Parser, new[]{ "FishId", "AiId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::PBStageInfo), global::PBStageInfo.Parser, new[]{ "AryEnemyDataInfo", "AryRobotDataInfo" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Enums
public enum DataLinkServiceType {
  [pbr::OriginalName("none")] None = 0,
  [pbr::OriginalName("game_center")] GameCenter = 1,
  [pbr::OriginalName("google_play")] GooglePlay = 2,
  [pbr::OriginalName("app_lovin")] AppLovin = 3,
}

/// <summary>
///消息枚举编号
/// </summary>
public enum MessageId {
  [pbr::OriginalName("MID_STARTUP")] MidStartup = 0,
  [pbr::OriginalName("MID_LOGIN_WITH_PLATFORM")] MidLoginWithPlatform = 1,
  [pbr::OriginalName("MID_LOGIN")] MidLogin = 2,
  [pbr::OriginalName("MID_GET_PLAYER_INFO")] MidGetPlayerInfo = 3,
}

public enum StatusCode {
  [pbr::OriginalName("OK")] Ok = 0,
  [pbr::OriginalName("FAILED")] Failed = 1,
  [pbr::OriginalName("SIGNATURE_ERROR")] SignatureError = 2,
  [pbr::OriginalName("KICK_OUT_LOGIN_USER")] KickOutLoginUser = 3,
  [pbr::OriginalName("CAUTION")] Caution = 4,
  [pbr::OriginalName("CLIENT_ERROR")] ClientError = 5,
}

#endregion

#region Messages
/// <summary>
///startup 注册
/// </summary>
public sealed partial class P0_Request : pb::IMessage<P0_Request> {
  private static readonly pb::MessageParser<P0_Request> _parser = new pb::MessageParser<P0_Request>(() => new P0_Request());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<P0_Request> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P0_Request() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P0_Request(P0_Request other) : this() {
    _hasBits0 = other._hasBits0;
    deviceId_ = other.deviceId_;
    devicePlatform_ = other.devicePlatform_;
    deviceName_ = other.deviceName_;
    accesstoken_ = other.accesstoken_;
    serviceType_ = other.serviceType_;
    mask_ = other.mask_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P0_Request Clone() {
    return new P0_Request(this);
  }

  /// <summary>Field number for the "deviceId" field.</summary>
  public const int DeviceIdFieldNumber = 1;
  private readonly static string DeviceIdDefaultValue = "";

  private string deviceId_;
  /// <summary>
  ///设备唯一标识ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceId {
    get { return deviceId_ ?? DeviceIdDefaultValue; }
    set {
      deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "deviceId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDeviceId {
    get { return deviceId_ != null; }
  }
  /// <summary>Clears the value of the "deviceId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDeviceId() {
    deviceId_ = null;
  }

  /// <summary>Field number for the "devicePlatform" field.</summary>
  public const int DevicePlatformFieldNumber = 2;
  private readonly static string DevicePlatformDefaultValue = "";

  private string devicePlatform_;
  /// <summary>
  ///设备平台
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DevicePlatform {
    get { return devicePlatform_ ?? DevicePlatformDefaultValue; }
    set {
      devicePlatform_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "devicePlatform" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDevicePlatform {
    get { return devicePlatform_ != null; }
  }
  /// <summary>Clears the value of the "devicePlatform" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDevicePlatform() {
    devicePlatform_ = null;
  }

  /// <summary>Field number for the "deviceName" field.</summary>
  public const int DeviceNameFieldNumber = 3;
  private readonly static string DeviceNameDefaultValue = "";

  private string deviceName_;
  /// <summary>
  ///设备名
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceName {
    get { return deviceName_ ?? DeviceNameDefaultValue; }
    set {
      deviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "deviceName" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDeviceName {
    get { return deviceName_ != null; }
  }
  /// <summary>Clears the value of the "deviceName" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDeviceName() {
    deviceName_ = null;
  }

  /// <summary>Field number for the "accesstoken" field.</summary>
  public const int AccesstokenFieldNumber = 4;
  private readonly static string AccesstokenDefaultValue = "";

  private string accesstoken_;
  /// <summary>
  ///googleplay game center token
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Accesstoken {
    get { return accesstoken_ ?? AccesstokenDefaultValue; }
    set {
      accesstoken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "accesstoken" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAccesstoken {
    get { return accesstoken_ != null; }
  }
  /// <summary>Clears the value of the "accesstoken" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAccesstoken() {
    accesstoken_ = null;
  }

  /// <summary>Field number for the "serviceType" field.</summary>
  public const int ServiceTypeFieldNumber = 5;
  private readonly static global::DataLinkServiceType ServiceTypeDefaultValue = global::DataLinkServiceType.None;

  private global::DataLinkServiceType serviceType_;
  /// <summary>
  ///平台类型
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DataLinkServiceType ServiceType {
    get { if ((_hasBits0 & 1) != 0) { return serviceType_; } else { return ServiceTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      serviceType_ = value;
    }
  }
  /// <summary>Gets whether the "serviceType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasServiceType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "serviceType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearServiceType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "mask" field.</summary>
  public const int MaskFieldNumber = 6;
  private readonly static string MaskDefaultValue = "";

  private string mask_;
  /// <summary>
  ///客户端randomkey
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Mask {
    get { return mask_ ?? MaskDefaultValue; }
    set {
      mask_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "mask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMask {
    get { return mask_ != null; }
  }
  /// <summary>Clears the value of the "mask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMask() {
    mask_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as P0_Request);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(P0_Request other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DeviceId != other.DeviceId) return false;
    if (DevicePlatform != other.DevicePlatform) return false;
    if (DeviceName != other.DeviceName) return false;
    if (Accesstoken != other.Accesstoken) return false;
    if (ServiceType != other.ServiceType) return false;
    if (Mask != other.Mask) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasDeviceId) hash ^= DeviceId.GetHashCode();
    if (HasDevicePlatform) hash ^= DevicePlatform.GetHashCode();
    if (HasDeviceName) hash ^= DeviceName.GetHashCode();
    if (HasAccesstoken) hash ^= Accesstoken.GetHashCode();
    if (HasServiceType) hash ^= ServiceType.GetHashCode();
    if (HasMask) hash ^= Mask.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasDeviceId) {
      output.WriteRawTag(10);
      output.WriteString(DeviceId);
    }
    if (HasDevicePlatform) {
      output.WriteRawTag(18);
      output.WriteString(DevicePlatform);
    }
    if (HasDeviceName) {
      output.WriteRawTag(26);
      output.WriteString(DeviceName);
    }
    if (HasAccesstoken) {
      output.WriteRawTag(34);
      output.WriteString(Accesstoken);
    }
    if (HasServiceType) {
      output.WriteRawTag(40);
      output.WriteEnum((int) ServiceType);
    }
    if (HasMask) {
      output.WriteRawTag(50);
      output.WriteString(Mask);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasDeviceId) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
    }
    if (HasDevicePlatform) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DevicePlatform);
    }
    if (HasDeviceName) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceName);
    }
    if (HasAccesstoken) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Accesstoken);
    }
    if (HasServiceType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ServiceType);
    }
    if (HasMask) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Mask);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(P0_Request other) {
    if (other == null) {
      return;
    }
    if (other.HasDeviceId) {
      DeviceId = other.DeviceId;
    }
    if (other.HasDevicePlatform) {
      DevicePlatform = other.DevicePlatform;
    }
    if (other.HasDeviceName) {
      DeviceName = other.DeviceName;
    }
    if (other.HasAccesstoken) {
      Accesstoken = other.Accesstoken;
    }
    if (other.HasServiceType) {
      ServiceType = other.ServiceType;
    }
    if (other.HasMask) {
      Mask = other.Mask;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          DeviceId = input.ReadString();
          break;
        }
        case 18: {
          DevicePlatform = input.ReadString();
          break;
        }
        case 26: {
          DeviceName = input.ReadString();
          break;
        }
        case 34: {
          Accesstoken = input.ReadString();
          break;
        }
        case 40: {
          ServiceType = (global::DataLinkServiceType) input.ReadEnum();
          break;
        }
        case 50: {
          Mask = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class P0_Response : pb::IMessage<P0_Response> {
  private static readonly pb::MessageParser<P0_Response> _parser = new pb::MessageParser<P0_Response>(() => new P0_Response());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<P0_Response> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P0_Response() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P0_Response(P0_Response other) : this() {
    result_ = other.result_ != null ? other.result_.Clone() : null;
    authToken_ = other.authToken_;
    authKey_ = other.authKey_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P0_Response Clone() {
    return new P0_Response(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private global::PBResult result_;
  /// <summary>
  ///0成功,其他失败
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PBResult Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "authToken" field.</summary>
  public const int AuthTokenFieldNumber = 2;
  private readonly static string AuthTokenDefaultValue = "";

  private string authToken_;
  /// <summary>
  ///玩家authtoken令牌
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string AuthToken {
    get { return authToken_ ?? AuthTokenDefaultValue; }
    set {
      authToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "authToken" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAuthToken {
    get { return authToken_ != null; }
  }
  /// <summary>Clears the value of the "authToken" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAuthToken() {
    authToken_ = null;
  }

  /// <summary>Field number for the "authKey" field.</summary>
  public const int AuthKeyFieldNumber = 3;
  private readonly static string AuthKeyDefaultValue = "";

  private string authKey_;
  /// <summary>
  ///交换密钥 给login使用
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string AuthKey {
    get { return authKey_ ?? AuthKeyDefaultValue; }
    set {
      authKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "authKey" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAuthKey {
    get { return authKey_ != null; }
  }
  /// <summary>Clears the value of the "authKey" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAuthKey() {
    authKey_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as P0_Response);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(P0_Response other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Result, other.Result)) return false;
    if (AuthToken != other.AuthToken) return false;
    if (AuthKey != other.AuthKey) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (result_ != null) hash ^= Result.GetHashCode();
    if (HasAuthToken) hash ^= AuthToken.GetHashCode();
    if (HasAuthKey) hash ^= AuthKey.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (result_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Result);
    }
    if (HasAuthToken) {
      output.WriteRawTag(18);
      output.WriteString(AuthToken);
    }
    if (HasAuthKey) {
      output.WriteRawTag(26);
      output.WriteString(AuthKey);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (result_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
    }
    if (HasAuthToken) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthToken);
    }
    if (HasAuthKey) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthKey);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(P0_Response other) {
    if (other == null) {
      return;
    }
    if (other.result_ != null) {
      if (result_ == null) {
        Result = new global::PBResult();
      }
      Result.MergeFrom(other.Result);
    }
    if (other.HasAuthToken) {
      AuthToken = other.AuthToken;
    }
    if (other.HasAuthKey) {
      AuthKey = other.AuthKey;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (result_ == null) {
            Result = new global::PBResult();
          }
          input.ReadMessage(Result);
          break;
        }
        case 18: {
          AuthToken = input.ReadString();
          break;
        }
        case 26: {
          AuthKey = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
///第三方登录 or 恢复
/// </summary>
public sealed partial class P1_Request : pb::IMessage<P1_Request> {
  private static readonly pb::MessageParser<P1_Request> _parser = new pb::MessageParser<P1_Request>(() => new P1_Request());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<P1_Request> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P1_Request() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P1_Request(P1_Request other) : this() {
    _hasBits0 = other._hasBits0;
    accesstoken_ = other.accesstoken_;
    serviceType_ = other.serviceType_;
    mask_ = other.mask_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P1_Request Clone() {
    return new P1_Request(this);
  }

  /// <summary>Field number for the "accesstoken" field.</summary>
  public const int AccesstokenFieldNumber = 1;
  private readonly static string AccesstokenDefaultValue = "";

  private string accesstoken_;
  /// <summary>
  ///googleplay game center token
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Accesstoken {
    get { return accesstoken_ ?? AccesstokenDefaultValue; }
    set {
      accesstoken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "accesstoken" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAccesstoken {
    get { return accesstoken_ != null; }
  }
  /// <summary>Clears the value of the "accesstoken" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAccesstoken() {
    accesstoken_ = null;
  }

  /// <summary>Field number for the "serviceType" field.</summary>
  public const int ServiceTypeFieldNumber = 2;
  private readonly static global::DataLinkServiceType ServiceTypeDefaultValue = global::DataLinkServiceType.None;

  private global::DataLinkServiceType serviceType_;
  /// <summary>
  ///平台类型
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DataLinkServiceType ServiceType {
    get { if ((_hasBits0 & 1) != 0) { return serviceType_; } else { return ServiceTypeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      serviceType_ = value;
    }
  }
  /// <summary>Gets whether the "serviceType" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasServiceType {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "serviceType" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearServiceType() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "mask" field.</summary>
  public const int MaskFieldNumber = 3;
  private readonly static string MaskDefaultValue = "";

  private string mask_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Mask {
    get { return mask_ ?? MaskDefaultValue; }
    set {
      mask_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "mask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMask {
    get { return mask_ != null; }
  }
  /// <summary>Clears the value of the "mask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMask() {
    mask_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as P1_Request);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(P1_Request other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Accesstoken != other.Accesstoken) return false;
    if (ServiceType != other.ServiceType) return false;
    if (Mask != other.Mask) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasAccesstoken) hash ^= Accesstoken.GetHashCode();
    if (HasServiceType) hash ^= ServiceType.GetHashCode();
    if (HasMask) hash ^= Mask.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasAccesstoken) {
      output.WriteRawTag(10);
      output.WriteString(Accesstoken);
    }
    if (HasServiceType) {
      output.WriteRawTag(16);
      output.WriteEnum((int) ServiceType);
    }
    if (HasMask) {
      output.WriteRawTag(26);
      output.WriteString(Mask);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasAccesstoken) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Accesstoken);
    }
    if (HasServiceType) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ServiceType);
    }
    if (HasMask) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Mask);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(P1_Request other) {
    if (other == null) {
      return;
    }
    if (other.HasAccesstoken) {
      Accesstoken = other.Accesstoken;
    }
    if (other.HasServiceType) {
      ServiceType = other.ServiceType;
    }
    if (other.HasMask) {
      Mask = other.Mask;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Accesstoken = input.ReadString();
          break;
        }
        case 16: {
          ServiceType = (global::DataLinkServiceType) input.ReadEnum();
          break;
        }
        case 26: {
          Mask = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class P1_Response : pb::IMessage<P1_Response> {
  private static readonly pb::MessageParser<P1_Response> _parser = new pb::MessageParser<P1_Response>(() => new P1_Response());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<P1_Response> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P1_Response() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P1_Response(P1_Response other) : this() {
    result_ = other.result_ != null ? other.result_.Clone() : null;
    authToken_ = other.authToken_;
    authKey_ = other.authKey_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P1_Response Clone() {
    return new P1_Response(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private global::PBResult result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PBResult Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "authToken" field.</summary>
  public const int AuthTokenFieldNumber = 2;
  private readonly static string AuthTokenDefaultValue = "";

  private string authToken_;
  /// <summary>
  ///玩家authtoken令牌
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string AuthToken {
    get { return authToken_ ?? AuthTokenDefaultValue; }
    set {
      authToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "authToken" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAuthToken {
    get { return authToken_ != null; }
  }
  /// <summary>Clears the value of the "authToken" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAuthToken() {
    authToken_ = null;
  }

  /// <summary>Field number for the "authKey" field.</summary>
  public const int AuthKeyFieldNumber = 3;
  private readonly static string AuthKeyDefaultValue = "";

  private string authKey_;
  /// <summary>
  ///交换密钥 给login使用
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string AuthKey {
    get { return authKey_ ?? AuthKeyDefaultValue; }
    set {
      authKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "authKey" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAuthKey {
    get { return authKey_ != null; }
  }
  /// <summary>Clears the value of the "authKey" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAuthKey() {
    authKey_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as P1_Response);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(P1_Response other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Result, other.Result)) return false;
    if (AuthToken != other.AuthToken) return false;
    if (AuthKey != other.AuthKey) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (result_ != null) hash ^= Result.GetHashCode();
    if (HasAuthToken) hash ^= AuthToken.GetHashCode();
    if (HasAuthKey) hash ^= AuthKey.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (result_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Result);
    }
    if (HasAuthToken) {
      output.WriteRawTag(18);
      output.WriteString(AuthToken);
    }
    if (HasAuthKey) {
      output.WriteRawTag(26);
      output.WriteString(AuthKey);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (result_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
    }
    if (HasAuthToken) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthToken);
    }
    if (HasAuthKey) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthKey);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(P1_Response other) {
    if (other == null) {
      return;
    }
    if (other.result_ != null) {
      if (result_ == null) {
        Result = new global::PBResult();
      }
      Result.MergeFrom(other.Result);
    }
    if (other.HasAuthToken) {
      AuthToken = other.AuthToken;
    }
    if (other.HasAuthKey) {
      AuthKey = other.AuthKey;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (result_ == null) {
            Result = new global::PBResult();
          }
          input.ReadMessage(Result);
          break;
        }
        case 18: {
          AuthToken = input.ReadString();
          break;
        }
        case 26: {
          AuthKey = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
///登录
/// </summary>
public sealed partial class P2_Request : pb::IMessage<P2_Request> {
  private static readonly pb::MessageParser<P2_Request> _parser = new pb::MessageParser<P2_Request>(() => new P2_Request());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<P2_Request> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P2_Request() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P2_Request(P2_Request other) : this() {
    authToken_ = other.authToken_;
    mask_ = other.mask_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P2_Request Clone() {
    return new P2_Request(this);
  }

  /// <summary>Field number for the "authToken" field.</summary>
  public const int AuthTokenFieldNumber = 1;
  private readonly static string AuthTokenDefaultValue = "";

  private string authToken_;
  /// <summary>
  ///玩家令牌
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string AuthToken {
    get { return authToken_ ?? AuthTokenDefaultValue; }
    set {
      authToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "authToken" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAuthToken {
    get { return authToken_ != null; }
  }
  /// <summary>Clears the value of the "authToken" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAuthToken() {
    authToken_ = null;
  }

  /// <summary>Field number for the "mask" field.</summary>
  public const int MaskFieldNumber = 2;
  private readonly static string MaskDefaultValue = "";

  private string mask_;
  /// <summary>
  ///客户端资源验签
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Mask {
    get { return mask_ ?? MaskDefaultValue; }
    set {
      mask_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "mask" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMask {
    get { return mask_ != null; }
  }
  /// <summary>Clears the value of the "mask" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMask() {
    mask_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as P2_Request);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(P2_Request other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (AuthToken != other.AuthToken) return false;
    if (Mask != other.Mask) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasAuthToken) hash ^= AuthToken.GetHashCode();
    if (HasMask) hash ^= Mask.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasAuthToken) {
      output.WriteRawTag(10);
      output.WriteString(AuthToken);
    }
    if (HasMask) {
      output.WriteRawTag(18);
      output.WriteString(Mask);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasAuthToken) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(AuthToken);
    }
    if (HasMask) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Mask);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(P2_Request other) {
    if (other == null) {
      return;
    }
    if (other.HasAuthToken) {
      AuthToken = other.AuthToken;
    }
    if (other.HasMask) {
      Mask = other.Mask;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          AuthToken = input.ReadString();
          break;
        }
        case 18: {
          Mask = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class P2_Response : pb::IMessage<P2_Response> {
  private static readonly pb::MessageParser<P2_Response> _parser = new pb::MessageParser<P2_Response>(() => new P2_Response());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<P2_Response> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P2_Response() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P2_Response(P2_Response other) : this() {
    _hasBits0 = other._hasBits0;
    result_ = other.result_ != null ? other.result_.Clone() : null;
    playerId_ = other.playerId_;
    sessionKey_ = other.sessionKey_;
    serverTime_ = other.serverTime_;
    isPlatformServiceLinked_ = other.isPlatformServiceLinked_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P2_Response Clone() {
    return new P2_Response(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private global::PBResult result_;
  /// <summary>
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PBResult Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "playerId" field.</summary>
  public const int PlayerIdFieldNumber = 2;
  private readonly static long PlayerIdDefaultValue = 0L;

  private long playerId_;
  /// <summary>
  ///玩家ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PlayerId {
    get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      playerId_ = value;
    }
  }
  /// <summary>Gets whether the "playerId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPlayerId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "playerId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPlayerId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "session_key" field.</summary>
  public const int SessionKeyFieldNumber = 3;
  private readonly static string SessionKeyDefaultValue = "";

  private string sessionKey_;
  /// <summary>
  ///后续加密用密钥
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SessionKey {
    get { return sessionKey_ ?? SessionKeyDefaultValue; }
    set {
      sessionKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "session_key" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSessionKey {
    get { return sessionKey_ != null; }
  }
  /// <summary>Clears the value of the "session_key" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSessionKey() {
    sessionKey_ = null;
  }

  /// <summary>Field number for the "serverTime" field.</summary>
  public const int ServerTimeFieldNumber = 4;
  private readonly static long ServerTimeDefaultValue = 0L;

  private long serverTime_;
  /// <summary>
  ///服务器时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long ServerTime {
    get { if ((_hasBits0 & 2) != 0) { return serverTime_; } else { return ServerTimeDefaultValue; } }
    set {
      _hasBits0 |= 2;
      serverTime_ = value;
    }
  }
  /// <summary>Gets whether the "serverTime" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasServerTime {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "serverTime" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearServerTime() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "isPlatformServiceLinked" field.</summary>
  public const int IsPlatformServiceLinkedFieldNumber = 5;
  private readonly static bool IsPlatformServiceLinkedDefaultValue = false;

  private bool isPlatformServiceLinked_;
  /// <summary>
  ///是否关联 gs or gc
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsPlatformServiceLinked {
    get { if ((_hasBits0 & 4) != 0) { return isPlatformServiceLinked_; } else { return IsPlatformServiceLinkedDefaultValue; } }
    set {
      _hasBits0 |= 4;
      isPlatformServiceLinked_ = value;
    }
  }
  /// <summary>Gets whether the "isPlatformServiceLinked" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasIsPlatformServiceLinked {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "isPlatformServiceLinked" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIsPlatformServiceLinked() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as P2_Response);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(P2_Response other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Result, other.Result)) return false;
    if (PlayerId != other.PlayerId) return false;
    if (SessionKey != other.SessionKey) return false;
    if (ServerTime != other.ServerTime) return false;
    if (IsPlatformServiceLinked != other.IsPlatformServiceLinked) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (result_ != null) hash ^= Result.GetHashCode();
    if (HasPlayerId) hash ^= PlayerId.GetHashCode();
    if (HasSessionKey) hash ^= SessionKey.GetHashCode();
    if (HasServerTime) hash ^= ServerTime.GetHashCode();
    if (HasIsPlatformServiceLinked) hash ^= IsPlatformServiceLinked.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (result_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Result);
    }
    if (HasPlayerId) {
      output.WriteRawTag(16);
      output.WriteInt64(PlayerId);
    }
    if (HasSessionKey) {
      output.WriteRawTag(26);
      output.WriteString(SessionKey);
    }
    if (HasServerTime) {
      output.WriteRawTag(32);
      output.WriteInt64(ServerTime);
    }
    if (HasIsPlatformServiceLinked) {
      output.WriteRawTag(40);
      output.WriteBool(IsPlatformServiceLinked);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (result_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
    }
    if (HasPlayerId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
    }
    if (HasSessionKey) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SessionKey);
    }
    if (HasServerTime) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(ServerTime);
    }
    if (HasIsPlatformServiceLinked) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(P2_Response other) {
    if (other == null) {
      return;
    }
    if (other.result_ != null) {
      if (result_ == null) {
        Result = new global::PBResult();
      }
      Result.MergeFrom(other.Result);
    }
    if (other.HasPlayerId) {
      PlayerId = other.PlayerId;
    }
    if (other.HasSessionKey) {
      SessionKey = other.SessionKey;
    }
    if (other.HasServerTime) {
      ServerTime = other.ServerTime;
    }
    if (other.HasIsPlatformServiceLinked) {
      IsPlatformServiceLinked = other.IsPlatformServiceLinked;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (result_ == null) {
            Result = new global::PBResult();
          }
          input.ReadMessage(Result);
          break;
        }
        case 16: {
          PlayerId = input.ReadInt64();
          break;
        }
        case 26: {
          SessionKey = input.ReadString();
          break;
        }
        case 32: {
          ServerTime = input.ReadInt64();
          break;
        }
        case 40: {
          IsPlatformServiceLinked = input.ReadBool();
          break;
        }
      }
    }
  }

}

/// <summary>
///获取玩家信息
/// </summary>
public sealed partial class P3_Response : pb::IMessage<P3_Response> {
  private static readonly pb::MessageParser<P3_Response> _parser = new pb::MessageParser<P3_Response>(() => new P3_Response());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<P3_Response> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P3_Response() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P3_Response(P3_Response other) : this() {
    result_ = other.result_ != null ? other.result_.Clone() : null;
    player_ = other.player_ != null ? other.player_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P3_Response Clone() {
    return new P3_Response(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private global::PBResult result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PBResult Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "player" field.</summary>
  public const int PlayerFieldNumber = 2;
  private global::PBPlayer player_;
  /// <summary>
  ///玩家信息
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PBPlayer Player {
    get { return player_; }
    set {
      player_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as P3_Response);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(P3_Response other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Result, other.Result)) return false;
    if (!object.Equals(Player, other.Player)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (result_ != null) hash ^= Result.GetHashCode();
    if (player_ != null) hash ^= Player.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (result_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Result);
    }
    if (player_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Player);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (result_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
    }
    if (player_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Player);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(P3_Response other) {
    if (other == null) {
      return;
    }
    if (other.result_ != null) {
      if (result_ == null) {
        Result = new global::PBResult();
      }
      Result.MergeFrom(other.Result);
    }
    if (other.player_ != null) {
      if (player_ == null) {
        Player = new global::PBPlayer();
      }
      Player.MergeFrom(other.Player);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (result_ == null) {
            Result = new global::PBResult();
          }
          input.ReadMessage(Result);
          break;
        }
        case 18: {
          if (player_ == null) {
            Player = new global::PBPlayer();
          }
          input.ReadMessage(Player);
          break;
        }
      }
    }
  }

}

/// <summary>
///开始战斗
/// </summary>
public sealed partial class P4_Request : pb::IMessage<P4_Request> {
  private static readonly pb::MessageParser<P4_Request> _parser = new pb::MessageParser<P4_Request>(() => new P4_Request());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<P4_Request> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P4_Request() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P4_Request(P4_Request other) : this() {
    _hasBits0 = other._hasBits0;
    fishId_ = other.fishId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P4_Request Clone() {
    return new P4_Request(this);
  }

  /// <summary>Field number for the "fishId" field.</summary>
  public const int FishIdFieldNumber = 1;
  private readonly static int FishIdDefaultValue = 0;

  private int fishId_;
  /// <summary>
  /// 选择出战的鱼
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FishId {
    get { if ((_hasBits0 & 1) != 0) { return fishId_; } else { return FishIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      fishId_ = value;
    }
  }
  /// <summary>Gets whether the "fishId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasFishId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "fishId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearFishId() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as P4_Request);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(P4_Request other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (FishId != other.FishId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasFishId) hash ^= FishId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasFishId) {
      output.WriteRawTag(8);
      output.WriteInt32(FishId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasFishId) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(P4_Request other) {
    if (other == null) {
      return;
    }
    if (other.HasFishId) {
      FishId = other.FishId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          FishId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class P4_Response : pb::IMessage<P4_Response> {
  private static readonly pb::MessageParser<P4_Response> _parser = new pb::MessageParser<P4_Response>(() => new P4_Response());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<P4_Response> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P4_Response() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P4_Response(P4_Response other) : this() {
    result_ = other.result_ != null ? other.result_.Clone() : null;
    stageInfo_ = other.stageInfo_ != null ? other.stageInfo_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P4_Response Clone() {
    return new P4_Response(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private global::PBResult result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PBResult Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "stageInfo" field.</summary>
  public const int StageInfoFieldNumber = 2;
  private global::PBStageInfo stageInfo_;
  /// <summary>
  ///战斗舞台信息
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PBStageInfo StageInfo {
    get { return stageInfo_; }
    set {
      stageInfo_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as P4_Response);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(P4_Response other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Result, other.Result)) return false;
    if (!object.Equals(StageInfo, other.StageInfo)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (result_ != null) hash ^= Result.GetHashCode();
    if (stageInfo_ != null) hash ^= StageInfo.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (result_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Result);
    }
    if (stageInfo_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(StageInfo);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (result_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
    }
    if (stageInfo_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(StageInfo);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(P4_Response other) {
    if (other == null) {
      return;
    }
    if (other.result_ != null) {
      if (result_ == null) {
        Result = new global::PBResult();
      }
      Result.MergeFrom(other.Result);
    }
    if (other.stageInfo_ != null) {
      if (stageInfo_ == null) {
        StageInfo = new global::PBStageInfo();
      }
      StageInfo.MergeFrom(other.StageInfo);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (result_ == null) {
            Result = new global::PBResult();
          }
          input.ReadMessage(Result);
          break;
        }
        case 18: {
          if (stageInfo_ == null) {
            StageInfo = new global::PBStageInfo();
          }
          input.ReadMessage(StageInfo);
          break;
        }
      }
    }
  }

}

/// <summary>
///战斗结算
/// </summary>
public sealed partial class P5_Request : pb::IMessage<P5_Request> {
  private static readonly pb::MessageParser<P5_Request> _parser = new pb::MessageParser<P5_Request>(() => new P5_Request());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<P5_Request> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P5_Request() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P5_Request(P5_Request other) : this() {
    _hasBits0 = other._hasBits0;
    battleRanking_ = other.battleRanking_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P5_Request Clone() {
    return new P5_Request(this);
  }

  /// <summary>Field number for the "battleRanking" field.</summary>
  public const int BattleRankingFieldNumber = 1;
  private readonly static int BattleRankingDefaultValue = 0;

  private int battleRanking_;
  /// <summary>
  /// 排名,1~10
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BattleRanking {
    get { if ((_hasBits0 & 1) != 0) { return battleRanking_; } else { return BattleRankingDefaultValue; } }
    set {
      _hasBits0 |= 1;
      battleRanking_ = value;
    }
  }
  /// <summary>Gets whether the "battleRanking" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasBattleRanking {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "battleRanking" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearBattleRanking() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as P5_Request);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(P5_Request other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (BattleRanking != other.BattleRanking) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasBattleRanking) hash ^= BattleRanking.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasBattleRanking) {
      output.WriteRawTag(8);
      output.WriteInt32(BattleRanking);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasBattleRanking) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BattleRanking);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(P5_Request other) {
    if (other == null) {
      return;
    }
    if (other.HasBattleRanking) {
      BattleRanking = other.BattleRanking;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          BattleRanking = input.ReadInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class P5_Response : pb::IMessage<P5_Response> {
  private static readonly pb::MessageParser<P5_Response> _parser = new pb::MessageParser<P5_Response>(() => new P5_Response());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<P5_Response> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P5_Response() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P5_Response(P5_Response other) : this() {
    result_ = other.result_ != null ? other.result_.Clone() : null;
    player_ = other.player_ != null ? other.player_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public P5_Response Clone() {
    return new P5_Response(this);
  }

  /// <summary>Field number for the "result" field.</summary>
  public const int ResultFieldNumber = 1;
  private global::PBResult result_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PBResult Result {
    get { return result_; }
    set {
      result_ = value;
    }
  }

  /// <summary>Field number for the "player" field.</summary>
  public const int PlayerFieldNumber = 2;
  private global::PBPlayer player_;
  /// <summary>
  ///玩家信息
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PBPlayer Player {
    get { return player_; }
    set {
      player_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as P5_Response);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(P5_Response other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Result, other.Result)) return false;
    if (!object.Equals(Player, other.Player)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (result_ != null) hash ^= Result.GetHashCode();
    if (player_ != null) hash ^= Player.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (result_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Result);
    }
    if (player_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Player);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (result_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Result);
    }
    if (player_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Player);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(P5_Response other) {
    if (other == null) {
      return;
    }
    if (other.result_ != null) {
      if (result_ == null) {
        Result = new global::PBResult();
      }
      Result.MergeFrom(other.Result);
    }
    if (other.player_ != null) {
      if (player_ == null) {
        Player = new global::PBPlayer();
      }
      Player.MergeFrom(other.Player);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (result_ == null) {
            Result = new global::PBResult();
          }
          input.ReadMessage(Result);
          break;
        }
        case 18: {
          if (player_ == null) {
            Player = new global::PBPlayer();
          }
          input.ReadMessage(Player);
          break;
        }
      }
    }
  }

}

/// <summary>
///PB结果
/// </summary>
public sealed partial class PBResult : pb::IMessage<PBResult> {
  private static readonly pb::MessageParser<PBResult> _parser = new pb::MessageParser<PBResult>(() => new PBResult());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PBResult> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PBResult() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PBResult(PBResult other) : this() {
    _hasBits0 = other._hasBits0;
    code_ = other.code_;
    desc_ = other.desc_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PBResult Clone() {
    return new PBResult(this);
  }

  /// <summary>Field number for the "code" field.</summary>
  public const int CodeFieldNumber = 1;
  private readonly static int CodeDefaultValue = 0;

  private int code_;
  /// <summary>
  ///返回code
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Code {
    get { if ((_hasBits0 & 1) != 0) { return code_; } else { return CodeDefaultValue; } }
    set {
      _hasBits0 |= 1;
      code_ = value;
    }
  }
  /// <summary>Gets whether the "code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCode {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCode() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "desc" field.</summary>
  public const int DescFieldNumber = 2;
  private readonly static string DescDefaultValue = "";

  private string desc_;
  /// <summary>
  ///返回描述
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Desc {
    get { return desc_ ?? DescDefaultValue; }
    set {
      desc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "desc" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDesc {
    get { return desc_ != null; }
  }
  /// <summary>Clears the value of the "desc" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDesc() {
    desc_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PBResult);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PBResult other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Code != other.Code) return false;
    if (Desc != other.Desc) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasCode) hash ^= Code.GetHashCode();
    if (HasDesc) hash ^= Desc.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasCode) {
      output.WriteRawTag(8);
      output.WriteInt32(Code);
    }
    if (HasDesc) {
      output.WriteRawTag(18);
      output.WriteString(Desc);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasCode) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Code);
    }
    if (HasDesc) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Desc);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PBResult other) {
    if (other == null) {
      return;
    }
    if (other.HasCode) {
      Code = other.Code;
    }
    if (other.HasDesc) {
      Desc = other.Desc;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Code = input.ReadInt32();
          break;
        }
        case 18: {
          Desc = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class PBPlayerFishLevelInfo : pb::IMessage<PBPlayerFishLevelInfo> {
  private static readonly pb::MessageParser<PBPlayerFishLevelInfo> _parser = new pb::MessageParser<PBPlayerFishLevelInfo>(() => new PBPlayerFishLevelInfo());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PBPlayerFishLevelInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PBPlayerFishLevelInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PBPlayerFishLevelInfo(PBPlayerFishLevelInfo other) : this() {
    _hasBits0 = other._hasBits0;
    fishId_ = other.fishId_;
    fishLevel_ = other.fishLevel_;
    fishChip_ = other.fishChip_;
    rankLevel_ = other.rankLevel_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PBPlayerFishLevelInfo Clone() {
    return new PBPlayerFishLevelInfo(this);
  }

  /// <summary>Field number for the "fishId" field.</summary>
  public const int FishIdFieldNumber = 1;
  private readonly static int FishIdDefaultValue = 0;

  private int fishId_;
  /// <summary>
  /// 魚ID，對照FishDataTable的ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FishId {
    get { if ((_hasBits0 & 1) != 0) { return fishId_; } else { return FishIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      fishId_ = value;
    }
  }
  /// <summary>Gets whether the "fishId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasFishId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "fishId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearFishId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "fishLevel" field.</summary>
  public const int FishLevelFieldNumber = 2;
  private readonly static int FishLevelDefaultValue = 0;

  private int fishLevel_;
  /// <summary>
  /// 当前鱼等级
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FishLevel {
    get { if ((_hasBits0 & 2) != 0) { return fishLevel_; } else { return FishLevelDefaultValue; } }
    set {
      _hasBits0 |= 2;
      fishLevel_ = value;
    }
  }
  /// <summary>Gets whether the "fishLevel" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasFishLevel {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "fishLevel" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearFishLevel() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "fishChip" field.</summary>
  public const int FishChipFieldNumber = 3;
  private readonly static int FishChipDefaultValue = 0;

  private int fishChip_;
  /// <summary>
  /// 升級用的魚碎片
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FishChip {
    get { if ((_hasBits0 & 4) != 0) { return fishChip_; } else { return FishChipDefaultValue; } }
    set {
      _hasBits0 |= 4;
      fishChip_ = value;
    }
  }
  /// <summary>Gets whether the "fishChip" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasFishChip {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "fishChip" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearFishChip() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "rankLevel" field.</summary>
  public const int RankLevelFieldNumber = 4;
  private readonly static int RankLevelDefaultValue = 0;

  private int rankLevel_;
  /// <summary>
  /// 段位等级
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int RankLevel {
    get { if ((_hasBits0 & 8) != 0) { return rankLevel_; } else { return RankLevelDefaultValue; } }
    set {
      _hasBits0 |= 8;
      rankLevel_ = value;
    }
  }
  /// <summary>Gets whether the "rankLevel" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRankLevel {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "rankLevel" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRankLevel() {
    _hasBits0 &= ~8;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PBPlayerFishLevelInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PBPlayerFishLevelInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (FishId != other.FishId) return false;
    if (FishLevel != other.FishLevel) return false;
    if (FishChip != other.FishChip) return false;
    if (RankLevel != other.RankLevel) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasFishId) hash ^= FishId.GetHashCode();
    if (HasFishLevel) hash ^= FishLevel.GetHashCode();
    if (HasFishChip) hash ^= FishChip.GetHashCode();
    if (HasRankLevel) hash ^= RankLevel.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasFishId) {
      output.WriteRawTag(8);
      output.WriteInt32(FishId);
    }
    if (HasFishLevel) {
      output.WriteRawTag(16);
      output.WriteInt32(FishLevel);
    }
    if (HasFishChip) {
      output.WriteRawTag(24);
      output.WriteInt32(FishChip);
    }
    if (HasRankLevel) {
      output.WriteRawTag(32);
      output.WriteInt32(RankLevel);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasFishId) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishId);
    }
    if (HasFishLevel) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishLevel);
    }
    if (HasFishChip) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishChip);
    }
    if (HasRankLevel) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(RankLevel);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PBPlayerFishLevelInfo other) {
    if (other == null) {
      return;
    }
    if (other.HasFishId) {
      FishId = other.FishId;
    }
    if (other.HasFishLevel) {
      FishLevel = other.FishLevel;
    }
    if (other.HasFishChip) {
      FishChip = other.FishChip;
    }
    if (other.HasRankLevel) {
      RankLevel = other.RankLevel;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          FishId = input.ReadInt32();
          break;
        }
        case 16: {
          FishLevel = input.ReadInt32();
          break;
        }
        case 24: {
          FishChip = input.ReadInt32();
          break;
        }
        case 32: {
          RankLevel = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
///玩家模型
/// </summary>
public sealed partial class PBPlayer : pb::IMessage<PBPlayer> {
  private static readonly pb::MessageParser<PBPlayer> _parser = new pb::MessageParser<PBPlayer>(() => new PBPlayer());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PBPlayer> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PBPlayer() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PBPlayer(PBPlayer other) : this() {
    _hasBits0 = other._hasBits0;
    playerId_ = other.playerId_;
    nickname_ = other.nickname_;
    rank_ = other.rank_;
    regTime_ = other.regTime_;
    loginLast_ = other.loginLast_;
    diamond_ = other.diamond_;
    gold_ = other.gold_;
    power_ = other.power_;
    powerAt_ = other.powerAt_;
    fightFish_ = other.fightFish_;
    aryPlayerFishInfo_ = other.aryPlayerFishInfo_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PBPlayer Clone() {
    return new PBPlayer(this);
  }

  /// <summary>Field number for the "playerId" field.</summary>
  public const int PlayerIdFieldNumber = 1;
  private readonly static long PlayerIdDefaultValue = 0L;

  private long playerId_;
  /// <summary>
  ///玩家ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PlayerId {
    get { if ((_hasBits0 & 1) != 0) { return playerId_; } else { return PlayerIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      playerId_ = value;
    }
  }
  /// <summary>Gets whether the "playerId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPlayerId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "playerId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPlayerId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "nickname" field.</summary>
  public const int NicknameFieldNumber = 2;
  private readonly static string NicknameDefaultValue = "";

  private string nickname_;
  /// <summary>
  ///名字
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Nickname {
    get { return nickname_ ?? NicknameDefaultValue; }
    set {
      nickname_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "nickname" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasNickname {
    get { return nickname_ != null; }
  }
  /// <summary>Clears the value of the "nickname" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearNickname() {
    nickname_ = null;
  }

  /// <summary>Field number for the "rank" field.</summary>
  public const int RankFieldNumber = 3;
  private readonly static int RankDefaultValue = 0;

  private int rank_;
  /// <summary>
  ///段位
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Rank {
    get { if ((_hasBits0 & 2) != 0) { return rank_; } else { return RankDefaultValue; } }
    set {
      _hasBits0 |= 2;
      rank_ = value;
    }
  }
  /// <summary>Gets whether the "rank" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRank {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "rank" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRank() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "regTime" field.</summary>
  public const int RegTimeFieldNumber = 4;
  private readonly static long RegTimeDefaultValue = 0L;

  private long regTime_;
  /// <summary>
  ///注册时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long RegTime {
    get { if ((_hasBits0 & 4) != 0) { return regTime_; } else { return RegTimeDefaultValue; } }
    set {
      _hasBits0 |= 4;
      regTime_ = value;
    }
  }
  /// <summary>Gets whether the "regTime" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasRegTime {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "regTime" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearRegTime() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "loginLast" field.</summary>
  public const int LoginLastFieldNumber = 5;
  private readonly static long LoginLastDefaultValue = 0L;

  private long loginLast_;
  /// <summary>
  ///上次登入时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long LoginLast {
    get { if ((_hasBits0 & 8) != 0) { return loginLast_; } else { return LoginLastDefaultValue; } }
    set {
      _hasBits0 |= 8;
      loginLast_ = value;
    }
  }
  /// <summary>Gets whether the "loginLast" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasLoginLast {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "loginLast" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearLoginLast() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "diamond" field.</summary>
  public const int DiamondFieldNumber = 6;
  private readonly static int DiamondDefaultValue = 0;

  private int diamond_;
  /// <summary>
  ///钻石
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Diamond {
    get { if ((_hasBits0 & 16) != 0) { return diamond_; } else { return DiamondDefaultValue; } }
    set {
      _hasBits0 |= 16;
      diamond_ = value;
    }
  }
  /// <summary>Gets whether the "diamond" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDiamond {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "diamond" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDiamond() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "gold" field.</summary>
  public const int GoldFieldNumber = 7;
  private readonly static int GoldDefaultValue = 0;

  private int gold_;
  /// <summary>
  ///金币
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Gold {
    get { if ((_hasBits0 & 32) != 0) { return gold_; } else { return GoldDefaultValue; } }
    set {
      _hasBits0 |= 32;
      gold_ = value;
    }
  }
  /// <summary>Gets whether the "gold" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasGold {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "gold" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearGold() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "power" field.</summary>
  public const int PowerFieldNumber = 8;
  private readonly static int PowerDefaultValue = 0;

  private int power_;
  /// <summary>
  ///体力
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Power {
    get { if ((_hasBits0 & 64) != 0) { return power_; } else { return PowerDefaultValue; } }
    set {
      _hasBits0 |= 64;
      power_ = value;
    }
  }
  /// <summary>Gets whether the "power" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPower {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "power" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPower() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "powerAt" field.</summary>
  public const int PowerAtFieldNumber = 9;
  private readonly static long PowerAtDefaultValue = 0L;

  private long powerAt_;
  /// <summary>
  ///体力时间
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public long PowerAt {
    get { if ((_hasBits0 & 128) != 0) { return powerAt_; } else { return PowerAtDefaultValue; } }
    set {
      _hasBits0 |= 128;
      powerAt_ = value;
    }
  }
  /// <summary>Gets whether the "powerAt" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPowerAt {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "powerAt" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPowerAt() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "fightFish" field.</summary>
  public const int FightFishFieldNumber = 10;
  private readonly static int FightFishDefaultValue = 0;

  private int fightFish_;
  /// <summary>
  ///出战鱼
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FightFish {
    get { if ((_hasBits0 & 256) != 0) { return fightFish_; } else { return FightFishDefaultValue; } }
    set {
      _hasBits0 |= 256;
      fightFish_ = value;
    }
  }
  /// <summary>Gets whether the "fightFish" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasFightFish {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "fightFish" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearFightFish() {
    _hasBits0 &= ~256;
  }

  /// <summary>Field number for the "aryPlayerFishInfo" field.</summary>
  public const int AryPlayerFishInfoFieldNumber = 11;
  private static readonly pb::FieldCodec<global::PBPlayerFishLevelInfo> _repeated_aryPlayerFishInfo_codec
      = pb::FieldCodec.ForMessage(90, global::PBPlayerFishLevelInfo.Parser);
  private readonly pbc::RepeatedField<global::PBPlayerFishLevelInfo> aryPlayerFishInfo_ = new pbc::RepeatedField<global::PBPlayerFishLevelInfo>();
  /// <summary>
  /// 玩家鱼信息
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PBPlayerFishLevelInfo> AryPlayerFishInfo {
    get { return aryPlayerFishInfo_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PBPlayer);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PBPlayer other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PlayerId != other.PlayerId) return false;
    if (Nickname != other.Nickname) return false;
    if (Rank != other.Rank) return false;
    if (RegTime != other.RegTime) return false;
    if (LoginLast != other.LoginLast) return false;
    if (Diamond != other.Diamond) return false;
    if (Gold != other.Gold) return false;
    if (Power != other.Power) return false;
    if (PowerAt != other.PowerAt) return false;
    if (FightFish != other.FightFish) return false;
    if(!aryPlayerFishInfo_.Equals(other.aryPlayerFishInfo_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasPlayerId) hash ^= PlayerId.GetHashCode();
    if (HasNickname) hash ^= Nickname.GetHashCode();
    if (HasRank) hash ^= Rank.GetHashCode();
    if (HasRegTime) hash ^= RegTime.GetHashCode();
    if (HasLoginLast) hash ^= LoginLast.GetHashCode();
    if (HasDiamond) hash ^= Diamond.GetHashCode();
    if (HasGold) hash ^= Gold.GetHashCode();
    if (HasPower) hash ^= Power.GetHashCode();
    if (HasPowerAt) hash ^= PowerAt.GetHashCode();
    if (HasFightFish) hash ^= FightFish.GetHashCode();
    hash ^= aryPlayerFishInfo_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasPlayerId) {
      output.WriteRawTag(8);
      output.WriteInt64(PlayerId);
    }
    if (HasNickname) {
      output.WriteRawTag(18);
      output.WriteString(Nickname);
    }
    if (HasRank) {
      output.WriteRawTag(24);
      output.WriteInt32(Rank);
    }
    if (HasRegTime) {
      output.WriteRawTag(32);
      output.WriteInt64(RegTime);
    }
    if (HasLoginLast) {
      output.WriteRawTag(40);
      output.WriteInt64(LoginLast);
    }
    if (HasDiamond) {
      output.WriteRawTag(48);
      output.WriteInt32(Diamond);
    }
    if (HasGold) {
      output.WriteRawTag(56);
      output.WriteInt32(Gold);
    }
    if (HasPower) {
      output.WriteRawTag(64);
      output.WriteInt32(Power);
    }
    if (HasPowerAt) {
      output.WriteRawTag(72);
      output.WriteInt64(PowerAt);
    }
    if (HasFightFish) {
      output.WriteRawTag(80);
      output.WriteInt32(FightFish);
    }
    aryPlayerFishInfo_.WriteTo(output, _repeated_aryPlayerFishInfo_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasPlayerId) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
    }
    if (HasNickname) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Nickname);
    }
    if (HasRank) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
    }
    if (HasRegTime) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(RegTime);
    }
    if (HasLoginLast) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(LoginLast);
    }
    if (HasDiamond) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Diamond);
    }
    if (HasGold) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Gold);
    }
    if (HasPower) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Power);
    }
    if (HasPowerAt) {
      size += 1 + pb::CodedOutputStream.ComputeInt64Size(PowerAt);
    }
    if (HasFightFish) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FightFish);
    }
    size += aryPlayerFishInfo_.CalculateSize(_repeated_aryPlayerFishInfo_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PBPlayer other) {
    if (other == null) {
      return;
    }
    if (other.HasPlayerId) {
      PlayerId = other.PlayerId;
    }
    if (other.HasNickname) {
      Nickname = other.Nickname;
    }
    if (other.HasRank) {
      Rank = other.Rank;
    }
    if (other.HasRegTime) {
      RegTime = other.RegTime;
    }
    if (other.HasLoginLast) {
      LoginLast = other.LoginLast;
    }
    if (other.HasDiamond) {
      Diamond = other.Diamond;
    }
    if (other.HasGold) {
      Gold = other.Gold;
    }
    if (other.HasPower) {
      Power = other.Power;
    }
    if (other.HasPowerAt) {
      PowerAt = other.PowerAt;
    }
    if (other.HasFightFish) {
      FightFish = other.FightFish;
    }
    aryPlayerFishInfo_.Add(other.aryPlayerFishInfo_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PlayerId = input.ReadInt64();
          break;
        }
        case 18: {
          Nickname = input.ReadString();
          break;
        }
        case 24: {
          Rank = input.ReadInt32();
          break;
        }
        case 32: {
          RegTime = input.ReadInt64();
          break;
        }
        case 40: {
          LoginLast = input.ReadInt64();
          break;
        }
        case 48: {
          Diamond = input.ReadInt32();
          break;
        }
        case 56: {
          Gold = input.ReadInt32();
          break;
        }
        case 64: {
          Power = input.ReadInt32();
          break;
        }
        case 72: {
          PowerAt = input.ReadInt64();
          break;
        }
        case 80: {
          FightFish = input.ReadInt32();
          break;
        }
        case 90: {
          aryPlayerFishInfo_.AddEntriesFrom(input, _repeated_aryPlayerFishInfo_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// 敵人
/// </summary>
public sealed partial class PBEnemyDataInfo : pb::IMessage<PBEnemyDataInfo> {
  private static readonly pb::MessageParser<PBEnemyDataInfo> _parser = new pb::MessageParser<PBEnemyDataInfo>(() => new PBEnemyDataInfo());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PBEnemyDataInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[14]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PBEnemyDataInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PBEnemyDataInfo(PBEnemyDataInfo other) : this() {
    _hasBits0 = other._hasBits0;
    fishId_ = other.fishId_;
    fishCountMax_ = other.fishCountMax_;
    fishCountMin_ = other.fishCountMin_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PBEnemyDataInfo Clone() {
    return new PBEnemyDataInfo(this);
  }

  /// <summary>Field number for the "fishId" field.</summary>
  public const int FishIdFieldNumber = 1;
  private readonly static int FishIdDefaultValue = 0;

  private int fishId_;
  /// <summary>
  /// 魚ID，對照FishDataTable的ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FishId {
    get { if ((_hasBits0 & 1) != 0) { return fishId_; } else { return FishIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      fishId_ = value;
    }
  }
  /// <summary>Gets whether the "fishId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasFishId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "fishId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearFishId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "fishCountMax" field.</summary>
  public const int FishCountMaxFieldNumber = 2;
  private readonly static int FishCountMaxDefaultValue = 0;

  private int fishCountMax_;
  /// <summary>
  /// 最大数量
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FishCountMax {
    get { if ((_hasBits0 & 2) != 0) { return fishCountMax_; } else { return FishCountMaxDefaultValue; } }
    set {
      _hasBits0 |= 2;
      fishCountMax_ = value;
    }
  }
  /// <summary>Gets whether the "fishCountMax" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasFishCountMax {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "fishCountMax" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearFishCountMax() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "fishCountMin" field.</summary>
  public const int FishCountMinFieldNumber = 3;
  private readonly static int FishCountMinDefaultValue = 0;

  private int fishCountMin_;
  /// <summary>
  /// 最小数量
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FishCountMin {
    get { if ((_hasBits0 & 4) != 0) { return fishCountMin_; } else { return FishCountMinDefaultValue; } }
    set {
      _hasBits0 |= 4;
      fishCountMin_ = value;
    }
  }
  /// <summary>Gets whether the "fishCountMin" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasFishCountMin {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "fishCountMin" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearFishCountMin() {
    _hasBits0 &= ~4;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PBEnemyDataInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PBEnemyDataInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (FishId != other.FishId) return false;
    if (FishCountMax != other.FishCountMax) return false;
    if (FishCountMin != other.FishCountMin) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasFishId) hash ^= FishId.GetHashCode();
    if (HasFishCountMax) hash ^= FishCountMax.GetHashCode();
    if (HasFishCountMin) hash ^= FishCountMin.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasFishId) {
      output.WriteRawTag(8);
      output.WriteInt32(FishId);
    }
    if (HasFishCountMax) {
      output.WriteRawTag(16);
      output.WriteInt32(FishCountMax);
    }
    if (HasFishCountMin) {
      output.WriteRawTag(24);
      output.WriteInt32(FishCountMin);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasFishId) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishId);
    }
    if (HasFishCountMax) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishCountMax);
    }
    if (HasFishCountMin) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishCountMin);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PBEnemyDataInfo other) {
    if (other == null) {
      return;
    }
    if (other.HasFishId) {
      FishId = other.FishId;
    }
    if (other.HasFishCountMax) {
      FishCountMax = other.FishCountMax;
    }
    if (other.HasFishCountMin) {
      FishCountMin = other.FishCountMin;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          FishId = input.ReadInt32();
          break;
        }
        case 16: {
          FishCountMax = input.ReadInt32();
          break;
        }
        case 24: {
          FishCountMin = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 机器人
/// </summary>
public sealed partial class PBRobotDataInfo : pb::IMessage<PBRobotDataInfo> {
  private static readonly pb::MessageParser<PBRobotDataInfo> _parser = new pb::MessageParser<PBRobotDataInfo>(() => new PBRobotDataInfo());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PBRobotDataInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[15]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PBRobotDataInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PBRobotDataInfo(PBRobotDataInfo other) : this() {
    _hasBits0 = other._hasBits0;
    fishId_ = other.fishId_;
    aiId_ = other.aiId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PBRobotDataInfo Clone() {
    return new PBRobotDataInfo(this);
  }

  /// <summary>Field number for the "fishId" field.</summary>
  public const int FishIdFieldNumber = 1;
  private readonly static int FishIdDefaultValue = 0;

  private int fishId_;
  /// <summary>
  /// 魚ID，對照FishDataTable的ID
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int FishId {
    get { if ((_hasBits0 & 1) != 0) { return fishId_; } else { return FishIdDefaultValue; } }
    set {
      _hasBits0 |= 1;
      fishId_ = value;
    }
  }
  /// <summary>Gets whether the "fishId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasFishId {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "fishId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearFishId() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "aiId" field.</summary>
  public const int AiIdFieldNumber = 2;
  private readonly static int AiIdDefaultValue = 0;

  private int aiId_;
  /// <summary>
  /// 参照基表c_RobotAiData.xlsx
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int AiId {
    get { if ((_hasBits0 & 2) != 0) { return aiId_; } else { return AiIdDefaultValue; } }
    set {
      _hasBits0 |= 2;
      aiId_ = value;
    }
  }
  /// <summary>Gets whether the "aiId" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAiId {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "aiId" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAiId() {
    _hasBits0 &= ~2;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PBRobotDataInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PBRobotDataInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (FishId != other.FishId) return false;
    if (AiId != other.AiId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasFishId) hash ^= FishId.GetHashCode();
    if (HasAiId) hash ^= AiId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasFishId) {
      output.WriteRawTag(8);
      output.WriteInt32(FishId);
    }
    if (HasAiId) {
      output.WriteRawTag(16);
      output.WriteInt32(AiId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasFishId) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(FishId);
    }
    if (HasAiId) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(AiId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PBRobotDataInfo other) {
    if (other == null) {
      return;
    }
    if (other.HasFishId) {
      FishId = other.FishId;
    }
    if (other.HasAiId) {
      AiId = other.AiId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          FishId = input.ReadInt32();
          break;
        }
        case 16: {
          AiId = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// 战斗舞台信息
/// </summary>
public sealed partial class PBStageInfo : pb::IMessage<PBStageInfo> {
  private static readonly pb::MessageParser<PBStageInfo> _parser = new pb::MessageParser<PBStageInfo>(() => new PBStageInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<PBStageInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ProtocolReflection.Descriptor.MessageTypes[16]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PBStageInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PBStageInfo(PBStageInfo other) : this() {
    aryEnemyDataInfo_ = other.aryEnemyDataInfo_.Clone();
    aryRobotDataInfo_ = other.aryRobotDataInfo_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public PBStageInfo Clone() {
    return new PBStageInfo(this);
  }

  /// <summary>Field number for the "aryEnemyDataInfo" field.</summary>
  public const int AryEnemyDataInfoFieldNumber = 1;
  private static readonly pb::FieldCodec<global::PBEnemyDataInfo> _repeated_aryEnemyDataInfo_codec
      = pb::FieldCodec.ForMessage(10, global::PBEnemyDataInfo.Parser);
  private readonly pbc::RepeatedField<global::PBEnemyDataInfo> aryEnemyDataInfo_ = new pbc::RepeatedField<global::PBEnemyDataInfo>();
  /// <summary>
  /// 杂鱼信息，今后可能会根据段位而变化
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PBEnemyDataInfo> AryEnemyDataInfo {
    get { return aryEnemyDataInfo_; }
  }

  /// <summary>Field number for the "aryRobotDataInfo" field.</summary>
  public const int AryRobotDataInfoFieldNumber = 2;
  private static readonly pb::FieldCodec<global::PBRobotDataInfo> _repeated_aryRobotDataInfo_codec
      = pb::FieldCodec.ForMessage(18, global::PBRobotDataInfo.Parser);
  private readonly pbc::RepeatedField<global::PBRobotDataInfo> aryRobotDataInfo_ = new pbc::RepeatedField<global::PBRobotDataInfo>();
  /// <summary>
  /// 机器人，Boss信息
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::PBRobotDataInfo> AryRobotDataInfo {
    get { return aryRobotDataInfo_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as PBStageInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(PBStageInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!aryEnemyDataInfo_.Equals(other.aryEnemyDataInfo_)) return false;
    if(!aryRobotDataInfo_.Equals(other.aryRobotDataInfo_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= aryEnemyDataInfo_.GetHashCode();
    hash ^= aryRobotDataInfo_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    aryEnemyDataInfo_.WriteTo(output, _repeated_aryEnemyDataInfo_codec);
    aryRobotDataInfo_.WriteTo(output, _repeated_aryRobotDataInfo_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += aryEnemyDataInfo_.CalculateSize(_repeated_aryEnemyDataInfo_codec);
    size += aryRobotDataInfo_.CalculateSize(_repeated_aryRobotDataInfo_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(PBStageInfo other) {
    if (other == null) {
      return;
    }
    aryEnemyDataInfo_.Add(other.aryEnemyDataInfo_);
    aryRobotDataInfo_.Add(other.aryRobotDataInfo_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          aryEnemyDataInfo_.AddEntriesFrom(input, _repeated_aryEnemyDataInfo_codec);
          break;
        }
        case 18: {
          aryRobotDataInfo_.AddEntriesFrom(input, _repeated_aryRobotDataInfo_codec);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
